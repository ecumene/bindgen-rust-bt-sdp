/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _BYTESWAP_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const BTPROTO_L2CAP: u32 = 0;
pub const BTPROTO_HCI: u32 = 1;
pub const BTPROTO_SCO: u32 = 2;
pub const BTPROTO_RFCOMM: u32 = 3;
pub const BTPROTO_BNEP: u32 = 4;
pub const BTPROTO_CMTP: u32 = 5;
pub const BTPROTO_HIDP: u32 = 6;
pub const BTPROTO_AVDTP: u32 = 7;
pub const SOL_HCI: u32 = 0;
pub const SOL_L2CAP: u32 = 6;
pub const SOL_SCO: u32 = 17;
pub const SOL_RFCOMM: u32 = 18;
pub const BT_SECURITY: u32 = 4;
pub const BT_SECURITY_SDP: u32 = 0;
pub const BT_SECURITY_LOW: u32 = 1;
pub const BT_SECURITY_MEDIUM: u32 = 2;
pub const BT_SECURITY_HIGH: u32 = 3;
pub const BT_SECURITY_FIPS: u32 = 4;
pub const BT_DEFER_SETUP: u32 = 7;
pub const BT_FLUSHABLE: u32 = 8;
pub const BT_FLUSHABLE_OFF: u32 = 0;
pub const BT_FLUSHABLE_ON: u32 = 1;
pub const BT_POWER: u32 = 9;
pub const BT_POWER_FORCE_ACTIVE_OFF: u32 = 0;
pub const BT_POWER_FORCE_ACTIVE_ON: u32 = 1;
pub const BT_CHANNEL_POLICY: u32 = 10;
pub const BT_CHANNEL_POLICY_BREDR_ONLY: u32 = 0;
pub const BT_CHANNEL_POLICY_BREDR_PREFERRED: u32 = 1;
pub const BT_CHANNEL_POLICY_AMP_PREFERRED: u32 = 2;
pub const BT_VOICE: u32 = 11;
pub const BT_SNDMTU: u32 = 12;
pub const BT_RCVMTU: u32 = 13;
pub const BT_VOICE_TRANSPARENT: u32 = 3;
pub const BT_VOICE_CVSD_16BIT: u32 = 96;
pub const BDADDR_BREDR: u32 = 0;
pub const BDADDR_LE_PUBLIC: u32 = 1;
pub const BDADDR_LE_RANDOM: u32 = 2;
pub const SDP_UNIX_PATH: &'static [u8; 13usize] = b"/var/run/sdp\0";
pub const SDP_RESPONSE_TIMEOUT: u32 = 20;
pub const SDP_REQ_BUFFER_SIZE: u32 = 2048;
pub const SDP_RSP_BUFFER_SIZE: u32 = 65535;
pub const SDP_PDU_CHUNK_SIZE: u32 = 1024;
pub const SDP_PSM: u32 = 1;
pub const SDP_UUID: u32 = 1;
pub const UDP_UUID: u32 = 2;
pub const RFCOMM_UUID: u32 = 3;
pub const TCP_UUID: u32 = 4;
pub const TCS_BIN_UUID: u32 = 5;
pub const TCS_AT_UUID: u32 = 6;
pub const ATT_UUID: u32 = 7;
pub const OBEX_UUID: u32 = 8;
pub const IP_UUID: u32 = 9;
pub const FTP_UUID: u32 = 10;
pub const HTTP_UUID: u32 = 12;
pub const WSP_UUID: u32 = 14;
pub const BNEP_UUID: u32 = 15;
pub const UPNP_UUID: u32 = 16;
pub const HIDP_UUID: u32 = 17;
pub const HCRP_CTRL_UUID: u32 = 18;
pub const HCRP_DATA_UUID: u32 = 20;
pub const HCRP_NOTE_UUID: u32 = 22;
pub const AVCTP_UUID: u32 = 23;
pub const AVDTP_UUID: u32 = 25;
pub const CMTP_UUID: u32 = 27;
pub const UDI_UUID: u32 = 29;
pub const MCAP_CTRL_UUID: u32 = 30;
pub const MCAP_DATA_UUID: u32 = 31;
pub const L2CAP_UUID: u32 = 256;
pub const SDP_SERVER_SVCLASS_ID: u32 = 4096;
pub const BROWSE_GRP_DESC_SVCLASS_ID: u32 = 4097;
pub const PUBLIC_BROWSE_GROUP: u32 = 4098;
pub const SERIAL_PORT_SVCLASS_ID: u32 = 4353;
pub const LAN_ACCESS_SVCLASS_ID: u32 = 4354;
pub const DIALUP_NET_SVCLASS_ID: u32 = 4355;
pub const IRMC_SYNC_SVCLASS_ID: u32 = 4356;
pub const OBEX_OBJPUSH_SVCLASS_ID: u32 = 4357;
pub const OBEX_FILETRANS_SVCLASS_ID: u32 = 4358;
pub const IRMC_SYNC_CMD_SVCLASS_ID: u32 = 4359;
pub const HEADSET_SVCLASS_ID: u32 = 4360;
pub const CORDLESS_TELEPHONY_SVCLASS_ID: u32 = 4361;
pub const AUDIO_SOURCE_SVCLASS_ID: u32 = 4362;
pub const AUDIO_SINK_SVCLASS_ID: u32 = 4363;
pub const AV_REMOTE_TARGET_SVCLASS_ID: u32 = 4364;
pub const ADVANCED_AUDIO_SVCLASS_ID: u32 = 4365;
pub const AV_REMOTE_SVCLASS_ID: u32 = 4366;
pub const AV_REMOTE_CONTROLLER_SVCLASS_ID: u32 = 4367;
pub const INTERCOM_SVCLASS_ID: u32 = 4368;
pub const FAX_SVCLASS_ID: u32 = 4369;
pub const HEADSET_AGW_SVCLASS_ID: u32 = 4370;
pub const WAP_SVCLASS_ID: u32 = 4371;
pub const WAP_CLIENT_SVCLASS_ID: u32 = 4372;
pub const PANU_SVCLASS_ID: u32 = 4373;
pub const NAP_SVCLASS_ID: u32 = 4374;
pub const GN_SVCLASS_ID: u32 = 4375;
pub const DIRECT_PRINTING_SVCLASS_ID: u32 = 4376;
pub const REFERENCE_PRINTING_SVCLASS_ID: u32 = 4377;
pub const IMAGING_SVCLASS_ID: u32 = 4378;
pub const IMAGING_RESPONDER_SVCLASS_ID: u32 = 4379;
pub const IMAGING_ARCHIVE_SVCLASS_ID: u32 = 4380;
pub const IMAGING_REFOBJS_SVCLASS_ID: u32 = 4381;
pub const HANDSFREE_SVCLASS_ID: u32 = 4382;
pub const HANDSFREE_AGW_SVCLASS_ID: u32 = 4383;
pub const DIRECT_PRT_REFOBJS_SVCLASS_ID: u32 = 4384;
pub const REFLECTED_UI_SVCLASS_ID: u32 = 4385;
pub const BASIC_PRINTING_SVCLASS_ID: u32 = 4386;
pub const PRINTING_STATUS_SVCLASS_ID: u32 = 4387;
pub const HID_SVCLASS_ID: u32 = 4388;
pub const HCR_SVCLASS_ID: u32 = 4389;
pub const HCR_PRINT_SVCLASS_ID: u32 = 4390;
pub const HCR_SCAN_SVCLASS_ID: u32 = 4391;
pub const CIP_SVCLASS_ID: u32 = 4392;
pub const VIDEO_CONF_GW_SVCLASS_ID: u32 = 4393;
pub const UDI_MT_SVCLASS_ID: u32 = 4394;
pub const UDI_TA_SVCLASS_ID: u32 = 4395;
pub const AV_SVCLASS_ID: u32 = 4396;
pub const SAP_SVCLASS_ID: u32 = 4397;
pub const PBAP_PCE_SVCLASS_ID: u32 = 4398;
pub const PBAP_PSE_SVCLASS_ID: u32 = 4399;
pub const PBAP_SVCLASS_ID: u32 = 4400;
pub const MAP_MSE_SVCLASS_ID: u32 = 4402;
pub const MAP_MCE_SVCLASS_ID: u32 = 4403;
pub const MAP_SVCLASS_ID: u32 = 4404;
pub const GNSS_SVCLASS_ID: u32 = 4405;
pub const GNSS_SERVER_SVCLASS_ID: u32 = 4406;
pub const MPS_SC_SVCLASS_ID: u32 = 4410;
pub const MPS_SVCLASS_ID: u32 = 4411;
pub const PNP_INFO_SVCLASS_ID: u32 = 4608;
pub const GENERIC_NETWORKING_SVCLASS_ID: u32 = 4609;
pub const GENERIC_FILETRANS_SVCLASS_ID: u32 = 4610;
pub const GENERIC_AUDIO_SVCLASS_ID: u32 = 4611;
pub const GENERIC_TELEPHONY_SVCLASS_ID: u32 = 4612;
pub const UPNP_SVCLASS_ID: u32 = 4613;
pub const UPNP_IP_SVCLASS_ID: u32 = 4614;
pub const UPNP_PAN_SVCLASS_ID: u32 = 4864;
pub const UPNP_LAP_SVCLASS_ID: u32 = 4865;
pub const UPNP_L2CAP_SVCLASS_ID: u32 = 4866;
pub const VIDEO_SOURCE_SVCLASS_ID: u32 = 4867;
pub const VIDEO_SINK_SVCLASS_ID: u32 = 4868;
pub const VIDEO_DISTRIBUTION_SVCLASS_ID: u32 = 4869;
pub const HDP_SVCLASS_ID: u32 = 5120;
pub const HDP_SOURCE_SVCLASS_ID: u32 = 5121;
pub const HDP_SINK_SVCLASS_ID: u32 = 5122;
pub const GENERIC_ACCESS_SVCLASS_ID: u32 = 6144;
pub const GENERIC_ATTRIB_SVCLASS_ID: u32 = 6145;
pub const APPLE_AGENT_SVCLASS_ID: u32 = 8466;
pub const SDP_SERVER_PROFILE_ID: u32 = 4096;
pub const BROWSE_GRP_DESC_PROFILE_ID: u32 = 4097;
pub const SERIAL_PORT_PROFILE_ID: u32 = 4353;
pub const LAN_ACCESS_PROFILE_ID: u32 = 4354;
pub const DIALUP_NET_PROFILE_ID: u32 = 4355;
pub const IRMC_SYNC_PROFILE_ID: u32 = 4356;
pub const OBEX_OBJPUSH_PROFILE_ID: u32 = 4357;
pub const OBEX_FILETRANS_PROFILE_ID: u32 = 4358;
pub const IRMC_SYNC_CMD_PROFILE_ID: u32 = 4359;
pub const HEADSET_PROFILE_ID: u32 = 4360;
pub const CORDLESS_TELEPHONY_PROFILE_ID: u32 = 4361;
pub const AUDIO_SOURCE_PROFILE_ID: u32 = 4362;
pub const AUDIO_SINK_PROFILE_ID: u32 = 4363;
pub const AV_REMOTE_TARGET_PROFILE_ID: u32 = 4364;
pub const ADVANCED_AUDIO_PROFILE_ID: u32 = 4365;
pub const AV_REMOTE_PROFILE_ID: u32 = 4366;
pub const INTERCOM_PROFILE_ID: u32 = 4368;
pub const FAX_PROFILE_ID: u32 = 4369;
pub const HEADSET_AGW_PROFILE_ID: u32 = 4370;
pub const WAP_PROFILE_ID: u32 = 4371;
pub const WAP_CLIENT_PROFILE_ID: u32 = 4372;
pub const PANU_PROFILE_ID: u32 = 4373;
pub const NAP_PROFILE_ID: u32 = 4374;
pub const GN_PROFILE_ID: u32 = 4375;
pub const DIRECT_PRINTING_PROFILE_ID: u32 = 4376;
pub const REFERENCE_PRINTING_PROFILE_ID: u32 = 4377;
pub const IMAGING_PROFILE_ID: u32 = 4378;
pub const IMAGING_RESPONDER_PROFILE_ID: u32 = 4379;
pub const IMAGING_ARCHIVE_PROFILE_ID: u32 = 4380;
pub const IMAGING_REFOBJS_PROFILE_ID: u32 = 4381;
pub const HANDSFREE_PROFILE_ID: u32 = 4382;
pub const HANDSFREE_AGW_PROFILE_ID: u32 = 4383;
pub const DIRECT_PRT_REFOBJS_PROFILE_ID: u32 = 4384;
pub const REFLECTED_UI_PROFILE_ID: u32 = 4385;
pub const BASIC_PRINTING_PROFILE_ID: u32 = 4386;
pub const PRINTING_STATUS_PROFILE_ID: u32 = 4387;
pub const HID_PROFILE_ID: u32 = 4388;
pub const HCR_PROFILE_ID: u32 = 4391;
pub const HCR_PRINT_PROFILE_ID: u32 = 4390;
pub const HCR_SCAN_PROFILE_ID: u32 = 4391;
pub const CIP_PROFILE_ID: u32 = 4392;
pub const VIDEO_CONF_GW_PROFILE_ID: u32 = 4393;
pub const UDI_MT_PROFILE_ID: u32 = 4394;
pub const UDI_TA_PROFILE_ID: u32 = 4395;
pub const AV_PROFILE_ID: u32 = 4396;
pub const SAP_PROFILE_ID: u32 = 4397;
pub const PBAP_PCE_PROFILE_ID: u32 = 4398;
pub const PBAP_PSE_PROFILE_ID: u32 = 4399;
pub const PBAP_PROFILE_ID: u32 = 4400;
pub const MAP_PROFILE_ID: u32 = 4404;
pub const PNP_INFO_PROFILE_ID: u32 = 4608;
pub const GENERIC_NETWORKING_PROFILE_ID: u32 = 4609;
pub const GENERIC_FILETRANS_PROFILE_ID: u32 = 4610;
pub const GENERIC_AUDIO_PROFILE_ID: u32 = 4611;
pub const GENERIC_TELEPHONY_PROFILE_ID: u32 = 4612;
pub const UPNP_PROFILE_ID: u32 = 4613;
pub const UPNP_IP_PROFILE_ID: u32 = 4614;
pub const UPNP_PAN_PROFILE_ID: u32 = 4864;
pub const UPNP_LAP_PROFILE_ID: u32 = 4865;
pub const UPNP_L2CAP_PROFILE_ID: u32 = 4866;
pub const VIDEO_SOURCE_PROFILE_ID: u32 = 4867;
pub const VIDEO_SINK_PROFILE_ID: u32 = 4868;
pub const VIDEO_DISTRIBUTION_PROFILE_ID: u32 = 4869;
pub const HDP_PROFILE_ID: u32 = 5120;
pub const HDP_SOURCE_PROFILE_ID: u32 = 5121;
pub const HDP_SINK_PROFILE_ID: u32 = 5122;
pub const GENERIC_ACCESS_PROFILE_ID: u32 = 6144;
pub const GENERIC_ATTRIB_PROFILE_ID: u32 = 6145;
pub const APPLE_AGENT_PROFILE_ID: u32 = 8466;
pub const MPS_PROFILE_ID: u32 = 4410;
pub const MDP_SVCLASS_ID: u32 = 5120;
pub const MDP_SOURCE_SVCLASS_ID: u32 = 5121;
pub const MDP_SINK_SVCLASS_ID: u32 = 5122;
pub const MDP_PROFILE_ID: u32 = 5120;
pub const MDP_SOURCE_PROFILE_ID: u32 = 5121;
pub const MDP_SINK_PROFILE_ID: u32 = 5122;
pub const SDP_SERVER_RECORD_HANDLE: u32 = 0;
pub const SDP_ATTR_RECORD_HANDLE: u32 = 0;
pub const SDP_ATTR_SVCLASS_ID_LIST: u32 = 1;
pub const SDP_ATTR_RECORD_STATE: u32 = 2;
pub const SDP_ATTR_SERVICE_ID: u32 = 3;
pub const SDP_ATTR_PROTO_DESC_LIST: u32 = 4;
pub const SDP_ATTR_BROWSE_GRP_LIST: u32 = 5;
pub const SDP_ATTR_LANG_BASE_ATTR_ID_LIST: u32 = 6;
pub const SDP_ATTR_SVCINFO_TTL: u32 = 7;
pub const SDP_ATTR_SERVICE_AVAILABILITY: u32 = 8;
pub const SDP_ATTR_PFILE_DESC_LIST: u32 = 9;
pub const SDP_ATTR_DOC_URL: u32 = 10;
pub const SDP_ATTR_CLNT_EXEC_URL: u32 = 11;
pub const SDP_ATTR_ICON_URL: u32 = 12;
pub const SDP_ATTR_ADD_PROTO_DESC_LIST: u32 = 13;
pub const SDP_ATTR_GROUP_ID: u32 = 512;
pub const SDP_ATTR_IP_SUBNET: u32 = 512;
pub const SDP_ATTR_VERSION_NUM_LIST: u32 = 512;
pub const SDP_ATTR_SUPPORTED_FEATURES_LIST: u32 = 512;
pub const SDP_ATTR_GOEP_L2CAP_PSM: u32 = 512;
pub const SDP_ATTR_SVCDB_STATE: u32 = 513;
pub const SDP_ATTR_MPSD_SCENARIOS: u32 = 512;
pub const SDP_ATTR_MPMD_SCENARIOS: u32 = 513;
pub const SDP_ATTR_MPS_DEPENDENCIES: u32 = 514;
pub const SDP_ATTR_SERVICE_VERSION: u32 = 768;
pub const SDP_ATTR_EXTERNAL_NETWORK: u32 = 769;
pub const SDP_ATTR_SUPPORTED_DATA_STORES_LIST: u32 = 769;
pub const SDP_ATTR_DATA_EXCHANGE_SPEC: u32 = 769;
pub const SDP_ATTR_NETWORK: u32 = 769;
pub const SDP_ATTR_FAX_CLASS1_SUPPORT: u32 = 770;
pub const SDP_ATTR_REMOTE_AUDIO_VOLUME_CONTROL: u32 = 770;
pub const SDP_ATTR_MCAP_SUPPORTED_PROCEDURES: u32 = 770;
pub const SDP_ATTR_FAX_CLASS20_SUPPORT: u32 = 771;
pub const SDP_ATTR_SUPPORTED_FORMATS_LIST: u32 = 771;
pub const SDP_ATTR_FAX_CLASS2_SUPPORT: u32 = 772;
pub const SDP_ATTR_AUDIO_FEEDBACK_SUPPORT: u32 = 773;
pub const SDP_ATTR_NETWORK_ADDRESS: u32 = 774;
pub const SDP_ATTR_WAP_GATEWAY: u32 = 775;
pub const SDP_ATTR_HOMEPAGE_URL: u32 = 776;
pub const SDP_ATTR_WAP_STACK_TYPE: u32 = 777;
pub const SDP_ATTR_SECURITY_DESC: u32 = 778;
pub const SDP_ATTR_NET_ACCESS_TYPE: u32 = 779;
pub const SDP_ATTR_MAX_NET_ACCESSRATE: u32 = 780;
pub const SDP_ATTR_IP4_SUBNET: u32 = 781;
pub const SDP_ATTR_IP6_SUBNET: u32 = 782;
pub const SDP_ATTR_SUPPORTED_CAPABILITIES: u32 = 784;
pub const SDP_ATTR_SUPPORTED_FEATURES: u32 = 785;
pub const SDP_ATTR_SUPPORTED_FUNCTIONS: u32 = 786;
pub const SDP_ATTR_TOTAL_IMAGING_DATA_CAPACITY: u32 = 787;
pub const SDP_ATTR_SUPPORTED_REPOSITORIES: u32 = 788;
pub const SDP_ATTR_MAS_INSTANCE_ID: u32 = 789;
pub const SDP_ATTR_SUPPORTED_MESSAGE_TYPES: u32 = 790;
pub const SDP_ATTR_PBAP_SUPPORTED_FEATURES: u32 = 791;
pub const SDP_ATTR_MAP_SUPPORTED_FEATURES: u32 = 791;
pub const SDP_ATTR_SPECIFICATION_ID: u32 = 512;
pub const SDP_ATTR_VENDOR_ID: u32 = 513;
pub const SDP_ATTR_PRODUCT_ID: u32 = 514;
pub const SDP_ATTR_VERSION: u32 = 515;
pub const SDP_ATTR_PRIMARY_RECORD: u32 = 516;
pub const SDP_ATTR_VENDOR_ID_SOURCE: u32 = 517;
pub const SDP_ATTR_HID_DEVICE_RELEASE_NUMBER: u32 = 512;
pub const SDP_ATTR_HID_PARSER_VERSION: u32 = 513;
pub const SDP_ATTR_HID_DEVICE_SUBCLASS: u32 = 514;
pub const SDP_ATTR_HID_COUNTRY_CODE: u32 = 515;
pub const SDP_ATTR_HID_VIRTUAL_CABLE: u32 = 516;
pub const SDP_ATTR_HID_RECONNECT_INITIATE: u32 = 517;
pub const SDP_ATTR_HID_DESCRIPTOR_LIST: u32 = 518;
pub const SDP_ATTR_HID_LANG_ID_BASE_LIST: u32 = 519;
pub const SDP_ATTR_HID_SDP_DISABLE: u32 = 520;
pub const SDP_ATTR_HID_BATTERY_POWER: u32 = 521;
pub const SDP_ATTR_HID_REMOTE_WAKEUP: u32 = 522;
pub const SDP_ATTR_HID_PROFILE_VERSION: u32 = 523;
pub const SDP_ATTR_HID_SUPERVISION_TIMEOUT: u32 = 524;
pub const SDP_ATTR_HID_NORMALLY_CONNECTABLE: u32 = 525;
pub const SDP_ATTR_HID_BOOT_DEVICE: u32 = 526;
pub const SDP_PRIMARY_LANG_BASE: u32 = 256;
pub const SDP_ATTR_SVCNAME_PRIMARY: u32 = 256;
pub const SDP_ATTR_SVCDESC_PRIMARY: u32 = 257;
pub const SDP_ATTR_PROVNAME_PRIMARY: u32 = 258;
pub const SDP_DATA_NIL: u32 = 0;
pub const SDP_UINT8: u32 = 8;
pub const SDP_UINT16: u32 = 9;
pub const SDP_UINT32: u32 = 10;
pub const SDP_UINT64: u32 = 11;
pub const SDP_UINT128: u32 = 12;
pub const SDP_INT8: u32 = 16;
pub const SDP_INT16: u32 = 17;
pub const SDP_INT32: u32 = 18;
pub const SDP_INT64: u32 = 19;
pub const SDP_INT128: u32 = 20;
pub const SDP_UUID_UNSPEC: u32 = 24;
pub const SDP_UUID16: u32 = 25;
pub const SDP_UUID32: u32 = 26;
pub const SDP_UUID128: u32 = 28;
pub const SDP_TEXT_STR_UNSPEC: u32 = 32;
pub const SDP_TEXT_STR8: u32 = 37;
pub const SDP_TEXT_STR16: u32 = 38;
pub const SDP_TEXT_STR32: u32 = 39;
pub const SDP_BOOL: u32 = 40;
pub const SDP_SEQ_UNSPEC: u32 = 48;
pub const SDP_SEQ8: u32 = 53;
pub const SDP_SEQ16: u32 = 54;
pub const SDP_SEQ32: u32 = 55;
pub const SDP_ALT_UNSPEC: u32 = 56;
pub const SDP_ALT8: u32 = 61;
pub const SDP_ALT16: u32 = 62;
pub const SDP_ALT32: u32 = 63;
pub const SDP_URL_STR_UNSPEC: u32 = 64;
pub const SDP_URL_STR8: u32 = 69;
pub const SDP_URL_STR16: u32 = 70;
pub const SDP_URL_STR32: u32 = 71;
pub const SDP_ERROR_RSP: u32 = 1;
pub const SDP_SVC_SEARCH_REQ: u32 = 2;
pub const SDP_SVC_SEARCH_RSP: u32 = 3;
pub const SDP_SVC_ATTR_REQ: u32 = 4;
pub const SDP_SVC_ATTR_RSP: u32 = 5;
pub const SDP_SVC_SEARCH_ATTR_REQ: u32 = 6;
pub const SDP_SVC_SEARCH_ATTR_RSP: u32 = 7;
pub const SDP_SVC_REGISTER_REQ: u32 = 117;
pub const SDP_SVC_REGISTER_RSP: u32 = 118;
pub const SDP_SVC_UPDATE_REQ: u32 = 119;
pub const SDP_SVC_UPDATE_RSP: u32 = 120;
pub const SDP_SVC_REMOVE_REQ: u32 = 121;
pub const SDP_SVC_REMOVE_RSP: u32 = 128;
pub const SDP_INVALID_VERSION: u32 = 1;
pub const SDP_INVALID_RECORD_HANDLE: u32 = 2;
pub const SDP_INVALID_SYNTAX: u32 = 3;
pub const SDP_INVALID_PDU_SIZE: u32 = 4;
pub const SDP_INVALID_CSTATE: u32 = 5;
pub const HCI_MAX_DEV: u32 = 16;
pub const HCI_MAX_ACL_SIZE: u32 = 1496;
pub const HCI_MAX_SCO_SIZE: u32 = 255;
pub const HCI_MAX_EVENT_SIZE: u32 = 260;
pub const HCI_MAX_FRAME_SIZE: u32 = 1500;
pub const HCI_DEV_REG: u32 = 1;
pub const HCI_DEV_UNREG: u32 = 2;
pub const HCI_DEV_UP: u32 = 3;
pub const HCI_DEV_DOWN: u32 = 4;
pub const HCI_DEV_SUSPEND: u32 = 5;
pub const HCI_DEV_RESUME: u32 = 6;
pub const HCI_VIRTUAL: u32 = 0;
pub const HCI_USB: u32 = 1;
pub const HCI_PCCARD: u32 = 2;
pub const HCI_UART: u32 = 3;
pub const HCI_RS232: u32 = 4;
pub const HCI_PCI: u32 = 5;
pub const HCI_SDIO: u32 = 6;
pub const HCI_SPI: u32 = 7;
pub const HCI_I2C: u32 = 8;
pub const HCI_SMD: u32 = 9;
pub const HCI_PRIMARY: u32 = 0;
pub const HCI_AMP: u32 = 1;
pub const HCI_BREDR: u32 = 0;
pub const HCI_COMMAND_PKT: u32 = 1;
pub const HCI_ACLDATA_PKT: u32 = 2;
pub const HCI_SCODATA_PKT: u32 = 3;
pub const HCI_EVENT_PKT: u32 = 4;
pub const HCI_VENDOR_PKT: u32 = 255;
pub const HCI_2DH1: u32 = 2;
pub const HCI_3DH1: u32 = 4;
pub const HCI_DM1: u32 = 8;
pub const HCI_DH1: u32 = 16;
pub const HCI_2DH3: u32 = 256;
pub const HCI_3DH3: u32 = 512;
pub const HCI_DM3: u32 = 1024;
pub const HCI_DH3: u32 = 2048;
pub const HCI_2DH5: u32 = 4096;
pub const HCI_3DH5: u32 = 8192;
pub const HCI_DM5: u32 = 16384;
pub const HCI_DH5: u32 = 32768;
pub const HCI_HV1: u32 = 32;
pub const HCI_HV2: u32 = 64;
pub const HCI_HV3: u32 = 128;
pub const HCI_EV3: u32 = 8;
pub const HCI_EV4: u32 = 16;
pub const HCI_EV5: u32 = 32;
pub const HCI_2EV3: u32 = 64;
pub const HCI_3EV3: u32 = 128;
pub const HCI_2EV5: u32 = 256;
pub const HCI_3EV5: u32 = 512;
pub const SCO_PTYPE_MASK: u32 = 224;
pub const ACL_PTYPE_MASK: u32 = 52248;
pub const HCI_UNKNOWN_COMMAND: u32 = 1;
pub const HCI_NO_CONNECTION: u32 = 2;
pub const HCI_HARDWARE_FAILURE: u32 = 3;
pub const HCI_PAGE_TIMEOUT: u32 = 4;
pub const HCI_AUTHENTICATION_FAILURE: u32 = 5;
pub const HCI_PIN_OR_KEY_MISSING: u32 = 6;
pub const HCI_MEMORY_FULL: u32 = 7;
pub const HCI_CONNECTION_TIMEOUT: u32 = 8;
pub const HCI_MAX_NUMBER_OF_CONNECTIONS: u32 = 9;
pub const HCI_MAX_NUMBER_OF_SCO_CONNECTIONS: u32 = 10;
pub const HCI_ACL_CONNECTION_EXISTS: u32 = 11;
pub const HCI_COMMAND_DISALLOWED: u32 = 12;
pub const HCI_REJECTED_LIMITED_RESOURCES: u32 = 13;
pub const HCI_REJECTED_SECURITY: u32 = 14;
pub const HCI_REJECTED_PERSONAL: u32 = 15;
pub const HCI_HOST_TIMEOUT: u32 = 16;
pub const HCI_UNSUPPORTED_FEATURE: u32 = 17;
pub const HCI_INVALID_PARAMETERS: u32 = 18;
pub const HCI_OE_USER_ENDED_CONNECTION: u32 = 19;
pub const HCI_OE_LOW_RESOURCES: u32 = 20;
pub const HCI_OE_POWER_OFF: u32 = 21;
pub const HCI_CONNECTION_TERMINATED: u32 = 22;
pub const HCI_REPEATED_ATTEMPTS: u32 = 23;
pub const HCI_PAIRING_NOT_ALLOWED: u32 = 24;
pub const HCI_UNKNOWN_LMP_PDU: u32 = 25;
pub const HCI_UNSUPPORTED_REMOTE_FEATURE: u32 = 26;
pub const HCI_SCO_OFFSET_REJECTED: u32 = 27;
pub const HCI_SCO_INTERVAL_REJECTED: u32 = 28;
pub const HCI_AIR_MODE_REJECTED: u32 = 29;
pub const HCI_INVALID_LMP_PARAMETERS: u32 = 30;
pub const HCI_UNSPECIFIED_ERROR: u32 = 31;
pub const HCI_UNSUPPORTED_LMP_PARAMETER_VALUE: u32 = 32;
pub const HCI_ROLE_CHANGE_NOT_ALLOWED: u32 = 33;
pub const HCI_LMP_RESPONSE_TIMEOUT: u32 = 34;
pub const HCI_LMP_ERROR_TRANSACTION_COLLISION: u32 = 35;
pub const HCI_LMP_PDU_NOT_ALLOWED: u32 = 36;
pub const HCI_ENCRYPTION_MODE_NOT_ACCEPTED: u32 = 37;
pub const HCI_UNIT_LINK_KEY_USED: u32 = 38;
pub const HCI_QOS_NOT_SUPPORTED: u32 = 39;
pub const HCI_INSTANT_PASSED: u32 = 40;
pub const HCI_PAIRING_NOT_SUPPORTED: u32 = 41;
pub const HCI_TRANSACTION_COLLISION: u32 = 42;
pub const HCI_QOS_UNACCEPTABLE_PARAMETER: u32 = 44;
pub const HCI_QOS_REJECTED: u32 = 45;
pub const HCI_CLASSIFICATION_NOT_SUPPORTED: u32 = 46;
pub const HCI_INSUFFICIENT_SECURITY: u32 = 47;
pub const HCI_PARAMETER_OUT_OF_RANGE: u32 = 48;
pub const HCI_ROLE_SWITCH_PENDING: u32 = 50;
pub const HCI_SLOT_VIOLATION: u32 = 52;
pub const HCI_ROLE_SWITCH_FAILED: u32 = 53;
pub const HCI_EIR_TOO_LARGE: u32 = 54;
pub const HCI_SIMPLE_PAIRING_NOT_SUPPORTED: u32 = 55;
pub const HCI_HOST_BUSY_PAIRING: u32 = 56;
pub const ACL_START_NO_FLUSH: u32 = 0;
pub const ACL_CONT: u32 = 1;
pub const ACL_START: u32 = 2;
pub const ACL_ACTIVE_BCAST: u32 = 4;
pub const ACL_PICO_BCAST: u32 = 8;
pub const SCO_LINK: u32 = 0;
pub const ACL_LINK: u32 = 1;
pub const ESCO_LINK: u32 = 2;
pub const LMP_3SLOT: u32 = 1;
pub const LMP_5SLOT: u32 = 2;
pub const LMP_ENCRYPT: u32 = 4;
pub const LMP_SOFFSET: u32 = 8;
pub const LMP_TACCURACY: u32 = 16;
pub const LMP_RSWITCH: u32 = 32;
pub const LMP_HOLD: u32 = 64;
pub const LMP_SNIFF: u32 = 128;
pub const LMP_PARK: u32 = 1;
pub const LMP_RSSI: u32 = 2;
pub const LMP_QUALITY: u32 = 4;
pub const LMP_SCO: u32 = 8;
pub const LMP_HV2: u32 = 16;
pub const LMP_HV3: u32 = 32;
pub const LMP_ULAW: u32 = 64;
pub const LMP_ALAW: u32 = 128;
pub const LMP_CVSD: u32 = 1;
pub const LMP_PSCHEME: u32 = 2;
pub const LMP_PCONTROL: u32 = 4;
pub const LMP_TRSP_SCO: u32 = 8;
pub const LMP_BCAST_ENC: u32 = 128;
pub const LMP_EDR_ACL_2M: u32 = 2;
pub const LMP_EDR_ACL_3M: u32 = 4;
pub const LMP_ENH_ISCAN: u32 = 8;
pub const LMP_ILACE_ISCAN: u32 = 16;
pub const LMP_ILACE_PSCAN: u32 = 32;
pub const LMP_RSSI_INQ: u32 = 64;
pub const LMP_ESCO: u32 = 128;
pub const LMP_EV4: u32 = 1;
pub const LMP_EV5: u32 = 2;
pub const LMP_AFH_CAP_SLV: u32 = 8;
pub const LMP_AFH_CLS_SLV: u32 = 16;
pub const LMP_NO_BREDR: u32 = 32;
pub const LMP_LE: u32 = 64;
pub const LMP_EDR_3SLOT: u32 = 128;
pub const LMP_EDR_5SLOT: u32 = 1;
pub const LMP_SNIFF_SUBR: u32 = 2;
pub const LMP_PAUSE_ENC: u32 = 4;
pub const LMP_AFH_CAP_MST: u32 = 8;
pub const LMP_AFH_CLS_MST: u32 = 16;
pub const LMP_EDR_ESCO_2M: u32 = 32;
pub const LMP_EDR_ESCO_3M: u32 = 64;
pub const LMP_EDR_3S_ESCO: u32 = 128;
pub const LMP_EXT_INQ: u32 = 1;
pub const LMP_LE_BREDR: u32 = 2;
pub const LMP_SIMPLE_PAIR: u32 = 8;
pub const LMP_ENCAPS_PDU: u32 = 16;
pub const LMP_ERR_DAT_REP: u32 = 32;
pub const LMP_NFLUSH_PKTS: u32 = 64;
pub const LMP_LSTO: u32 = 1;
pub const LMP_INQ_TX_PWR: u32 = 2;
pub const LMP_EPC: u32 = 4;
pub const LMP_EXT_FEAT: u32 = 128;
pub const LMP_HOST_SSP: u32 = 1;
pub const LMP_HOST_LE: u32 = 2;
pub const LMP_HOST_LE_BREDR: u32 = 4;
pub const HCI_LP_RSWITCH: u32 = 1;
pub const HCI_LP_HOLD: u32 = 2;
pub const HCI_LP_SNIFF: u32 = 4;
pub const HCI_LP_PARK: u32 = 8;
pub const HCI_LM_ACCEPT: u32 = 32768;
pub const HCI_LM_MASTER: u32 = 1;
pub const HCI_LM_AUTH: u32 = 2;
pub const HCI_LM_ENCRYPT: u32 = 4;
pub const HCI_LM_TRUSTED: u32 = 8;
pub const HCI_LM_RELIABLE: u32 = 16;
pub const HCI_LM_SECURE: u32 = 32;
pub const HCI_LK_COMBINATION: u32 = 0;
pub const HCI_LK_LOCAL_UNIT: u32 = 1;
pub const HCI_LK_REMOTE_UNIT: u32 = 2;
pub const HCI_LK_DEBUG_COMBINATION: u32 = 3;
pub const HCI_LK_UNAUTH_COMBINATION: u32 = 4;
pub const HCI_LK_AUTH_COMBINATION: u32 = 5;
pub const HCI_LK_CHANGED_COMBINATION: u32 = 6;
pub const HCI_LK_INVALID: u32 = 255;
pub const OGF_LINK_CTL: u32 = 1;
pub const OCF_INQUIRY: u32 = 1;
pub const INQUIRY_CP_SIZE: u32 = 5;
pub const STATUS_BDADDR_RP_SIZE: u32 = 7;
pub const OCF_INQUIRY_CANCEL: u32 = 2;
pub const OCF_PERIODIC_INQUIRY: u32 = 3;
pub const PERIODIC_INQUIRY_CP_SIZE: u32 = 9;
pub const OCF_EXIT_PERIODIC_INQUIRY: u32 = 4;
pub const OCF_CREATE_CONN: u32 = 5;
pub const CREATE_CONN_CP_SIZE: u32 = 13;
pub const OCF_DISCONNECT: u32 = 6;
pub const DISCONNECT_CP_SIZE: u32 = 3;
pub const OCF_ADD_SCO: u32 = 7;
pub const ADD_SCO_CP_SIZE: u32 = 4;
pub const OCF_CREATE_CONN_CANCEL: u32 = 8;
pub const CREATE_CONN_CANCEL_CP_SIZE: u32 = 6;
pub const OCF_ACCEPT_CONN_REQ: u32 = 9;
pub const ACCEPT_CONN_REQ_CP_SIZE: u32 = 7;
pub const OCF_REJECT_CONN_REQ: u32 = 10;
pub const REJECT_CONN_REQ_CP_SIZE: u32 = 7;
pub const OCF_LINK_KEY_REPLY: u32 = 11;
pub const LINK_KEY_REPLY_CP_SIZE: u32 = 22;
pub const OCF_LINK_KEY_NEG_REPLY: u32 = 12;
pub const OCF_PIN_CODE_REPLY: u32 = 13;
pub const PIN_CODE_REPLY_CP_SIZE: u32 = 23;
pub const OCF_PIN_CODE_NEG_REPLY: u32 = 14;
pub const OCF_SET_CONN_PTYPE: u32 = 15;
pub const SET_CONN_PTYPE_CP_SIZE: u32 = 4;
pub const OCF_AUTH_REQUESTED: u32 = 17;
pub const AUTH_REQUESTED_CP_SIZE: u32 = 2;
pub const OCF_SET_CONN_ENCRYPT: u32 = 19;
pub const SET_CONN_ENCRYPT_CP_SIZE: u32 = 3;
pub const OCF_CHANGE_CONN_LINK_KEY: u32 = 21;
pub const CHANGE_CONN_LINK_KEY_CP_SIZE: u32 = 2;
pub const OCF_MASTER_LINK_KEY: u32 = 23;
pub const MASTER_LINK_KEY_CP_SIZE: u32 = 1;
pub const OCF_REMOTE_NAME_REQ: u32 = 25;
pub const REMOTE_NAME_REQ_CP_SIZE: u32 = 10;
pub const OCF_REMOTE_NAME_REQ_CANCEL: u32 = 26;
pub const REMOTE_NAME_REQ_CANCEL_CP_SIZE: u32 = 6;
pub const OCF_READ_REMOTE_FEATURES: u32 = 27;
pub const READ_REMOTE_FEATURES_CP_SIZE: u32 = 2;
pub const OCF_READ_REMOTE_EXT_FEATURES: u32 = 28;
pub const READ_REMOTE_EXT_FEATURES_CP_SIZE: u32 = 3;
pub const OCF_READ_REMOTE_VERSION: u32 = 29;
pub const READ_REMOTE_VERSION_CP_SIZE: u32 = 2;
pub const OCF_READ_CLOCK_OFFSET: u32 = 31;
pub const READ_CLOCK_OFFSET_CP_SIZE: u32 = 2;
pub const OCF_READ_LMP_HANDLE: u32 = 32;
pub const OCF_SETUP_SYNC_CONN: u32 = 40;
pub const SETUP_SYNC_CONN_CP_SIZE: u32 = 17;
pub const OCF_ACCEPT_SYNC_CONN_REQ: u32 = 41;
pub const ACCEPT_SYNC_CONN_REQ_CP_SIZE: u32 = 21;
pub const OCF_REJECT_SYNC_CONN_REQ: u32 = 42;
pub const REJECT_SYNC_CONN_REQ_CP_SIZE: u32 = 7;
pub const OCF_IO_CAPABILITY_REPLY: u32 = 43;
pub const IO_CAPABILITY_REPLY_CP_SIZE: u32 = 9;
pub const OCF_USER_CONFIRM_REPLY: u32 = 44;
pub const USER_CONFIRM_REPLY_CP_SIZE: u32 = 6;
pub const OCF_USER_CONFIRM_NEG_REPLY: u32 = 45;
pub const OCF_USER_PASSKEY_REPLY: u32 = 46;
pub const USER_PASSKEY_REPLY_CP_SIZE: u32 = 10;
pub const OCF_USER_PASSKEY_NEG_REPLY: u32 = 47;
pub const OCF_REMOTE_OOB_DATA_REPLY: u32 = 48;
pub const REMOTE_OOB_DATA_REPLY_CP_SIZE: u32 = 38;
pub const OCF_REMOTE_OOB_DATA_NEG_REPLY: u32 = 51;
pub const OCF_IO_CAPABILITY_NEG_REPLY: u32 = 52;
pub const IO_CAPABILITY_NEG_REPLY_CP_SIZE: u32 = 7;
pub const OCF_CREATE_PHYSICAL_LINK: u32 = 53;
pub const CREATE_PHYSICAL_LINK_CP_SIZE: u32 = 35;
pub const OCF_ACCEPT_PHYSICAL_LINK: u32 = 54;
pub const ACCEPT_PHYSICAL_LINK_CP_SIZE: u32 = 35;
pub const OCF_DISCONNECT_PHYSICAL_LINK: u32 = 55;
pub const DISCONNECT_PHYSICAL_LINK_CP_SIZE: u32 = 2;
pub const OCF_CREATE_LOGICAL_LINK: u32 = 56;
pub const CREATE_LOGICAL_LINK_CP_SIZE: u32 = 33;
pub const OCF_ACCEPT_LOGICAL_LINK: u32 = 57;
pub const OCF_DISCONNECT_LOGICAL_LINK: u32 = 58;
pub const DISCONNECT_LOGICAL_LINK_CP_SIZE: u32 = 2;
pub const OCF_LOGICAL_LINK_CANCEL: u32 = 59;
pub const LOGICAL_LINK_CANCEL_CP_SIZE: u32 = 2;
pub const LOGICAL_LINK_CANCEL_RP_SIZE: u32 = 3;
pub const OCF_FLOW_SPEC_MODIFY: u32 = 60;
pub const OGF_LINK_POLICY: u32 = 2;
pub const OCF_HOLD_MODE: u32 = 1;
pub const HOLD_MODE_CP_SIZE: u32 = 6;
pub const OCF_SNIFF_MODE: u32 = 3;
pub const SNIFF_MODE_CP_SIZE: u32 = 10;
pub const OCF_EXIT_SNIFF_MODE: u32 = 4;
pub const EXIT_SNIFF_MODE_CP_SIZE: u32 = 2;
pub const OCF_PARK_MODE: u32 = 5;
pub const PARK_MODE_CP_SIZE: u32 = 6;
pub const OCF_EXIT_PARK_MODE: u32 = 6;
pub const EXIT_PARK_MODE_CP_SIZE: u32 = 2;
pub const OCF_QOS_SETUP: u32 = 7;
pub const HCI_QOS_CP_SIZE: u32 = 17;
pub const QOS_SETUP_CP_SIZE: u32 = 20;
pub const OCF_ROLE_DISCOVERY: u32 = 9;
pub const ROLE_DISCOVERY_CP_SIZE: u32 = 2;
pub const ROLE_DISCOVERY_RP_SIZE: u32 = 4;
pub const OCF_SWITCH_ROLE: u32 = 11;
pub const SWITCH_ROLE_CP_SIZE: u32 = 7;
pub const OCF_READ_LINK_POLICY: u32 = 12;
pub const READ_LINK_POLICY_CP_SIZE: u32 = 2;
pub const READ_LINK_POLICY_RP_SIZE: u32 = 5;
pub const OCF_WRITE_LINK_POLICY: u32 = 13;
pub const WRITE_LINK_POLICY_CP_SIZE: u32 = 4;
pub const WRITE_LINK_POLICY_RP_SIZE: u32 = 3;
pub const OCF_READ_DEFAULT_LINK_POLICY: u32 = 14;
pub const OCF_WRITE_DEFAULT_LINK_POLICY: u32 = 15;
pub const OCF_FLOW_SPECIFICATION: u32 = 16;
pub const OCF_SNIFF_SUBRATING: u32 = 17;
pub const SNIFF_SUBRATING_CP_SIZE: u32 = 8;
pub const OGF_HOST_CTL: u32 = 3;
pub const OCF_SET_EVENT_MASK: u32 = 1;
pub const SET_EVENT_MASK_CP_SIZE: u32 = 8;
pub const OCF_RESET: u32 = 3;
pub const OCF_SET_EVENT_FLT: u32 = 5;
pub const SET_EVENT_FLT_CP_SIZE: u32 = 2;
pub const FLT_CLEAR_ALL: u32 = 0;
pub const FLT_INQ_RESULT: u32 = 1;
pub const FLT_CONN_SETUP: u32 = 2;
pub const INQ_RESULT_RETURN_ALL: u32 = 0;
pub const INQ_RESULT_RETURN_CLASS: u32 = 1;
pub const INQ_RESULT_RETURN_BDADDR: u32 = 2;
pub const CONN_SETUP_ALLOW_ALL: u32 = 0;
pub const CONN_SETUP_ALLOW_CLASS: u32 = 1;
pub const CONN_SETUP_ALLOW_BDADDR: u32 = 2;
pub const CONN_SETUP_AUTO_OFF: u32 = 1;
pub const CONN_SETUP_AUTO_ON: u32 = 2;
pub const OCF_FLUSH: u32 = 8;
pub const OCF_READ_PIN_TYPE: u32 = 9;
pub const READ_PIN_TYPE_RP_SIZE: u32 = 2;
pub const OCF_WRITE_PIN_TYPE: u32 = 10;
pub const WRITE_PIN_TYPE_CP_SIZE: u32 = 1;
pub const OCF_CREATE_NEW_UNIT_KEY: u32 = 11;
pub const OCF_READ_STORED_LINK_KEY: u32 = 13;
pub const READ_STORED_LINK_KEY_CP_SIZE: u32 = 7;
pub const READ_STORED_LINK_KEY_RP_SIZE: u32 = 5;
pub const OCF_WRITE_STORED_LINK_KEY: u32 = 17;
pub const WRITE_STORED_LINK_KEY_CP_SIZE: u32 = 1;
pub const READ_WRITE_LINK_KEY_RP_SIZE: u32 = 2;
pub const OCF_DELETE_STORED_LINK_KEY: u32 = 18;
pub const DELETE_STORED_LINK_KEY_CP_SIZE: u32 = 7;
pub const DELETE_STORED_LINK_KEY_RP_SIZE: u32 = 3;
pub const HCI_MAX_NAME_LENGTH: u32 = 248;
pub const OCF_CHANGE_LOCAL_NAME: u32 = 19;
pub const CHANGE_LOCAL_NAME_CP_SIZE: u32 = 248;
pub const OCF_READ_LOCAL_NAME: u32 = 20;
pub const READ_LOCAL_NAME_RP_SIZE: u32 = 249;
pub const OCF_READ_CONN_ACCEPT_TIMEOUT: u32 = 21;
pub const READ_CONN_ACCEPT_TIMEOUT_RP_SIZE: u32 = 3;
pub const OCF_WRITE_CONN_ACCEPT_TIMEOUT: u32 = 22;
pub const WRITE_CONN_ACCEPT_TIMEOUT_CP_SIZE: u32 = 2;
pub const OCF_READ_PAGE_TIMEOUT: u32 = 23;
pub const READ_PAGE_TIMEOUT_RP_SIZE: u32 = 3;
pub const OCF_WRITE_PAGE_TIMEOUT: u32 = 24;
pub const WRITE_PAGE_TIMEOUT_CP_SIZE: u32 = 2;
pub const OCF_READ_SCAN_ENABLE: u32 = 25;
pub const READ_SCAN_ENABLE_RP_SIZE: u32 = 2;
pub const OCF_WRITE_SCAN_ENABLE: u32 = 26;
pub const SCAN_DISABLED: u32 = 0;
pub const SCAN_INQUIRY: u32 = 1;
pub const SCAN_PAGE: u32 = 2;
pub const OCF_READ_PAGE_ACTIVITY: u32 = 27;
pub const READ_PAGE_ACTIVITY_RP_SIZE: u32 = 5;
pub const OCF_WRITE_PAGE_ACTIVITY: u32 = 28;
pub const WRITE_PAGE_ACTIVITY_CP_SIZE: u32 = 4;
pub const OCF_READ_INQ_ACTIVITY: u32 = 29;
pub const READ_INQ_ACTIVITY_RP_SIZE: u32 = 5;
pub const OCF_WRITE_INQ_ACTIVITY: u32 = 30;
pub const WRITE_INQ_ACTIVITY_CP_SIZE: u32 = 4;
pub const OCF_READ_AUTH_ENABLE: u32 = 31;
pub const OCF_WRITE_AUTH_ENABLE: u32 = 32;
pub const AUTH_DISABLED: u32 = 0;
pub const AUTH_ENABLED: u32 = 1;
pub const OCF_READ_ENCRYPT_MODE: u32 = 33;
pub const OCF_WRITE_ENCRYPT_MODE: u32 = 34;
pub const ENCRYPT_DISABLED: u32 = 0;
pub const ENCRYPT_P2P: u32 = 1;
pub const ENCRYPT_BOTH: u32 = 2;
pub const OCF_READ_CLASS_OF_DEV: u32 = 35;
pub const READ_CLASS_OF_DEV_RP_SIZE: u32 = 4;
pub const OCF_WRITE_CLASS_OF_DEV: u32 = 36;
pub const WRITE_CLASS_OF_DEV_CP_SIZE: u32 = 3;
pub const OCF_READ_VOICE_SETTING: u32 = 37;
pub const READ_VOICE_SETTING_RP_SIZE: u32 = 3;
pub const OCF_WRITE_VOICE_SETTING: u32 = 38;
pub const WRITE_VOICE_SETTING_CP_SIZE: u32 = 2;
pub const OCF_READ_AUTOMATIC_FLUSH_TIMEOUT: u32 = 39;
pub const OCF_WRITE_AUTOMATIC_FLUSH_TIMEOUT: u32 = 40;
pub const OCF_READ_NUM_BROADCAST_RETRANS: u32 = 41;
pub const OCF_WRITE_NUM_BROADCAST_RETRANS: u32 = 42;
pub const OCF_READ_HOLD_MODE_ACTIVITY: u32 = 43;
pub const OCF_WRITE_HOLD_MODE_ACTIVITY: u32 = 44;
pub const OCF_READ_TRANSMIT_POWER_LEVEL: u32 = 45;
pub const READ_TRANSMIT_POWER_LEVEL_CP_SIZE: u32 = 3;
pub const READ_TRANSMIT_POWER_LEVEL_RP_SIZE: u32 = 4;
pub const OCF_READ_SYNC_FLOW_ENABLE: u32 = 46;
pub const OCF_WRITE_SYNC_FLOW_ENABLE: u32 = 47;
pub const OCF_SET_CONTROLLER_TO_HOST_FC: u32 = 49;
pub const OCF_HOST_BUFFER_SIZE: u32 = 51;
pub const HOST_BUFFER_SIZE_CP_SIZE: u32 = 7;
pub const OCF_HOST_NUM_COMP_PKTS: u32 = 53;
pub const HOST_NUM_COMP_PKTS_CP_SIZE: u32 = 1;
pub const OCF_READ_LINK_SUPERVISION_TIMEOUT: u32 = 54;
pub const READ_LINK_SUPERVISION_TIMEOUT_RP_SIZE: u32 = 5;
pub const OCF_WRITE_LINK_SUPERVISION_TIMEOUT: u32 = 55;
pub const WRITE_LINK_SUPERVISION_TIMEOUT_CP_SIZE: u32 = 4;
pub const WRITE_LINK_SUPERVISION_TIMEOUT_RP_SIZE: u32 = 3;
pub const OCF_READ_NUM_SUPPORTED_IAC: u32 = 56;
pub const MAX_IAC_LAP: u32 = 64;
pub const OCF_READ_CURRENT_IAC_LAP: u32 = 57;
pub const READ_CURRENT_IAC_LAP_RP_SIZE: u32 = 194;
pub const OCF_WRITE_CURRENT_IAC_LAP: u32 = 58;
pub const WRITE_CURRENT_IAC_LAP_CP_SIZE: u32 = 193;
pub const OCF_READ_PAGE_SCAN_PERIOD_MODE: u32 = 59;
pub const OCF_WRITE_PAGE_SCAN_PERIOD_MODE: u32 = 60;
pub const OCF_READ_PAGE_SCAN_MODE: u32 = 61;
pub const OCF_WRITE_PAGE_SCAN_MODE: u32 = 62;
pub const OCF_SET_AFH_CLASSIFICATION: u32 = 63;
pub const SET_AFH_CLASSIFICATION_CP_SIZE: u32 = 10;
pub const SET_AFH_CLASSIFICATION_RP_SIZE: u32 = 1;
pub const OCF_READ_INQUIRY_SCAN_TYPE: u32 = 66;
pub const READ_INQUIRY_SCAN_TYPE_RP_SIZE: u32 = 2;
pub const OCF_WRITE_INQUIRY_SCAN_TYPE: u32 = 67;
pub const WRITE_INQUIRY_SCAN_TYPE_CP_SIZE: u32 = 1;
pub const WRITE_INQUIRY_SCAN_TYPE_RP_SIZE: u32 = 1;
pub const OCF_READ_INQUIRY_MODE: u32 = 68;
pub const READ_INQUIRY_MODE_RP_SIZE: u32 = 2;
pub const OCF_WRITE_INQUIRY_MODE: u32 = 69;
pub const WRITE_INQUIRY_MODE_CP_SIZE: u32 = 1;
pub const WRITE_INQUIRY_MODE_RP_SIZE: u32 = 1;
pub const OCF_READ_PAGE_SCAN_TYPE: u32 = 70;
pub const OCF_WRITE_PAGE_SCAN_TYPE: u32 = 71;
pub const PAGE_SCAN_TYPE_STANDARD: u32 = 0;
pub const PAGE_SCAN_TYPE_INTERLACED: u32 = 1;
pub const OCF_READ_AFH_MODE: u32 = 72;
pub const READ_AFH_MODE_RP_SIZE: u32 = 2;
pub const OCF_WRITE_AFH_MODE: u32 = 73;
pub const WRITE_AFH_MODE_CP_SIZE: u32 = 1;
pub const WRITE_AFH_MODE_RP_SIZE: u32 = 1;
pub const HCI_MAX_EIR_LENGTH: u32 = 240;
pub const OCF_READ_EXT_INQUIRY_RESPONSE: u32 = 81;
pub const READ_EXT_INQUIRY_RESPONSE_RP_SIZE: u32 = 242;
pub const OCF_WRITE_EXT_INQUIRY_RESPONSE: u32 = 82;
pub const WRITE_EXT_INQUIRY_RESPONSE_CP_SIZE: u32 = 241;
pub const WRITE_EXT_INQUIRY_RESPONSE_RP_SIZE: u32 = 1;
pub const OCF_REFRESH_ENCRYPTION_KEY: u32 = 83;
pub const REFRESH_ENCRYPTION_KEY_CP_SIZE: u32 = 2;
pub const REFRESH_ENCRYPTION_KEY_RP_SIZE: u32 = 1;
pub const OCF_READ_SIMPLE_PAIRING_MODE: u32 = 85;
pub const READ_SIMPLE_PAIRING_MODE_RP_SIZE: u32 = 2;
pub const OCF_WRITE_SIMPLE_PAIRING_MODE: u32 = 86;
pub const WRITE_SIMPLE_PAIRING_MODE_CP_SIZE: u32 = 1;
pub const WRITE_SIMPLE_PAIRING_MODE_RP_SIZE: u32 = 1;
pub const OCF_READ_LOCAL_OOB_DATA: u32 = 87;
pub const READ_LOCAL_OOB_DATA_RP_SIZE: u32 = 33;
pub const OCF_READ_INQ_RESPONSE_TX_POWER_LEVEL: u32 = 88;
pub const READ_INQ_RESPONSE_TX_POWER_LEVEL_RP_SIZE: u32 = 2;
pub const OCF_READ_INQUIRY_TRANSMIT_POWER_LEVEL: u32 = 88;
pub const READ_INQUIRY_TRANSMIT_POWER_LEVEL_RP_SIZE: u32 = 2;
pub const OCF_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL: u32 = 89;
pub const WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CP_SIZE: u32 = 1;
pub const WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_RP_SIZE: u32 = 1;
pub const OCF_READ_DEFAULT_ERROR_DATA_REPORTING: u32 = 90;
pub const READ_DEFAULT_ERROR_DATA_REPORTING_RP_SIZE: u32 = 2;
pub const OCF_WRITE_DEFAULT_ERROR_DATA_REPORTING: u32 = 91;
pub const WRITE_DEFAULT_ERROR_DATA_REPORTING_CP_SIZE: u32 = 1;
pub const WRITE_DEFAULT_ERROR_DATA_REPORTING_RP_SIZE: u32 = 1;
pub const OCF_ENHANCED_FLUSH: u32 = 95;
pub const ENHANCED_FLUSH_CP_SIZE: u32 = 3;
pub const OCF_SEND_KEYPRESS_NOTIFY: u32 = 96;
pub const SEND_KEYPRESS_NOTIFY_CP_SIZE: u32 = 7;
pub const SEND_KEYPRESS_NOTIFY_RP_SIZE: u32 = 1;
pub const OCF_READ_LOGICAL_LINK_ACCEPT_TIMEOUT: u32 = 97;
pub const READ_LOGICAL_LINK_ACCEPT_TIMEOUT_RP_SIZE: u32 = 3;
pub const OCF_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT: u32 = 98;
pub const WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT_CP_SIZE: u32 = 2;
pub const OCF_SET_EVENT_MASK_PAGE_2: u32 = 99;
pub const OCF_READ_LOCATION_DATA: u32 = 100;
pub const OCF_WRITE_LOCATION_DATA: u32 = 101;
pub const OCF_READ_FLOW_CONTROL_MODE: u32 = 102;
pub const OCF_WRITE_FLOW_CONTROL_MODE: u32 = 103;
pub const OCF_READ_ENHANCED_TRANSMIT_POWER_LEVEL: u32 = 104;
pub const READ_ENHANCED_TRANSMIT_POWER_LEVEL_RP_SIZE: u32 = 6;
pub const OCF_READ_BEST_EFFORT_FLUSH_TIMEOUT: u32 = 105;
pub const READ_BEST_EFFORT_FLUSH_TIMEOUT_RP_SIZE: u32 = 5;
pub const OCF_WRITE_BEST_EFFORT_FLUSH_TIMEOUT: u32 = 106;
pub const WRITE_BEST_EFFORT_FLUSH_TIMEOUT_CP_SIZE: u32 = 6;
pub const WRITE_BEST_EFFORT_FLUSH_TIMEOUT_RP_SIZE: u32 = 1;
pub const OCF_READ_LE_HOST_SUPPORTED: u32 = 108;
pub const READ_LE_HOST_SUPPORTED_RP_SIZE: u32 = 3;
pub const OCF_WRITE_LE_HOST_SUPPORTED: u32 = 109;
pub const WRITE_LE_HOST_SUPPORTED_CP_SIZE: u32 = 2;
pub const OGF_INFO_PARAM: u32 = 4;
pub const OCF_READ_LOCAL_VERSION: u32 = 1;
pub const READ_LOCAL_VERSION_RP_SIZE: u32 = 9;
pub const OCF_READ_LOCAL_COMMANDS: u32 = 2;
pub const READ_LOCAL_COMMANDS_RP_SIZE: u32 = 65;
pub const OCF_READ_LOCAL_FEATURES: u32 = 3;
pub const READ_LOCAL_FEATURES_RP_SIZE: u32 = 9;
pub const OCF_READ_LOCAL_EXT_FEATURES: u32 = 4;
pub const READ_LOCAL_EXT_FEATURES_CP_SIZE: u32 = 1;
pub const READ_LOCAL_EXT_FEATURES_RP_SIZE: u32 = 11;
pub const OCF_READ_BUFFER_SIZE: u32 = 5;
pub const READ_BUFFER_SIZE_RP_SIZE: u32 = 8;
pub const OCF_READ_COUNTRY_CODE: u32 = 7;
pub const OCF_READ_BD_ADDR: u32 = 9;
pub const READ_BD_ADDR_RP_SIZE: u32 = 7;
pub const OCF_READ_DATA_BLOCK_SIZE: u32 = 10;
pub const OGF_STATUS_PARAM: u32 = 5;
pub const OCF_READ_FAILED_CONTACT_COUNTER: u32 = 1;
pub const READ_FAILED_CONTACT_COUNTER_RP_SIZE: u32 = 4;
pub const OCF_RESET_FAILED_CONTACT_COUNTER: u32 = 2;
pub const RESET_FAILED_CONTACT_COUNTER_RP_SIZE: u32 = 3;
pub const OCF_READ_LINK_QUALITY: u32 = 3;
pub const READ_LINK_QUALITY_RP_SIZE: u32 = 4;
pub const OCF_READ_RSSI: u32 = 5;
pub const READ_RSSI_RP_SIZE: u32 = 4;
pub const OCF_READ_AFH_MAP: u32 = 6;
pub const READ_AFH_MAP_RP_SIZE: u32 = 14;
pub const OCF_READ_CLOCK: u32 = 7;
pub const READ_CLOCK_CP_SIZE: u32 = 3;
pub const READ_CLOCK_RP_SIZE: u32 = 9;
pub const OCF_READ_LOCAL_AMP_INFO: u32 = 9;
pub const READ_LOCAL_AMP_INFO_RP_SIZE: u32 = 31;
pub const OCF_READ_LOCAL_AMP_ASSOC: u32 = 10;
pub const READ_LOCAL_AMP_ASSOC_CP_SIZE: u32 = 5;
pub const READ_LOCAL_AMP_ASSOC_RP_SIZE: u32 = 252;
pub const OCF_WRITE_REMOTE_AMP_ASSOC: u32 = 11;
pub const WRITE_REMOTE_AMP_ASSOC_CP_SIZE: u32 = 253;
pub const WRITE_REMOTE_AMP_ASSOC_RP_SIZE: u32 = 2;
pub const OGF_TESTING_CMD: u32 = 62;
pub const OCF_READ_LOOPBACK_MODE: u32 = 1;
pub const OCF_WRITE_LOOPBACK_MODE: u32 = 2;
pub const OCF_ENABLE_DEVICE_UNDER_TEST_MODE: u32 = 3;
pub const OCF_WRITE_SIMPLE_PAIRING_DEBUG_MODE: u32 = 4;
pub const WRITE_SIMPLE_PAIRING_DEBUG_MODE_CP_SIZE: u32 = 1;
pub const WRITE_SIMPLE_PAIRING_DEBUG_MODE_RP_SIZE: u32 = 1;
pub const OGF_LE_CTL: u32 = 8;
pub const OCF_LE_SET_EVENT_MASK: u32 = 1;
pub const LE_SET_EVENT_MASK_CP_SIZE: u32 = 8;
pub const OCF_LE_READ_BUFFER_SIZE: u32 = 2;
pub const LE_READ_BUFFER_SIZE_RP_SIZE: u32 = 4;
pub const OCF_LE_READ_LOCAL_SUPPORTED_FEATURES: u32 = 3;
pub const LE_READ_LOCAL_SUPPORTED_FEATURES_RP_SIZE: u32 = 9;
pub const OCF_LE_SET_RANDOM_ADDRESS: u32 = 5;
pub const LE_SET_RANDOM_ADDRESS_CP_SIZE: u32 = 6;
pub const OCF_LE_SET_ADVERTISING_PARAMETERS: u32 = 6;
pub const LE_SET_ADVERTISING_PARAMETERS_CP_SIZE: u32 = 15;
pub const OCF_LE_READ_ADVERTISING_CHANNEL_TX_POWER: u32 = 7;
pub const LE_READ_ADVERTISING_CHANNEL_TX_POWER_RP_SIZE: u32 = 2;
pub const OCF_LE_SET_ADVERTISING_DATA: u32 = 8;
pub const LE_SET_ADVERTISING_DATA_CP_SIZE: u32 = 32;
pub const OCF_LE_SET_SCAN_RESPONSE_DATA: u32 = 9;
pub const LE_SET_SCAN_RESPONSE_DATA_CP_SIZE: u32 = 32;
pub const OCF_LE_SET_ADVERTISE_ENABLE: u32 = 10;
pub const LE_SET_ADVERTISE_ENABLE_CP_SIZE: u32 = 1;
pub const OCF_LE_SET_SCAN_PARAMETERS: u32 = 11;
pub const LE_SET_SCAN_PARAMETERS_CP_SIZE: u32 = 7;
pub const OCF_LE_SET_SCAN_ENABLE: u32 = 12;
pub const LE_SET_SCAN_ENABLE_CP_SIZE: u32 = 2;
pub const OCF_LE_CREATE_CONN: u32 = 13;
pub const LE_CREATE_CONN_CP_SIZE: u32 = 25;
pub const OCF_LE_CREATE_CONN_CANCEL: u32 = 14;
pub const OCF_LE_READ_WHITE_LIST_SIZE: u32 = 15;
pub const LE_READ_WHITE_LIST_SIZE_RP_SIZE: u32 = 2;
pub const OCF_LE_CLEAR_WHITE_LIST: u32 = 16;
pub const OCF_LE_ADD_DEVICE_TO_WHITE_LIST: u32 = 17;
pub const LE_ADD_DEVICE_TO_WHITE_LIST_CP_SIZE: u32 = 7;
pub const OCF_LE_REMOVE_DEVICE_FROM_WHITE_LIST: u32 = 18;
pub const LE_REMOVE_DEVICE_FROM_WHITE_LIST_CP_SIZE: u32 = 7;
pub const OCF_LE_CONN_UPDATE: u32 = 19;
pub const LE_CONN_UPDATE_CP_SIZE: u32 = 14;
pub const OCF_LE_SET_HOST_CHANNEL_CLASSIFICATION: u32 = 20;
pub const LE_SET_HOST_CHANNEL_CLASSIFICATION_CP_SIZE: u32 = 5;
pub const OCF_LE_READ_CHANNEL_MAP: u32 = 21;
pub const LE_READ_CHANNEL_MAP_CP_SIZE: u32 = 2;
pub const LE_READ_CHANNEL_MAP_RP_SIZE: u32 = 8;
pub const OCF_LE_READ_REMOTE_USED_FEATURES: u32 = 22;
pub const LE_READ_REMOTE_USED_FEATURES_CP_SIZE: u32 = 2;
pub const OCF_LE_ENCRYPT: u32 = 23;
pub const LE_ENCRYPT_CP_SIZE: u32 = 32;
pub const LE_ENCRYPT_RP_SIZE: u32 = 17;
pub const OCF_LE_RAND: u32 = 24;
pub const LE_RAND_RP_SIZE: u32 = 9;
pub const OCF_LE_START_ENCRYPTION: u32 = 25;
pub const LE_START_ENCRYPTION_CP_SIZE: u32 = 28;
pub const OCF_LE_LTK_REPLY: u32 = 26;
pub const LE_LTK_REPLY_CP_SIZE: u32 = 18;
pub const LE_LTK_REPLY_RP_SIZE: u32 = 3;
pub const OCF_LE_LTK_NEG_REPLY: u32 = 27;
pub const LE_LTK_NEG_REPLY_CP_SIZE: u32 = 2;
pub const LE_LTK_NEG_REPLY_RP_SIZE: u32 = 3;
pub const OCF_LE_READ_SUPPORTED_STATES: u32 = 28;
pub const LE_READ_SUPPORTED_STATES_RP_SIZE: u32 = 9;
pub const OCF_LE_RECEIVER_TEST: u32 = 29;
pub const LE_RECEIVER_TEST_CP_SIZE: u32 = 1;
pub const OCF_LE_TRANSMITTER_TEST: u32 = 30;
pub const LE_TRANSMITTER_TEST_CP_SIZE: u32 = 3;
pub const OCF_LE_TEST_END: u32 = 31;
pub const LE_TEST_END_RP_SIZE: u32 = 3;
pub const OCF_LE_ADD_DEVICE_TO_RESOLV_LIST: u32 = 39;
pub const LE_ADD_DEVICE_TO_RESOLV_LIST_CP_SIZE: u32 = 39;
pub const OCF_LE_REMOVE_DEVICE_FROM_RESOLV_LIST: u32 = 40;
pub const LE_REMOVE_DEVICE_FROM_RESOLV_LIST_CP_SIZE: u32 = 7;
pub const OCF_LE_CLEAR_RESOLV_LIST: u32 = 41;
pub const OCF_LE_READ_RESOLV_LIST_SIZE: u32 = 42;
pub const LE_READ_RESOLV_LIST_SIZE_RP_SIZE: u32 = 2;
pub const OCF_LE_SET_ADDRESS_RESOLUTION_ENABLE: u32 = 45;
pub const LE_SET_ADDRESS_RESOLUTION_ENABLE_CP_SIZE: u32 = 1;
pub const OGF_VENDOR_CMD: u32 = 63;
pub const EVT_INQUIRY_COMPLETE: u32 = 1;
pub const EVT_INQUIRY_RESULT: u32 = 2;
pub const INQUIRY_INFO_SIZE: u32 = 14;
pub const EVT_CONN_COMPLETE: u32 = 3;
pub const EVT_CONN_COMPLETE_SIZE: u32 = 11;
pub const EVT_CONN_REQUEST: u32 = 4;
pub const EVT_CONN_REQUEST_SIZE: u32 = 10;
pub const EVT_DISCONN_COMPLETE: u32 = 5;
pub const EVT_DISCONN_COMPLETE_SIZE: u32 = 4;
pub const EVT_AUTH_COMPLETE: u32 = 6;
pub const EVT_AUTH_COMPLETE_SIZE: u32 = 3;
pub const EVT_REMOTE_NAME_REQ_COMPLETE: u32 = 7;
pub const EVT_REMOTE_NAME_REQ_COMPLETE_SIZE: u32 = 255;
pub const EVT_ENCRYPT_CHANGE: u32 = 8;
pub const EVT_ENCRYPT_CHANGE_SIZE: u32 = 4;
pub const EVT_CHANGE_CONN_LINK_KEY_COMPLETE: u32 = 9;
pub const EVT_CHANGE_CONN_LINK_KEY_COMPLETE_SIZE: u32 = 3;
pub const EVT_MASTER_LINK_KEY_COMPLETE: u32 = 10;
pub const EVT_MASTER_LINK_KEY_COMPLETE_SIZE: u32 = 4;
pub const EVT_READ_REMOTE_FEATURES_COMPLETE: u32 = 11;
pub const EVT_READ_REMOTE_FEATURES_COMPLETE_SIZE: u32 = 11;
pub const EVT_READ_REMOTE_VERSION_COMPLETE: u32 = 12;
pub const EVT_READ_REMOTE_VERSION_COMPLETE_SIZE: u32 = 8;
pub const EVT_QOS_SETUP_COMPLETE: u32 = 13;
pub const EVT_QOS_SETUP_COMPLETE_SIZE: u32 = 21;
pub const EVT_CMD_COMPLETE: u32 = 14;
pub const EVT_CMD_COMPLETE_SIZE: u32 = 3;
pub const EVT_CMD_STATUS: u32 = 15;
pub const EVT_CMD_STATUS_SIZE: u32 = 4;
pub const EVT_HARDWARE_ERROR: u32 = 16;
pub const EVT_HARDWARE_ERROR_SIZE: u32 = 1;
pub const EVT_FLUSH_OCCURRED: u32 = 17;
pub const EVT_FLUSH_OCCURRED_SIZE: u32 = 2;
pub const EVT_ROLE_CHANGE: u32 = 18;
pub const EVT_ROLE_CHANGE_SIZE: u32 = 8;
pub const EVT_NUM_COMP_PKTS: u32 = 19;
pub const EVT_NUM_COMP_PKTS_SIZE: u32 = 1;
pub const EVT_MODE_CHANGE: u32 = 20;
pub const EVT_MODE_CHANGE_SIZE: u32 = 6;
pub const EVT_RETURN_LINK_KEYS: u32 = 21;
pub const EVT_RETURN_LINK_KEYS_SIZE: u32 = 1;
pub const EVT_PIN_CODE_REQ: u32 = 22;
pub const EVT_PIN_CODE_REQ_SIZE: u32 = 6;
pub const EVT_LINK_KEY_REQ: u32 = 23;
pub const EVT_LINK_KEY_REQ_SIZE: u32 = 6;
pub const EVT_LINK_KEY_NOTIFY: u32 = 24;
pub const EVT_LINK_KEY_NOTIFY_SIZE: u32 = 23;
pub const EVT_LOOPBACK_COMMAND: u32 = 25;
pub const EVT_DATA_BUFFER_OVERFLOW: u32 = 26;
pub const EVT_DATA_BUFFER_OVERFLOW_SIZE: u32 = 1;
pub const EVT_MAX_SLOTS_CHANGE: u32 = 27;
pub const EVT_MAX_SLOTS_CHANGE_SIZE: u32 = 3;
pub const EVT_READ_CLOCK_OFFSET_COMPLETE: u32 = 28;
pub const EVT_READ_CLOCK_OFFSET_COMPLETE_SIZE: u32 = 5;
pub const EVT_CONN_PTYPE_CHANGED: u32 = 29;
pub const EVT_CONN_PTYPE_CHANGED_SIZE: u32 = 5;
pub const EVT_QOS_VIOLATION: u32 = 30;
pub const EVT_QOS_VIOLATION_SIZE: u32 = 2;
pub const EVT_PSCAN_REP_MODE_CHANGE: u32 = 32;
pub const EVT_PSCAN_REP_MODE_CHANGE_SIZE: u32 = 7;
pub const EVT_FLOW_SPEC_COMPLETE: u32 = 33;
pub const EVT_FLOW_SPEC_COMPLETE_SIZE: u32 = 22;
pub const EVT_INQUIRY_RESULT_WITH_RSSI: u32 = 34;
pub const INQUIRY_INFO_WITH_RSSI_SIZE: u32 = 14;
pub const INQUIRY_INFO_WITH_RSSI_AND_PSCAN_MODE_SIZE: u32 = 15;
pub const EVT_READ_REMOTE_EXT_FEATURES_COMPLETE: u32 = 35;
pub const EVT_READ_REMOTE_EXT_FEATURES_COMPLETE_SIZE: u32 = 13;
pub const EVT_SYNC_CONN_COMPLETE: u32 = 44;
pub const EVT_SYNC_CONN_COMPLETE_SIZE: u32 = 17;
pub const EVT_SYNC_CONN_CHANGED: u32 = 45;
pub const EVT_SYNC_CONN_CHANGED_SIZE: u32 = 9;
pub const EVT_SNIFF_SUBRATING: u32 = 46;
pub const EVT_SNIFF_SUBRATING_SIZE: u32 = 11;
pub const EVT_EXTENDED_INQUIRY_RESULT: u32 = 47;
pub const EXTENDED_INQUIRY_INFO_SIZE: u32 = 254;
pub const EVT_ENCRYPTION_KEY_REFRESH_COMPLETE: u32 = 48;
pub const EVT_ENCRYPTION_KEY_REFRESH_COMPLETE_SIZE: u32 = 3;
pub const EVT_IO_CAPABILITY_REQUEST: u32 = 49;
pub const EVT_IO_CAPABILITY_REQUEST_SIZE: u32 = 6;
pub const EVT_IO_CAPABILITY_RESPONSE: u32 = 50;
pub const EVT_IO_CAPABILITY_RESPONSE_SIZE: u32 = 9;
pub const EVT_USER_CONFIRM_REQUEST: u32 = 51;
pub const EVT_USER_CONFIRM_REQUEST_SIZE: u32 = 10;
pub const EVT_USER_PASSKEY_REQUEST: u32 = 52;
pub const EVT_USER_PASSKEY_REQUEST_SIZE: u32 = 6;
pub const EVT_REMOTE_OOB_DATA_REQUEST: u32 = 53;
pub const EVT_REMOTE_OOB_DATA_REQUEST_SIZE: u32 = 6;
pub const EVT_SIMPLE_PAIRING_COMPLETE: u32 = 54;
pub const EVT_SIMPLE_PAIRING_COMPLETE_SIZE: u32 = 7;
pub const EVT_LINK_SUPERVISION_TIMEOUT_CHANGED: u32 = 56;
pub const EVT_LINK_SUPERVISION_TIMEOUT_CHANGED_SIZE: u32 = 4;
pub const EVT_ENHANCED_FLUSH_COMPLETE: u32 = 57;
pub const EVT_ENHANCED_FLUSH_COMPLETE_SIZE: u32 = 2;
pub const EVT_USER_PASSKEY_NOTIFY: u32 = 59;
pub const EVT_USER_PASSKEY_NOTIFY_SIZE: u32 = 10;
pub const EVT_KEYPRESS_NOTIFY: u32 = 60;
pub const EVT_KEYPRESS_NOTIFY_SIZE: u32 = 7;
pub const EVT_REMOTE_HOST_FEATURES_NOTIFY: u32 = 61;
pub const EVT_REMOTE_HOST_FEATURES_NOTIFY_SIZE: u32 = 14;
pub const EVT_LE_META_EVENT: u32 = 62;
pub const EVT_LE_META_EVENT_SIZE: u32 = 1;
pub const EVT_LE_CONN_COMPLETE: u32 = 1;
pub const EVT_LE_CONN_COMPLETE_SIZE: u32 = 18;
pub const EVT_LE_ADVERTISING_REPORT: u32 = 2;
pub const LE_ADVERTISING_INFO_SIZE: u32 = 9;
pub const EVT_LE_CONN_UPDATE_COMPLETE: u32 = 3;
pub const EVT_LE_CONN_UPDATE_COMPLETE_SIZE: u32 = 9;
pub const EVT_LE_READ_REMOTE_USED_FEATURES_COMPLETE: u32 = 4;
pub const EVT_LE_READ_REMOTE_USED_FEATURES_COMPLETE_SIZE: u32 = 11;
pub const EVT_LE_LTK_REQUEST: u32 = 5;
pub const EVT_LE_LTK_REQUEST_SIZE: u32 = 12;
pub const EVT_PHYSICAL_LINK_COMPLETE: u32 = 64;
pub const EVT_PHYSICAL_LINK_COMPLETE_SIZE: u32 = 2;
pub const EVT_CHANNEL_SELECTED: u32 = 65;
pub const EVT_DISCONNECT_PHYSICAL_LINK_COMPLETE: u32 = 66;
pub const EVT_DISCONNECT_PHYSICAL_LINK_COMPLETE_SIZE: u32 = 3;
pub const EVT_PHYSICAL_LINK_LOSS_EARLY_WARNING: u32 = 67;
pub const EVT_PHYSICAL_LINK_LOSS_WARNING_SIZE: u32 = 2;
pub const EVT_PHYSICAL_LINK_RECOVERY: u32 = 68;
pub const EVT_PHYSICAL_LINK_RECOVERY_SIZE: u32 = 1;
pub const EVT_LOGICAL_LINK_COMPLETE: u32 = 69;
pub const EVT_LOGICAL_LINK_COMPLETE_SIZE: u32 = 5;
pub const EVT_DISCONNECT_LOGICAL_LINK_COMPLETE: u32 = 70;
pub const EVT_FLOW_SPEC_MODIFY_COMPLETE: u32 = 71;
pub const EVT_FLOW_SPEC_MODIFY_COMPLETE_SIZE: u32 = 3;
pub const EVT_NUMBER_COMPLETED_BLOCKS: u32 = 72;
pub const EVT_AMP_STATUS_CHANGE: u32 = 77;
pub const EVT_AMP_STATUS_CHANGE_SIZE: u32 = 2;
pub const EVT_TESTING: u32 = 254;
pub const EVT_VENDOR: u32 = 255;
pub const EVT_STACK_INTERNAL: u32 = 253;
pub const EVT_STACK_INTERNAL_SIZE: u32 = 2;
pub const EVT_SI_DEVICE: u32 = 1;
pub const EVT_SI_DEVICE_SIZE: u32 = 4;
pub const HCI_TYPE_LEN: u32 = 1;
pub const HCI_COMMAND_HDR_SIZE: u32 = 3;
pub const HCI_EVENT_HDR_SIZE: u32 = 2;
pub const HCI_ACL_HDR_SIZE: u32 = 4;
pub const HCI_SCO_HDR_SIZE: u32 = 3;
pub const HCI_MSG_HDR_SIZE: u32 = 6;
pub const HCI_DATA_DIR: u32 = 1;
pub const HCI_FILTER: u32 = 2;
pub const HCI_TIME_STAMP: u32 = 3;
pub const HCI_CMSG_DIR: u32 = 1;
pub const HCI_CMSG_TSTAMP: u32 = 2;
pub const HCI_DEV_NONE: u32 = 65535;
pub const HCI_CHANNEL_RAW: u32 = 0;
pub const HCI_CHANNEL_USER: u32 = 1;
pub const HCI_CHANNEL_MONITOR: u32 = 2;
pub const HCI_CHANNEL_CONTROL: u32 = 3;
pub const HCI_CHANNEL_LOGGING: u32 = 4;
pub const HCI_FLT_TYPE_BITS: u32 = 31;
pub const HCI_FLT_EVENT_BITS: u32 = 63;
pub const HCI_FLT_OGF_BITS: u32 = 63;
pub const HCI_FLT_OCF_BITS: u32 = 127;
pub const IREQ_CACHE_FLUSH: u32 = 1;
pub const SDP_RECORD_PERSIST: u32 = 1;
pub const SDP_DEVICE_RECORD: u32 = 2;
pub const SDP_RETRY_IF_BUSY: u32 = 1;
pub const SDP_WAIT_ON_CLOSE: u32 = 2;
pub const SDP_NON_BLOCKING: u32 = 4;
pub const SDP_LARGE_MTU: u32 = 8;
pub const MAX_LEN_UUID_STR: u32 = 37;
pub const MAX_LEN_PROTOCOL_UUID_STR: u32 = 8;
pub const MAX_LEN_SERVICECLASS_UUID_STR: u32 = 28;
pub const MAX_LEN_PROFILEDESCRIPTOR_UUID_STR: u32 = 28;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).__cmsg_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MAX: _bindgen_ty_4 = 256;
pub type _bindgen_ty_4 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_security {
    pub level: u8,
    pub key_size: u8,
}
#[test]
fn bindgen_test_layout_bt_security() {
    assert_eq!(
        ::std::mem::size_of::<bt_security>(),
        2usize,
        concat!("Size of: ", stringify!(bt_security))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_security>(),
        1usize,
        concat!("Alignment of ", stringify!(bt_security))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_security>())).level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_security),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_security>())).key_size as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_security),
            "::",
            stringify!(key_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_power {
    pub force_active: u8,
}
#[test]
fn bindgen_test_layout_bt_power() {
    assert_eq!(
        ::std::mem::size_of::<bt_power>(),
        1usize,
        concat!("Size of: ", stringify!(bt_power))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_power>(),
        1usize,
        concat!("Alignment of ", stringify!(bt_power))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_power>())).force_active as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_power),
            "::",
            stringify!(force_active)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_voice {
    pub setting: u16,
}
#[test]
fn bindgen_test_layout_bt_voice() {
    assert_eq!(
        ::std::mem::size_of::<bt_voice>(),
        2usize,
        concat!("Size of: ", stringify!(bt_voice))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_voice>(),
        2usize,
        concat!("Alignment of ", stringify!(bt_voice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_voice>())).setting as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_voice),
            "::",
            stringify!(setting)
        )
    );
}
pub const BT_CONNECTED: _bindgen_ty_7 = 1;
pub const BT_OPEN: _bindgen_ty_7 = 2;
pub const BT_BOUND: _bindgen_ty_7 = 3;
pub const BT_LISTEN: _bindgen_ty_7 = 4;
pub const BT_CONNECT: _bindgen_ty_7 = 5;
pub const BT_CONNECT2: _bindgen_ty_7 = 6;
pub const BT_CONFIG: _bindgen_ty_7 = 7;
pub const BT_DISCONN: _bindgen_ty_7 = 8;
pub const BT_CLOSED: _bindgen_ty_7 = 9;
pub type _bindgen_ty_7 = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct bdaddr_t {
    pub b: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_bdaddr_t() {
    assert_eq!(
        ::std::mem::size_of::<bdaddr_t>(),
        6usize,
        concat!("Size of: ", stringify!(bdaddr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bdaddr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(bdaddr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bdaddr_t>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bdaddr_t),
            "::",
            stringify!(b)
        )
    );
}
extern "C" {
    pub fn baswap(dst: *mut bdaddr_t, src: *const bdaddr_t);
}
extern "C" {
    pub fn strtoba(str: *const ::std::os::raw::c_char) -> *mut bdaddr_t;
}
extern "C" {
    pub fn batostr(ba: *const bdaddr_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ba2str(ba: *const bdaddr_t, str: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ba2strlc(ba: *const bdaddr_t, str: *mut ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2ba(str: *const ::std::os::raw::c_char, ba: *mut bdaddr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ba2oui(ba: *const bdaddr_t, oui: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bachk(str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baprintf(format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bafprintf(
        stream: *mut FILE,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basprintf(
        str: *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basnprintf(
        str: *mut ::std::os::raw::c_char,
        size: size_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn bt_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn bt_error(code: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_compidtostr(id: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint128_t {
    pub data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_uint128_t() {
    assert_eq!(
        ::std::mem::size_of::<uint128_t>(),
        16usize,
        concat!("Size of: ", stringify!(uint128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<uint128_t>(),
        1usize,
        concat!("Alignment of ", stringify!(uint128_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<uint128_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uint128_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdp_pdu_hdr_t {
    pub pdu_id: u8,
    pub tid: u16,
    pub plen: u16,
}
#[test]
fn bindgen_test_layout_sdp_pdu_hdr_t() {
    assert_eq!(
        ::std::mem::size_of::<sdp_pdu_hdr_t>(),
        5usize,
        concat!("Size of: ", stringify!(sdp_pdu_hdr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_pdu_hdr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sdp_pdu_hdr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_pdu_hdr_t>())).pdu_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_pdu_hdr_t),
            "::",
            stringify!(pdu_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_pdu_hdr_t>())).tid as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_pdu_hdr_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_pdu_hdr_t>())).plen as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_pdu_hdr_t),
            "::",
            stringify!(plen)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uuid_t {
    pub type_: u8,
    pub value: uuid_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uuid_t__bindgen_ty_1 {
    pub uuid16: u16,
    pub uuid32: u32,
    pub uuid128: uint128_t,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_uuid_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<uuid_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(uuid_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<uuid_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(uuid_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<uuid_t__bindgen_ty_1>())).uuid16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid_t__bindgen_ty_1),
            "::",
            stringify!(uuid16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<uuid_t__bindgen_ty_1>())).uuid32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid_t__bindgen_ty_1),
            "::",
            stringify!(uuid32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<uuid_t__bindgen_ty_1>())).uuid128 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid_t__bindgen_ty_1),
            "::",
            stringify!(uuid128)
        )
    );
}
#[test]
fn bindgen_test_layout_uuid_t() {
    assert_eq!(
        ::std::mem::size_of::<uuid_t>(),
        20usize,
        concat!("Size of: ", stringify!(uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<uuid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(uuid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<uuid_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<uuid_t>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid_t),
            "::",
            stringify!(value)
        )
    );
}
pub type sdp_list_t = _sdp_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sdp_list {
    pub next: *mut sdp_list_t,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__sdp_list() {
    assert_eq!(
        ::std::mem::size_of::<_sdp_list>(),
        16usize,
        concat!("Size of: ", stringify!(_sdp_list))
    );
    assert_eq!(
        ::std::mem::align_of::<_sdp_list>(),
        8usize,
        concat!("Alignment of ", stringify!(_sdp_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sdp_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sdp_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sdp_list>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sdp_list),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdp_lang_attr_t {
    pub code_ISO639: u16,
    pub encoding: u16,
    pub base_offset: u16,
}
#[test]
fn bindgen_test_layout_sdp_lang_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<sdp_lang_attr_t>(),
        6usize,
        concat!("Size of: ", stringify!(sdp_lang_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_lang_attr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(sdp_lang_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_lang_attr_t>())).code_ISO639 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_lang_attr_t),
            "::",
            stringify!(code_ISO639)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_lang_attr_t>())).encoding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_lang_attr_t),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_lang_attr_t>())).base_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_lang_attr_t),
            "::",
            stringify!(base_offset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sdp_profile_desc_t {
    pub uuid: uuid_t,
    pub version: u16,
}
#[test]
fn bindgen_test_layout_sdp_profile_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<sdp_profile_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(sdp_profile_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_profile_desc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sdp_profile_desc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_profile_desc_t>())).uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_profile_desc_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_profile_desc_t>())).version as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_profile_desc_t),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdp_version_t {
    pub major: u8,
    pub minor: u8,
}
#[test]
fn bindgen_test_layout_sdp_version_t() {
    assert_eq!(
        ::std::mem::size_of::<sdp_version_t>(),
        2usize,
        concat!("Size of: ", stringify!(sdp_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_version_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sdp_version_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_version_t>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_version_t),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_version_t>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_version_t),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdp_buf_t {
    pub data: *mut u8,
    pub data_size: u32,
    pub buf_size: u32,
}
#[test]
fn bindgen_test_layout_sdp_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<sdp_buf_t>(),
        16usize,
        concat!("Size of: ", stringify!(sdp_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdp_buf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_buf_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_buf_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_buf_t>())).data_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_buf_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_buf_t>())).buf_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_buf_t),
            "::",
            stringify!(buf_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sdp_record_t {
    pub handle: u32,
    pub pattern: *mut sdp_list_t,
    pub attrlist: *mut sdp_list_t,
    pub svclass: uuid_t,
}
#[test]
fn bindgen_test_layout_sdp_record_t() {
    assert_eq!(
        ::std::mem::size_of::<sdp_record_t>(),
        48usize,
        concat!("Size of: ", stringify!(sdp_record_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_record_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdp_record_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_record_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_record_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_record_t>())).pattern as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_record_t),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_record_t>())).attrlist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_record_t),
            "::",
            stringify!(attrlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_record_t>())).svclass as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_record_t),
            "::",
            stringify!(svclass)
        )
    );
}
pub type sdp_data_t = sdp_data_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sdp_data_struct {
    pub dtd: u8,
    pub attrId: u16,
    pub val: sdp_data_struct__bindgen_ty_1,
    pub next: *mut sdp_data_t,
    pub unitSize: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sdp_data_struct__bindgen_ty_1 {
    pub int8: i8,
    pub int16: i16,
    pub int32: i32,
    pub int64: i64,
    pub int128: uint128_t,
    pub uint8: u8,
    pub uint16: u16,
    pub uint32: u32,
    pub uint64: u64,
    pub uint128: uint128_t,
    pub uuid: uuid_t,
    pub str: *mut ::std::os::raw::c_char,
    pub dataseq: *mut sdp_data_t,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_sdp_data_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sdp_data_struct__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(sdp_data_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_data_struct__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sdp_data_struct__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).int8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(int8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).int16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(int16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).int32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).int64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(int64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).int128 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(int128)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).uint8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(uint8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).uint16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(uint16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).uint32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(uint32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).uint64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(uint64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).uint128 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(uint128)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).uuid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).str as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sdp_data_struct__bindgen_ty_1>())).dataseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct__bindgen_ty_1),
            "::",
            stringify!(dataseq)
        )
    );
}
#[test]
fn bindgen_test_layout_sdp_data_struct() {
    assert_eq!(
        ::std::mem::size_of::<sdp_data_struct>(),
        48usize,
        concat!("Size of: ", stringify!(sdp_data_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_data_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(sdp_data_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_data_struct>())).dtd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct),
            "::",
            stringify!(dtd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_data_struct>())).attrId as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct),
            "::",
            stringify!(attrId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_data_struct>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_data_struct>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_data_struct>())).unitSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_data_struct),
            "::",
            stringify!(unitSize)
        )
    );
}
pub const HCI_UP: _bindgen_ty_8 = 0;
pub const HCI_INIT: _bindgen_ty_8 = 1;
pub const HCI_RUNNING: _bindgen_ty_8 = 2;
pub const HCI_PSCAN: _bindgen_ty_8 = 3;
pub const HCI_ISCAN: _bindgen_ty_8 = 4;
pub const HCI_AUTH: _bindgen_ty_8 = 5;
pub const HCI_ENCRYPT: _bindgen_ty_8 = 6;
pub const HCI_INQUIRY: _bindgen_ty_8 = 7;
pub const HCI_RAW: _bindgen_ty_8 = 8;
pub type _bindgen_ty_8 = u32;
pub const LE_PUBLIC_ADDRESS: _bindgen_ty_9 = 0;
pub const LE_RANDOM_ADDRESS: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct inquiry_cp {
    pub lap: [u8; 3usize],
    pub length: u8,
    pub num_rsp: u8,
}
#[test]
fn bindgen_test_layout_inquiry_cp() {
    assert_eq!(
        ::std::mem::size_of::<inquiry_cp>(),
        5usize,
        concat!("Size of: ", stringify!(inquiry_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<inquiry_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(inquiry_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_cp>())).lap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_cp),
            "::",
            stringify!(lap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_cp>())).length as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_cp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_cp>())).num_rsp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_cp),
            "::",
            stringify!(num_rsp)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct status_bdaddr_rp {
    pub status: u8,
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_status_bdaddr_rp() {
    assert_eq!(
        ::std::mem::size_of::<status_bdaddr_rp>(),
        7usize,
        concat!("Size of: ", stringify!(status_bdaddr_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<status_bdaddr_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(status_bdaddr_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_bdaddr_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(status_bdaddr_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_bdaddr_rp>())).bdaddr as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(status_bdaddr_rp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct periodic_inquiry_cp {
    pub max_period: u16,
    pub min_period: u16,
    pub lap: [u8; 3usize],
    pub length: u8,
    pub num_rsp: u8,
}
#[test]
fn bindgen_test_layout_periodic_inquiry_cp() {
    assert_eq!(
        ::std::mem::size_of::<periodic_inquiry_cp>(),
        9usize,
        concat!("Size of: ", stringify!(periodic_inquiry_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<periodic_inquiry_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(periodic_inquiry_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<periodic_inquiry_cp>())).max_period as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(periodic_inquiry_cp),
            "::",
            stringify!(max_period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<periodic_inquiry_cp>())).min_period as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(periodic_inquiry_cp),
            "::",
            stringify!(min_period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<periodic_inquiry_cp>())).lap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(periodic_inquiry_cp),
            "::",
            stringify!(lap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<periodic_inquiry_cp>())).length as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(periodic_inquiry_cp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<periodic_inquiry_cp>())).num_rsp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(periodic_inquiry_cp),
            "::",
            stringify!(num_rsp)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct create_conn_cp {
    pub bdaddr: bdaddr_t,
    pub pkt_type: u16,
    pub pscan_rep_mode: u8,
    pub pscan_mode: u8,
    pub clock_offset: u16,
    pub role_switch: u8,
}
#[test]
fn bindgen_test_layout_create_conn_cp() {
    assert_eq!(
        ::std::mem::size_of::<create_conn_cp>(),
        13usize,
        concat!("Size of: ", stringify!(create_conn_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<create_conn_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(create_conn_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_conn_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(create_conn_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_conn_cp>())).pkt_type as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(create_conn_cp),
            "::",
            stringify!(pkt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_conn_cp>())).pscan_rep_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(create_conn_cp),
            "::",
            stringify!(pscan_rep_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_conn_cp>())).pscan_mode as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(create_conn_cp),
            "::",
            stringify!(pscan_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_conn_cp>())).clock_offset as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(create_conn_cp),
            "::",
            stringify!(clock_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_conn_cp>())).role_switch as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(create_conn_cp),
            "::",
            stringify!(role_switch)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct disconnect_cp {
    pub handle: u16,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_disconnect_cp() {
    assert_eq!(
        ::std::mem::size_of::<disconnect_cp>(),
        3usize,
        concat!("Size of: ", stringify!(disconnect_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<disconnect_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(disconnect_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<disconnect_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(disconnect_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<disconnect_cp>())).reason as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(disconnect_cp),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct add_sco_cp {
    pub handle: u16,
    pub pkt_type: u16,
}
#[test]
fn bindgen_test_layout_add_sco_cp() {
    assert_eq!(
        ::std::mem::size_of::<add_sco_cp>(),
        4usize,
        concat!("Size of: ", stringify!(add_sco_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<add_sco_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(add_sco_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<add_sco_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(add_sco_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<add_sco_cp>())).pkt_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(add_sco_cp),
            "::",
            stringify!(pkt_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct create_conn_cancel_cp {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_create_conn_cancel_cp() {
    assert_eq!(
        ::std::mem::size_of::<create_conn_cancel_cp>(),
        6usize,
        concat!("Size of: ", stringify!(create_conn_cancel_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<create_conn_cancel_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(create_conn_cancel_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_conn_cancel_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(create_conn_cancel_cp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct accept_conn_req_cp {
    pub bdaddr: bdaddr_t,
    pub role: u8,
}
#[test]
fn bindgen_test_layout_accept_conn_req_cp() {
    assert_eq!(
        ::std::mem::size_of::<accept_conn_req_cp>(),
        7usize,
        concat!("Size of: ", stringify!(accept_conn_req_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<accept_conn_req_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(accept_conn_req_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accept_conn_req_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_conn_req_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accept_conn_req_cp>())).role as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_conn_req_cp),
            "::",
            stringify!(role)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct reject_conn_req_cp {
    pub bdaddr: bdaddr_t,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_reject_conn_req_cp() {
    assert_eq!(
        ::std::mem::size_of::<reject_conn_req_cp>(),
        7usize,
        concat!("Size of: ", stringify!(reject_conn_req_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<reject_conn_req_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(reject_conn_req_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reject_conn_req_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reject_conn_req_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reject_conn_req_cp>())).reason as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(reject_conn_req_cp),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct link_key_reply_cp {
    pub bdaddr: bdaddr_t,
    pub link_key: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_link_key_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<link_key_reply_cp>(),
        22usize,
        concat!("Size of: ", stringify!(link_key_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<link_key_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(link_key_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<link_key_reply_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(link_key_reply_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<link_key_reply_cp>())).link_key as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(link_key_reply_cp),
            "::",
            stringify!(link_key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pin_code_reply_cp {
    pub bdaddr: bdaddr_t,
    pub pin_len: u8,
    pub pin_code: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_pin_code_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<pin_code_reply_cp>(),
        23usize,
        concat!("Size of: ", stringify!(pin_code_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<pin_code_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(pin_code_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pin_code_reply_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pin_code_reply_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pin_code_reply_cp>())).pin_len as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pin_code_reply_cp),
            "::",
            stringify!(pin_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pin_code_reply_cp>())).pin_code as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(pin_code_reply_cp),
            "::",
            stringify!(pin_code)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct set_conn_ptype_cp {
    pub handle: u16,
    pub pkt_type: u16,
}
#[test]
fn bindgen_test_layout_set_conn_ptype_cp() {
    assert_eq!(
        ::std::mem::size_of::<set_conn_ptype_cp>(),
        4usize,
        concat!("Size of: ", stringify!(set_conn_ptype_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<set_conn_ptype_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(set_conn_ptype_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_conn_ptype_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(set_conn_ptype_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_conn_ptype_cp>())).pkt_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(set_conn_ptype_cp),
            "::",
            stringify!(pkt_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct auth_requested_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_auth_requested_cp() {
    assert_eq!(
        ::std::mem::size_of::<auth_requested_cp>(),
        2usize,
        concat!("Size of: ", stringify!(auth_requested_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<auth_requested_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(auth_requested_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<auth_requested_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(auth_requested_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct set_conn_encrypt_cp {
    pub handle: u16,
    pub encrypt: u8,
}
#[test]
fn bindgen_test_layout_set_conn_encrypt_cp() {
    assert_eq!(
        ::std::mem::size_of::<set_conn_encrypt_cp>(),
        3usize,
        concat!("Size of: ", stringify!(set_conn_encrypt_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<set_conn_encrypt_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(set_conn_encrypt_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_conn_encrypt_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(set_conn_encrypt_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_conn_encrypt_cp>())).encrypt as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(set_conn_encrypt_cp),
            "::",
            stringify!(encrypt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct change_conn_link_key_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_change_conn_link_key_cp() {
    assert_eq!(
        ::std::mem::size_of::<change_conn_link_key_cp>(),
        2usize,
        concat!("Size of: ", stringify!(change_conn_link_key_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<change_conn_link_key_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(change_conn_link_key_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<change_conn_link_key_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(change_conn_link_key_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct master_link_key_cp {
    pub key_flag: u8,
}
#[test]
fn bindgen_test_layout_master_link_key_cp() {
    assert_eq!(
        ::std::mem::size_of::<master_link_key_cp>(),
        1usize,
        concat!("Size of: ", stringify!(master_link_key_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<master_link_key_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(master_link_key_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<master_link_key_cp>())).key_flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(master_link_key_cp),
            "::",
            stringify!(key_flag)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct remote_name_req_cp {
    pub bdaddr: bdaddr_t,
    pub pscan_rep_mode: u8,
    pub pscan_mode: u8,
    pub clock_offset: u16,
}
#[test]
fn bindgen_test_layout_remote_name_req_cp() {
    assert_eq!(
        ::std::mem::size_of::<remote_name_req_cp>(),
        10usize,
        concat!("Size of: ", stringify!(remote_name_req_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<remote_name_req_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(remote_name_req_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<remote_name_req_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_name_req_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<remote_name_req_cp>())).pscan_rep_mode as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_name_req_cp),
            "::",
            stringify!(pscan_rep_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<remote_name_req_cp>())).pscan_mode as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_name_req_cp),
            "::",
            stringify!(pscan_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<remote_name_req_cp>())).clock_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_name_req_cp),
            "::",
            stringify!(clock_offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct remote_name_req_cancel_cp {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_remote_name_req_cancel_cp() {
    assert_eq!(
        ::std::mem::size_of::<remote_name_req_cancel_cp>(),
        6usize,
        concat!("Size of: ", stringify!(remote_name_req_cancel_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<remote_name_req_cancel_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(remote_name_req_cancel_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<remote_name_req_cancel_cp>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_name_req_cancel_cp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_remote_features_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_read_remote_features_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_remote_features_cp>(),
        2usize,
        concat!("Size of: ", stringify!(read_remote_features_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_remote_features_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_remote_features_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_remote_features_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_remote_features_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_remote_ext_features_cp {
    pub handle: u16,
    pub page_num: u8,
}
#[test]
fn bindgen_test_layout_read_remote_ext_features_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_remote_ext_features_cp>(),
        3usize,
        concat!("Size of: ", stringify!(read_remote_ext_features_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_remote_ext_features_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_remote_ext_features_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_remote_ext_features_cp>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_remote_ext_features_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_remote_ext_features_cp>())).page_num as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_remote_ext_features_cp),
            "::",
            stringify!(page_num)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_remote_version_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_read_remote_version_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_remote_version_cp>(),
        2usize,
        concat!("Size of: ", stringify!(read_remote_version_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_remote_version_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_remote_version_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_remote_version_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_remote_version_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_clock_offset_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_read_clock_offset_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_clock_offset_cp>(),
        2usize,
        concat!("Size of: ", stringify!(read_clock_offset_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_clock_offset_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_clock_offset_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_clock_offset_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_clock_offset_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct setup_sync_conn_cp {
    pub handle: u16,
    pub tx_bandwith: u32,
    pub rx_bandwith: u32,
    pub max_latency: u16,
    pub voice_setting: u16,
    pub retrans_effort: u8,
    pub pkt_type: u16,
}
#[test]
fn bindgen_test_layout_setup_sync_conn_cp() {
    assert_eq!(
        ::std::mem::size_of::<setup_sync_conn_cp>(),
        17usize,
        concat!("Size of: ", stringify!(setup_sync_conn_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<setup_sync_conn_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(setup_sync_conn_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<setup_sync_conn_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(setup_sync_conn_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<setup_sync_conn_cp>())).tx_bandwith as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(setup_sync_conn_cp),
            "::",
            stringify!(tx_bandwith)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<setup_sync_conn_cp>())).rx_bandwith as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(setup_sync_conn_cp),
            "::",
            stringify!(rx_bandwith)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<setup_sync_conn_cp>())).max_latency as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(setup_sync_conn_cp),
            "::",
            stringify!(max_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<setup_sync_conn_cp>())).voice_setting as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(setup_sync_conn_cp),
            "::",
            stringify!(voice_setting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<setup_sync_conn_cp>())).retrans_effort as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(setup_sync_conn_cp),
            "::",
            stringify!(retrans_effort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<setup_sync_conn_cp>())).pkt_type as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(setup_sync_conn_cp),
            "::",
            stringify!(pkt_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct accept_sync_conn_req_cp {
    pub bdaddr: bdaddr_t,
    pub tx_bandwith: u32,
    pub rx_bandwith: u32,
    pub max_latency: u16,
    pub voice_setting: u16,
    pub retrans_effort: u8,
    pub pkt_type: u16,
}
#[test]
fn bindgen_test_layout_accept_sync_conn_req_cp() {
    assert_eq!(
        ::std::mem::size_of::<accept_sync_conn_req_cp>(),
        21usize,
        concat!("Size of: ", stringify!(accept_sync_conn_req_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<accept_sync_conn_req_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(accept_sync_conn_req_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accept_sync_conn_req_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_sync_conn_req_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_sync_conn_req_cp>())).tx_bandwith as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_sync_conn_req_cp),
            "::",
            stringify!(tx_bandwith)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_sync_conn_req_cp>())).rx_bandwith as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_sync_conn_req_cp),
            "::",
            stringify!(rx_bandwith)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_sync_conn_req_cp>())).max_latency as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_sync_conn_req_cp),
            "::",
            stringify!(max_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_sync_conn_req_cp>())).voice_setting as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_sync_conn_req_cp),
            "::",
            stringify!(voice_setting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_sync_conn_req_cp>())).retrans_effort as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_sync_conn_req_cp),
            "::",
            stringify!(retrans_effort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_sync_conn_req_cp>())).pkt_type as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_sync_conn_req_cp),
            "::",
            stringify!(pkt_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct reject_sync_conn_req_cp {
    pub bdaddr: bdaddr_t,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_reject_sync_conn_req_cp() {
    assert_eq!(
        ::std::mem::size_of::<reject_sync_conn_req_cp>(),
        7usize,
        concat!("Size of: ", stringify!(reject_sync_conn_req_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<reject_sync_conn_req_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(reject_sync_conn_req_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reject_sync_conn_req_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reject_sync_conn_req_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reject_sync_conn_req_cp>())).reason as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(reject_sync_conn_req_cp),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct io_capability_reply_cp {
    pub bdaddr: bdaddr_t,
    pub capability: u8,
    pub oob_data: u8,
    pub authentication: u8,
}
#[test]
fn bindgen_test_layout_io_capability_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<io_capability_reply_cp>(),
        9usize,
        concat!("Size of: ", stringify!(io_capability_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<io_capability_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(io_capability_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_capability_reply_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_capability_reply_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_capability_reply_cp>())).capability as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(io_capability_reply_cp),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_capability_reply_cp>())).oob_data as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(io_capability_reply_cp),
            "::",
            stringify!(oob_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_capability_reply_cp>())).authentication as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_capability_reply_cp),
            "::",
            stringify!(authentication)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct user_confirm_reply_cp {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_user_confirm_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<user_confirm_reply_cp>(),
        6usize,
        concat!("Size of: ", stringify!(user_confirm_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<user_confirm_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(user_confirm_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<user_confirm_reply_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(user_confirm_reply_cp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct user_passkey_reply_cp {
    pub bdaddr: bdaddr_t,
    pub passkey: u32,
}
#[test]
fn bindgen_test_layout_user_passkey_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<user_passkey_reply_cp>(),
        10usize,
        concat!("Size of: ", stringify!(user_passkey_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<user_passkey_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(user_passkey_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<user_passkey_reply_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(user_passkey_reply_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<user_passkey_reply_cp>())).passkey as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(user_passkey_reply_cp),
            "::",
            stringify!(passkey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct remote_oob_data_reply_cp {
    pub bdaddr: bdaddr_t,
    pub hash: [u8; 16usize],
    pub randomizer: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_remote_oob_data_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<remote_oob_data_reply_cp>(),
        38usize,
        concat!("Size of: ", stringify!(remote_oob_data_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<remote_oob_data_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(remote_oob_data_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<remote_oob_data_reply_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_oob_data_reply_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<remote_oob_data_reply_cp>())).hash as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_oob_data_reply_cp),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<remote_oob_data_reply_cp>())).randomizer as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(remote_oob_data_reply_cp),
            "::",
            stringify!(randomizer)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct io_capability_neg_reply_cp {
    pub bdaddr: bdaddr_t,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_io_capability_neg_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<io_capability_neg_reply_cp>(),
        7usize,
        concat!("Size of: ", stringify!(io_capability_neg_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<io_capability_neg_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(io_capability_neg_reply_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_capability_neg_reply_cp>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_capability_neg_reply_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_capability_neg_reply_cp>())).reason as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(io_capability_neg_reply_cp),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct create_physical_link_cp {
    pub handle: u8,
    pub key_length: u8,
    pub key_type: u8,
    pub key: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_create_physical_link_cp() {
    assert_eq!(
        ::std::mem::size_of::<create_physical_link_cp>(),
        35usize,
        concat!("Size of: ", stringify!(create_physical_link_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<create_physical_link_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(create_physical_link_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_physical_link_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(create_physical_link_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<create_physical_link_cp>())).key_length as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(create_physical_link_cp),
            "::",
            stringify!(key_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<create_physical_link_cp>())).key_type as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(create_physical_link_cp),
            "::",
            stringify!(key_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_physical_link_cp>())).key as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(create_physical_link_cp),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct accept_physical_link_cp {
    pub handle: u8,
    pub key_length: u8,
    pub key_type: u8,
    pub key: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_accept_physical_link_cp() {
    assert_eq!(
        ::std::mem::size_of::<accept_physical_link_cp>(),
        35usize,
        concat!("Size of: ", stringify!(accept_physical_link_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<accept_physical_link_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(accept_physical_link_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accept_physical_link_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_physical_link_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_physical_link_cp>())).key_length as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_physical_link_cp),
            "::",
            stringify!(key_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accept_physical_link_cp>())).key_type as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_physical_link_cp),
            "::",
            stringify!(key_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accept_physical_link_cp>())).key as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_physical_link_cp),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct disconnect_physical_link_cp {
    pub handle: u8,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_disconnect_physical_link_cp() {
    assert_eq!(
        ::std::mem::size_of::<disconnect_physical_link_cp>(),
        2usize,
        concat!("Size of: ", stringify!(disconnect_physical_link_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<disconnect_physical_link_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(disconnect_physical_link_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<disconnect_physical_link_cp>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(disconnect_physical_link_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<disconnect_physical_link_cp>())).reason as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(disconnect_physical_link_cp),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct create_logical_link_cp {
    pub handle: u8,
    pub tx_flow: [u8; 16usize],
    pub rx_flow: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_create_logical_link_cp() {
    assert_eq!(
        ::std::mem::size_of::<create_logical_link_cp>(),
        33usize,
        concat!("Size of: ", stringify!(create_logical_link_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<create_logical_link_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(create_logical_link_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_logical_link_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(create_logical_link_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_logical_link_cp>())).tx_flow as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(create_logical_link_cp),
            "::",
            stringify!(tx_flow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<create_logical_link_cp>())).rx_flow as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(create_logical_link_cp),
            "::",
            stringify!(rx_flow)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct disconnect_logical_link_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_disconnect_logical_link_cp() {
    assert_eq!(
        ::std::mem::size_of::<disconnect_logical_link_cp>(),
        2usize,
        concat!("Size of: ", stringify!(disconnect_logical_link_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<disconnect_logical_link_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(disconnect_logical_link_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<disconnect_logical_link_cp>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(disconnect_logical_link_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cancel_logical_link_cp {
    pub handle: u8,
    pub tx_flow_id: u8,
}
#[test]
fn bindgen_test_layout_cancel_logical_link_cp() {
    assert_eq!(
        ::std::mem::size_of::<cancel_logical_link_cp>(),
        2usize,
        concat!("Size of: ", stringify!(cancel_logical_link_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<cancel_logical_link_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(cancel_logical_link_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cancel_logical_link_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cancel_logical_link_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cancel_logical_link_cp>())).tx_flow_id as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cancel_logical_link_cp),
            "::",
            stringify!(tx_flow_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cancel_logical_link_rp {
    pub status: u8,
    pub handle: u8,
    pub tx_flow_id: u8,
}
#[test]
fn bindgen_test_layout_cancel_logical_link_rp() {
    assert_eq!(
        ::std::mem::size_of::<cancel_logical_link_rp>(),
        3usize,
        concat!("Size of: ", stringify!(cancel_logical_link_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<cancel_logical_link_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(cancel_logical_link_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cancel_logical_link_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cancel_logical_link_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cancel_logical_link_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cancel_logical_link_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cancel_logical_link_rp>())).tx_flow_id as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cancel_logical_link_rp),
            "::",
            stringify!(tx_flow_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hold_mode_cp {
    pub handle: u16,
    pub max_interval: u16,
    pub min_interval: u16,
}
#[test]
fn bindgen_test_layout_hold_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<hold_mode_cp>(),
        6usize,
        concat!("Size of: ", stringify!(hold_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<hold_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(hold_mode_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hold_mode_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hold_mode_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hold_mode_cp>())).max_interval as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hold_mode_cp),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hold_mode_cp>())).min_interval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hold_mode_cp),
            "::",
            stringify!(min_interval)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sniff_mode_cp {
    pub handle: u16,
    pub max_interval: u16,
    pub min_interval: u16,
    pub attempt: u16,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_sniff_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<sniff_mode_cp>(),
        10usize,
        concat!("Size of: ", stringify!(sniff_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<sniff_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(sniff_mode_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sniff_mode_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_mode_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sniff_mode_cp>())).max_interval as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_mode_cp),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sniff_mode_cp>())).min_interval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_mode_cp),
            "::",
            stringify!(min_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sniff_mode_cp>())).attempt as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_mode_cp),
            "::",
            stringify!(attempt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sniff_mode_cp>())).timeout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_mode_cp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct exit_sniff_mode_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_exit_sniff_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<exit_sniff_mode_cp>(),
        2usize,
        concat!("Size of: ", stringify!(exit_sniff_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<exit_sniff_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(exit_sniff_mode_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exit_sniff_mode_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exit_sniff_mode_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct park_mode_cp {
    pub handle: u16,
    pub max_interval: u16,
    pub min_interval: u16,
}
#[test]
fn bindgen_test_layout_park_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<park_mode_cp>(),
        6usize,
        concat!("Size of: ", stringify!(park_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<park_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(park_mode_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<park_mode_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(park_mode_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<park_mode_cp>())).max_interval as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(park_mode_cp),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<park_mode_cp>())).min_interval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(park_mode_cp),
            "::",
            stringify!(min_interval)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct exit_park_mode_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_exit_park_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<exit_park_mode_cp>(),
        2usize,
        concat!("Size of: ", stringify!(exit_park_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<exit_park_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(exit_park_mode_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exit_park_mode_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exit_park_mode_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hci_qos {
    pub service_type: u8,
    pub token_rate: u32,
    pub peak_bandwidth: u32,
    pub latency: u32,
    pub delay_variation: u32,
}
#[test]
fn bindgen_test_layout_hci_qos() {
    assert_eq!(
        ::std::mem::size_of::<hci_qos>(),
        17usize,
        concat!("Size of: ", stringify!(hci_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_qos>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_qos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_qos>())).service_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_qos),
            "::",
            stringify!(service_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_qos>())).token_rate as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_qos),
            "::",
            stringify!(token_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_qos>())).peak_bandwidth as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_qos),
            "::",
            stringify!(peak_bandwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_qos>())).latency as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_qos),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_qos>())).delay_variation as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_qos),
            "::",
            stringify!(delay_variation)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct qos_setup_cp {
    pub handle: u16,
    pub flags: u8,
    pub qos: hci_qos,
}
#[test]
fn bindgen_test_layout_qos_setup_cp() {
    assert_eq!(
        ::std::mem::size_of::<qos_setup_cp>(),
        20usize,
        concat!("Size of: ", stringify!(qos_setup_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<qos_setup_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(qos_setup_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qos_setup_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qos_setup_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qos_setup_cp>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(qos_setup_cp),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qos_setup_cp>())).qos as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(qos_setup_cp),
            "::",
            stringify!(qos)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct role_discovery_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_role_discovery_cp() {
    assert_eq!(
        ::std::mem::size_of::<role_discovery_cp>(),
        2usize,
        concat!("Size of: ", stringify!(role_discovery_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<role_discovery_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(role_discovery_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<role_discovery_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(role_discovery_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct role_discovery_rp {
    pub status: u8,
    pub handle: u16,
    pub role: u8,
}
#[test]
fn bindgen_test_layout_role_discovery_rp() {
    assert_eq!(
        ::std::mem::size_of::<role_discovery_rp>(),
        4usize,
        concat!("Size of: ", stringify!(role_discovery_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<role_discovery_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(role_discovery_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<role_discovery_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(role_discovery_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<role_discovery_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(role_discovery_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<role_discovery_rp>())).role as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(role_discovery_rp),
            "::",
            stringify!(role)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct switch_role_cp {
    pub bdaddr: bdaddr_t,
    pub role: u8,
}
#[test]
fn bindgen_test_layout_switch_role_cp() {
    assert_eq!(
        ::std::mem::size_of::<switch_role_cp>(),
        7usize,
        concat!("Size of: ", stringify!(switch_role_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<switch_role_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(switch_role_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<switch_role_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(switch_role_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<switch_role_cp>())).role as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(switch_role_cp),
            "::",
            stringify!(role)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_link_policy_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_read_link_policy_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_link_policy_cp>(),
        2usize,
        concat!("Size of: ", stringify!(read_link_policy_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_link_policy_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_link_policy_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_link_policy_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_policy_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_link_policy_rp {
    pub status: u8,
    pub handle: u16,
    pub policy: u16,
}
#[test]
fn bindgen_test_layout_read_link_policy_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_link_policy_rp>(),
        5usize,
        concat!("Size of: ", stringify!(read_link_policy_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_link_policy_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_link_policy_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_link_policy_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_policy_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_link_policy_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_policy_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_link_policy_rp>())).policy as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_policy_rp),
            "::",
            stringify!(policy)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_link_policy_cp {
    pub handle: u16,
    pub policy: u16,
}
#[test]
fn bindgen_test_layout_write_link_policy_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_link_policy_cp>(),
        4usize,
        concat!("Size of: ", stringify!(write_link_policy_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_link_policy_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_link_policy_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_link_policy_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_policy_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_link_policy_cp>())).policy as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_policy_cp),
            "::",
            stringify!(policy)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_link_policy_rp {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_write_link_policy_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_link_policy_rp>(),
        3usize,
        concat!("Size of: ", stringify!(write_link_policy_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_link_policy_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_link_policy_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_link_policy_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_policy_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_link_policy_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_policy_rp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sniff_subrating_cp {
    pub handle: u16,
    pub max_latency: u16,
    pub min_remote_timeout: u16,
    pub min_local_timeout: u16,
}
#[test]
fn bindgen_test_layout_sniff_subrating_cp() {
    assert_eq!(
        ::std::mem::size_of::<sniff_subrating_cp>(),
        8usize,
        concat!("Size of: ", stringify!(sniff_subrating_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<sniff_subrating_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(sniff_subrating_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sniff_subrating_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_subrating_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sniff_subrating_cp>())).max_latency as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_subrating_cp),
            "::",
            stringify!(max_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sniff_subrating_cp>())).min_remote_timeout as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_subrating_cp),
            "::",
            stringify!(min_remote_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sniff_subrating_cp>())).min_local_timeout as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sniff_subrating_cp),
            "::",
            stringify!(min_local_timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct set_event_mask_cp {
    pub mask: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_set_event_mask_cp() {
    assert_eq!(
        ::std::mem::size_of::<set_event_mask_cp>(),
        8usize,
        concat!("Size of: ", stringify!(set_event_mask_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<set_event_mask_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(set_event_mask_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_event_mask_cp>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(set_event_mask_cp),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct set_event_flt_cp {
    pub flt_type: u8,
    pub cond_type: u8,
    pub condition: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_set_event_flt_cp() {
    assert_eq!(
        ::std::mem::size_of::<set_event_flt_cp>(),
        2usize,
        concat!("Size of: ", stringify!(set_event_flt_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<set_event_flt_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(set_event_flt_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_event_flt_cp>())).flt_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(set_event_flt_cp),
            "::",
            stringify!(flt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_event_flt_cp>())).cond_type as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(set_event_flt_cp),
            "::",
            stringify!(cond_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_event_flt_cp>())).condition as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(set_event_flt_cp),
            "::",
            stringify!(condition)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_pin_type_rp {
    pub status: u8,
    pub pin_type: u8,
}
#[test]
fn bindgen_test_layout_read_pin_type_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_pin_type_rp>(),
        2usize,
        concat!("Size of: ", stringify!(read_pin_type_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_pin_type_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_pin_type_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_pin_type_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_pin_type_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_pin_type_rp>())).pin_type as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_pin_type_rp),
            "::",
            stringify!(pin_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_pin_type_cp {
    pub pin_type: u8,
}
#[test]
fn bindgen_test_layout_write_pin_type_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_pin_type_cp>(),
        1usize,
        concat!("Size of: ", stringify!(write_pin_type_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_pin_type_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_pin_type_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_pin_type_cp>())).pin_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_pin_type_cp),
            "::",
            stringify!(pin_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_stored_link_key_cp {
    pub bdaddr: bdaddr_t,
    pub read_all: u8,
}
#[test]
fn bindgen_test_layout_read_stored_link_key_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_stored_link_key_cp>(),
        7usize,
        concat!("Size of: ", stringify!(read_stored_link_key_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_stored_link_key_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_stored_link_key_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_stored_link_key_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_stored_link_key_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_stored_link_key_cp>())).read_all as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(read_stored_link_key_cp),
            "::",
            stringify!(read_all)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_stored_link_key_rp {
    pub status: u8,
    pub max_keys: u16,
    pub num_keys: u16,
}
#[test]
fn bindgen_test_layout_read_stored_link_key_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_stored_link_key_rp>(),
        5usize,
        concat!("Size of: ", stringify!(read_stored_link_key_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_stored_link_key_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_stored_link_key_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_stored_link_key_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_stored_link_key_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_stored_link_key_rp>())).max_keys as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_stored_link_key_rp),
            "::",
            stringify!(max_keys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_stored_link_key_rp>())).num_keys as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_stored_link_key_rp),
            "::",
            stringify!(num_keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_stored_link_key_cp {
    pub num_keys: u8,
}
#[test]
fn bindgen_test_layout_write_stored_link_key_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_stored_link_key_cp>(),
        1usize,
        concat!("Size of: ", stringify!(write_stored_link_key_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_stored_link_key_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_stored_link_key_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_stored_link_key_cp>())).num_keys as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_stored_link_key_cp),
            "::",
            stringify!(num_keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_stored_link_key_rp {
    pub status: u8,
    pub num_keys: u8,
}
#[test]
fn bindgen_test_layout_write_stored_link_key_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_stored_link_key_rp>(),
        2usize,
        concat!("Size of: ", stringify!(write_stored_link_key_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_stored_link_key_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_stored_link_key_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_stored_link_key_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_stored_link_key_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_stored_link_key_rp>())).num_keys as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_stored_link_key_rp),
            "::",
            stringify!(num_keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct delete_stored_link_key_cp {
    pub bdaddr: bdaddr_t,
    pub delete_all: u8,
}
#[test]
fn bindgen_test_layout_delete_stored_link_key_cp() {
    assert_eq!(
        ::std::mem::size_of::<delete_stored_link_key_cp>(),
        7usize,
        concat!("Size of: ", stringify!(delete_stored_link_key_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<delete_stored_link_key_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(delete_stored_link_key_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<delete_stored_link_key_cp>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(delete_stored_link_key_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<delete_stored_link_key_cp>())).delete_all as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(delete_stored_link_key_cp),
            "::",
            stringify!(delete_all)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct delete_stored_link_key_rp {
    pub status: u8,
    pub num_keys: u16,
}
#[test]
fn bindgen_test_layout_delete_stored_link_key_rp() {
    assert_eq!(
        ::std::mem::size_of::<delete_stored_link_key_rp>(),
        3usize,
        concat!("Size of: ", stringify!(delete_stored_link_key_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<delete_stored_link_key_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(delete_stored_link_key_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<delete_stored_link_key_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(delete_stored_link_key_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<delete_stored_link_key_rp>())).num_keys as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(delete_stored_link_key_rp),
            "::",
            stringify!(num_keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct change_local_name_cp {
    pub name: [u8; 248usize],
}
#[test]
fn bindgen_test_layout_change_local_name_cp() {
    assert_eq!(
        ::std::mem::size_of::<change_local_name_cp>(),
        248usize,
        concat!("Size of: ", stringify!(change_local_name_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<change_local_name_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(change_local_name_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<change_local_name_cp>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(change_local_name_cp),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct read_local_name_rp {
    pub status: u8,
    pub name: [u8; 248usize],
}
#[test]
fn bindgen_test_layout_read_local_name_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_name_rp>(),
        249usize,
        concat!("Size of: ", stringify!(read_local_name_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_name_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_name_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_name_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_name_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_name_rp>())).name as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_name_rp),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_conn_accept_timeout_rp {
    pub status: u8,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_read_conn_accept_timeout_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_conn_accept_timeout_rp>(),
        3usize,
        concat!("Size of: ", stringify!(read_conn_accept_timeout_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_conn_accept_timeout_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_conn_accept_timeout_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_conn_accept_timeout_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_conn_accept_timeout_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_conn_accept_timeout_rp>())).timeout as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_conn_accept_timeout_rp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_conn_accept_timeout_cp {
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_write_conn_accept_timeout_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_conn_accept_timeout_cp>(),
        2usize,
        concat!("Size of: ", stringify!(write_conn_accept_timeout_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_conn_accept_timeout_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_conn_accept_timeout_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_conn_accept_timeout_cp>())).timeout as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_conn_accept_timeout_cp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_page_timeout_rp {
    pub status: u8,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_read_page_timeout_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_page_timeout_rp>(),
        3usize,
        concat!("Size of: ", stringify!(read_page_timeout_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_page_timeout_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_page_timeout_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_page_timeout_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_page_timeout_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_page_timeout_rp>())).timeout as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_page_timeout_rp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_page_timeout_cp {
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_write_page_timeout_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_page_timeout_cp>(),
        2usize,
        concat!("Size of: ", stringify!(write_page_timeout_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_page_timeout_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_page_timeout_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_page_timeout_cp>())).timeout as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_page_timeout_cp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_scan_enable_rp {
    pub status: u8,
    pub enable: u8,
}
#[test]
fn bindgen_test_layout_read_scan_enable_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_scan_enable_rp>(),
        2usize,
        concat!("Size of: ", stringify!(read_scan_enable_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_scan_enable_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_scan_enable_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_scan_enable_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_scan_enable_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_scan_enable_rp>())).enable as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_scan_enable_rp),
            "::",
            stringify!(enable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_page_activity_rp {
    pub status: u8,
    pub interval: u16,
    pub window: u16,
}
#[test]
fn bindgen_test_layout_read_page_activity_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_page_activity_rp>(),
        5usize,
        concat!("Size of: ", stringify!(read_page_activity_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_page_activity_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_page_activity_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_page_activity_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_page_activity_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_page_activity_rp>())).interval as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_page_activity_rp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_page_activity_rp>())).window as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_page_activity_rp),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_page_activity_cp {
    pub interval: u16,
    pub window: u16,
}
#[test]
fn bindgen_test_layout_write_page_activity_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_page_activity_cp>(),
        4usize,
        concat!("Size of: ", stringify!(write_page_activity_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_page_activity_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_page_activity_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_page_activity_cp>())).interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_page_activity_cp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_page_activity_cp>())).window as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(write_page_activity_cp),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_inq_activity_rp {
    pub status: u8,
    pub interval: u16,
    pub window: u16,
}
#[test]
fn bindgen_test_layout_read_inq_activity_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_inq_activity_rp>(),
        5usize,
        concat!("Size of: ", stringify!(read_inq_activity_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_inq_activity_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_inq_activity_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_inq_activity_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inq_activity_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_inq_activity_rp>())).interval as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inq_activity_rp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_inq_activity_rp>())).window as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inq_activity_rp),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_inq_activity_cp {
    pub interval: u16,
    pub window: u16,
}
#[test]
fn bindgen_test_layout_write_inq_activity_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_inq_activity_cp>(),
        4usize,
        concat!("Size of: ", stringify!(write_inq_activity_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_inq_activity_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_inq_activity_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_inq_activity_cp>())).interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inq_activity_cp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_inq_activity_cp>())).window as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inq_activity_cp),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_class_of_dev_rp {
    pub status: u8,
    pub dev_class: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_read_class_of_dev_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_class_of_dev_rp>(),
        4usize,
        concat!("Size of: ", stringify!(read_class_of_dev_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_class_of_dev_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_class_of_dev_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_class_of_dev_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_class_of_dev_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_class_of_dev_rp>())).dev_class as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_class_of_dev_rp),
            "::",
            stringify!(dev_class)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_class_of_dev_cp {
    pub dev_class: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_write_class_of_dev_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_class_of_dev_cp>(),
        3usize,
        concat!("Size of: ", stringify!(write_class_of_dev_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_class_of_dev_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_class_of_dev_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_class_of_dev_cp>())).dev_class as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_class_of_dev_cp),
            "::",
            stringify!(dev_class)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_voice_setting_rp {
    pub status: u8,
    pub voice_setting: u16,
}
#[test]
fn bindgen_test_layout_read_voice_setting_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_voice_setting_rp>(),
        3usize,
        concat!("Size of: ", stringify!(read_voice_setting_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_voice_setting_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_voice_setting_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_voice_setting_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_voice_setting_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_voice_setting_rp>())).voice_setting as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_voice_setting_rp),
            "::",
            stringify!(voice_setting)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_voice_setting_cp {
    pub voice_setting: u16,
}
#[test]
fn bindgen_test_layout_write_voice_setting_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_voice_setting_cp>(),
        2usize,
        concat!("Size of: ", stringify!(write_voice_setting_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_voice_setting_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_voice_setting_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_voice_setting_cp>())).voice_setting as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_voice_setting_cp),
            "::",
            stringify!(voice_setting)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_transmit_power_level_cp {
    pub handle: u16,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_read_transmit_power_level_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_transmit_power_level_cp>(),
        3usize,
        concat!("Size of: ", stringify!(read_transmit_power_level_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_transmit_power_level_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_transmit_power_level_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_transmit_power_level_cp>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_transmit_power_level_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_transmit_power_level_cp>())).type_ as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_transmit_power_level_cp),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_transmit_power_level_rp {
    pub status: u8,
    pub handle: u16,
    pub level: i8,
}
#[test]
fn bindgen_test_layout_read_transmit_power_level_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_transmit_power_level_rp>(),
        4usize,
        concat!("Size of: ", stringify!(read_transmit_power_level_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_transmit_power_level_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_transmit_power_level_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_transmit_power_level_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_transmit_power_level_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_transmit_power_level_rp>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_transmit_power_level_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_transmit_power_level_rp>())).level as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_transmit_power_level_rp),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct host_buffer_size_cp {
    pub acl_mtu: u16,
    pub sco_mtu: u8,
    pub acl_max_pkt: u16,
    pub sco_max_pkt: u16,
}
#[test]
fn bindgen_test_layout_host_buffer_size_cp() {
    assert_eq!(
        ::std::mem::size_of::<host_buffer_size_cp>(),
        7usize,
        concat!("Size of: ", stringify!(host_buffer_size_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<host_buffer_size_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(host_buffer_size_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_buffer_size_cp>())).acl_mtu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_buffer_size_cp),
            "::",
            stringify!(acl_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_buffer_size_cp>())).sco_mtu as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(host_buffer_size_cp),
            "::",
            stringify!(sco_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_buffer_size_cp>())).acl_max_pkt as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(host_buffer_size_cp),
            "::",
            stringify!(acl_max_pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_buffer_size_cp>())).sco_max_pkt as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(host_buffer_size_cp),
            "::",
            stringify!(sco_max_pkt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct host_num_comp_pkts_cp {
    pub num_hndl: u8,
}
#[test]
fn bindgen_test_layout_host_num_comp_pkts_cp() {
    assert_eq!(
        ::std::mem::size_of::<host_num_comp_pkts_cp>(),
        1usize,
        concat!("Size of: ", stringify!(host_num_comp_pkts_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<host_num_comp_pkts_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(host_num_comp_pkts_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_num_comp_pkts_cp>())).num_hndl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_num_comp_pkts_cp),
            "::",
            stringify!(num_hndl)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_link_supervision_timeout_rp {
    pub status: u8,
    pub handle: u16,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_read_link_supervision_timeout_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_link_supervision_timeout_rp>(),
        5usize,
        concat!("Size of: ", stringify!(read_link_supervision_timeout_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_link_supervision_timeout_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(read_link_supervision_timeout_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_link_supervision_timeout_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_supervision_timeout_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_link_supervision_timeout_rp>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_supervision_timeout_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_link_supervision_timeout_rp>())).timeout as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_supervision_timeout_rp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_link_supervision_timeout_cp {
    pub handle: u16,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_write_link_supervision_timeout_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_link_supervision_timeout_cp>(),
        4usize,
        concat!("Size of: ", stringify!(write_link_supervision_timeout_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_link_supervision_timeout_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_link_supervision_timeout_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_link_supervision_timeout_cp>())).handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_supervision_timeout_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_link_supervision_timeout_cp>())).timeout as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_supervision_timeout_cp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_link_supervision_timeout_rp {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_write_link_supervision_timeout_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_link_supervision_timeout_rp>(),
        3usize,
        concat!("Size of: ", stringify!(write_link_supervision_timeout_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_link_supervision_timeout_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_link_supervision_timeout_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_link_supervision_timeout_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_supervision_timeout_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_link_supervision_timeout_rp>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_link_supervision_timeout_rp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct read_current_iac_lap_rp {
    pub status: u8,
    pub num_current_iac: u8,
    pub lap: [[u8; 3usize]; 64usize],
}
#[test]
fn bindgen_test_layout_read_current_iac_lap_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_current_iac_lap_rp>(),
        194usize,
        concat!("Size of: ", stringify!(read_current_iac_lap_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_current_iac_lap_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_current_iac_lap_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_current_iac_lap_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_current_iac_lap_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_current_iac_lap_rp>())).num_current_iac as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_current_iac_lap_rp),
            "::",
            stringify!(num_current_iac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_current_iac_lap_rp>())).lap as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_current_iac_lap_rp),
            "::",
            stringify!(lap)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct write_current_iac_lap_cp {
    pub num_current_iac: u8,
    pub lap: [[u8; 3usize]; 64usize],
}
#[test]
fn bindgen_test_layout_write_current_iac_lap_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_current_iac_lap_cp>(),
        193usize,
        concat!("Size of: ", stringify!(write_current_iac_lap_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_current_iac_lap_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_current_iac_lap_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_current_iac_lap_cp>())).num_current_iac as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_current_iac_lap_cp),
            "::",
            stringify!(num_current_iac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_current_iac_lap_cp>())).lap as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_current_iac_lap_cp),
            "::",
            stringify!(lap)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct set_afh_classification_cp {
    pub map: [u8; 10usize],
}
#[test]
fn bindgen_test_layout_set_afh_classification_cp() {
    assert_eq!(
        ::std::mem::size_of::<set_afh_classification_cp>(),
        10usize,
        concat!("Size of: ", stringify!(set_afh_classification_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<set_afh_classification_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(set_afh_classification_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<set_afh_classification_cp>())).map as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(set_afh_classification_cp),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct set_afh_classification_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_set_afh_classification_rp() {
    assert_eq!(
        ::std::mem::size_of::<set_afh_classification_rp>(),
        1usize,
        concat!("Size of: ", stringify!(set_afh_classification_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<set_afh_classification_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(set_afh_classification_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<set_afh_classification_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(set_afh_classification_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_inquiry_scan_type_rp {
    pub status: u8,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_read_inquiry_scan_type_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_inquiry_scan_type_rp>(),
        2usize,
        concat!("Size of: ", stringify!(read_inquiry_scan_type_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_inquiry_scan_type_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_inquiry_scan_type_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_inquiry_scan_type_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inquiry_scan_type_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_inquiry_scan_type_rp>())).type_ as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inquiry_scan_type_rp),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_inquiry_scan_type_cp {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_write_inquiry_scan_type_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_inquiry_scan_type_cp>(),
        1usize,
        concat!("Size of: ", stringify!(write_inquiry_scan_type_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_inquiry_scan_type_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_inquiry_scan_type_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_inquiry_scan_type_cp>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inquiry_scan_type_cp),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_inquiry_scan_type_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_inquiry_scan_type_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_inquiry_scan_type_rp>(),
        1usize,
        concat!("Size of: ", stringify!(write_inquiry_scan_type_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_inquiry_scan_type_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_inquiry_scan_type_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_inquiry_scan_type_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inquiry_scan_type_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_inquiry_mode_rp {
    pub status: u8,
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_read_inquiry_mode_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_inquiry_mode_rp>(),
        2usize,
        concat!("Size of: ", stringify!(read_inquiry_mode_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_inquiry_mode_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_inquiry_mode_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_inquiry_mode_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inquiry_mode_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_inquiry_mode_rp>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inquiry_mode_rp),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_inquiry_mode_cp {
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_write_inquiry_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_inquiry_mode_cp>(),
        1usize,
        concat!("Size of: ", stringify!(write_inquiry_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_inquiry_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_inquiry_mode_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_inquiry_mode_cp>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inquiry_mode_cp),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_inquiry_mode_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_inquiry_mode_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_inquiry_mode_rp>(),
        1usize,
        concat!("Size of: ", stringify!(write_inquiry_mode_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_inquiry_mode_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_inquiry_mode_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_inquiry_mode_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inquiry_mode_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_afh_mode_rp {
    pub status: u8,
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_read_afh_mode_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_afh_mode_rp>(),
        2usize,
        concat!("Size of: ", stringify!(read_afh_mode_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_afh_mode_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_afh_mode_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_afh_mode_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_afh_mode_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_afh_mode_rp>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_afh_mode_rp),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_afh_mode_cp {
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_write_afh_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_afh_mode_cp>(),
        1usize,
        concat!("Size of: ", stringify!(write_afh_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_afh_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_afh_mode_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_afh_mode_cp>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_afh_mode_cp),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_afh_mode_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_afh_mode_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_afh_mode_rp>(),
        1usize,
        concat!("Size of: ", stringify!(write_afh_mode_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_afh_mode_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_afh_mode_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_afh_mode_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_afh_mode_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct read_ext_inquiry_response_rp {
    pub status: u8,
    pub fec: u8,
    pub data: [u8; 240usize],
}
#[test]
fn bindgen_test_layout_read_ext_inquiry_response_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_ext_inquiry_response_rp>(),
        242usize,
        concat!("Size of: ", stringify!(read_ext_inquiry_response_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_ext_inquiry_response_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_ext_inquiry_response_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_ext_inquiry_response_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_ext_inquiry_response_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_ext_inquiry_response_rp>())).fec as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_ext_inquiry_response_rp),
            "::",
            stringify!(fec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_ext_inquiry_response_rp>())).data as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_ext_inquiry_response_rp),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct write_ext_inquiry_response_cp {
    pub fec: u8,
    pub data: [u8; 240usize],
}
#[test]
fn bindgen_test_layout_write_ext_inquiry_response_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_ext_inquiry_response_cp>(),
        241usize,
        concat!("Size of: ", stringify!(write_ext_inquiry_response_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_ext_inquiry_response_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_ext_inquiry_response_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_ext_inquiry_response_cp>())).fec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_ext_inquiry_response_cp),
            "::",
            stringify!(fec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_ext_inquiry_response_cp>())).data as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_ext_inquiry_response_cp),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_ext_inquiry_response_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_ext_inquiry_response_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_ext_inquiry_response_rp>(),
        1usize,
        concat!("Size of: ", stringify!(write_ext_inquiry_response_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_ext_inquiry_response_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_ext_inquiry_response_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_ext_inquiry_response_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_ext_inquiry_response_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct refresh_encryption_key_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_refresh_encryption_key_cp() {
    assert_eq!(
        ::std::mem::size_of::<refresh_encryption_key_cp>(),
        2usize,
        concat!("Size of: ", stringify!(refresh_encryption_key_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<refresh_encryption_key_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(refresh_encryption_key_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<refresh_encryption_key_cp>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(refresh_encryption_key_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct refresh_encryption_key_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_refresh_encryption_key_rp() {
    assert_eq!(
        ::std::mem::size_of::<refresh_encryption_key_rp>(),
        1usize,
        concat!("Size of: ", stringify!(refresh_encryption_key_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<refresh_encryption_key_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(refresh_encryption_key_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<refresh_encryption_key_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(refresh_encryption_key_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_simple_pairing_mode_rp {
    pub status: u8,
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_read_simple_pairing_mode_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_simple_pairing_mode_rp>(),
        2usize,
        concat!("Size of: ", stringify!(read_simple_pairing_mode_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_simple_pairing_mode_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_simple_pairing_mode_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_simple_pairing_mode_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_simple_pairing_mode_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_simple_pairing_mode_rp>())).mode as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_simple_pairing_mode_rp),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_simple_pairing_mode_cp {
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_write_simple_pairing_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_simple_pairing_mode_cp>(),
        1usize,
        concat!("Size of: ", stringify!(write_simple_pairing_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_simple_pairing_mode_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_simple_pairing_mode_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_simple_pairing_mode_cp>())).mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_simple_pairing_mode_cp),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_simple_pairing_mode_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_simple_pairing_mode_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_simple_pairing_mode_rp>(),
        1usize,
        concat!("Size of: ", stringify!(write_simple_pairing_mode_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_simple_pairing_mode_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_simple_pairing_mode_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_simple_pairing_mode_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_simple_pairing_mode_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_local_oob_data_rp {
    pub status: u8,
    pub hash: [u8; 16usize],
    pub randomizer: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_read_local_oob_data_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_oob_data_rp>(),
        33usize,
        concat!("Size of: ", stringify!(read_local_oob_data_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_oob_data_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_oob_data_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_oob_data_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_oob_data_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_oob_data_rp>())).hash as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_oob_data_rp),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_oob_data_rp>())).randomizer as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_oob_data_rp),
            "::",
            stringify!(randomizer)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_inq_response_tx_power_level_rp {
    pub status: u8,
    pub level: i8,
}
#[test]
fn bindgen_test_layout_read_inq_response_tx_power_level_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_inq_response_tx_power_level_rp>(),
        2usize,
        concat!("Size of: ", stringify!(read_inq_response_tx_power_level_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_inq_response_tx_power_level_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(read_inq_response_tx_power_level_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_inq_response_tx_power_level_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inq_response_tx_power_level_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_inq_response_tx_power_level_rp>())).level as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inq_response_tx_power_level_rp),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_inquiry_transmit_power_level_rp {
    pub status: u8,
    pub level: i8,
}
#[test]
fn bindgen_test_layout_read_inquiry_transmit_power_level_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_inquiry_transmit_power_level_rp>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(read_inquiry_transmit_power_level_rp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<read_inquiry_transmit_power_level_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(read_inquiry_transmit_power_level_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_inquiry_transmit_power_level_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inquiry_transmit_power_level_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_inquiry_transmit_power_level_rp>())).level as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_inquiry_transmit_power_level_rp),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_inquiry_transmit_power_level_cp {
    pub level: i8,
}
#[test]
fn bindgen_test_layout_write_inquiry_transmit_power_level_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_inquiry_transmit_power_level_cp>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(write_inquiry_transmit_power_level_cp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<write_inquiry_transmit_power_level_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_inquiry_transmit_power_level_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_inquiry_transmit_power_level_cp>())).level as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inquiry_transmit_power_level_cp),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_inquiry_transmit_power_level_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_inquiry_transmit_power_level_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_inquiry_transmit_power_level_rp>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(write_inquiry_transmit_power_level_rp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<write_inquiry_transmit_power_level_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_inquiry_transmit_power_level_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_inquiry_transmit_power_level_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_inquiry_transmit_power_level_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_default_error_data_reporting_rp {
    pub status: u8,
    pub reporting: u8,
}
#[test]
fn bindgen_test_layout_read_default_error_data_reporting_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_default_error_data_reporting_rp>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(read_default_error_data_reporting_rp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<read_default_error_data_reporting_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(read_default_error_data_reporting_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_default_error_data_reporting_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_default_error_data_reporting_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_default_error_data_reporting_rp>())).reporting as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_default_error_data_reporting_rp),
            "::",
            stringify!(reporting)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_default_error_data_reporting_cp {
    pub reporting: u8,
}
#[test]
fn bindgen_test_layout_write_default_error_data_reporting_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_default_error_data_reporting_cp>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(write_default_error_data_reporting_cp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<write_default_error_data_reporting_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_default_error_data_reporting_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_default_error_data_reporting_cp>())).reporting as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_default_error_data_reporting_cp),
            "::",
            stringify!(reporting)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_default_error_data_reporting_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_default_error_data_reporting_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_default_error_data_reporting_rp>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(write_default_error_data_reporting_rp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<write_default_error_data_reporting_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_default_error_data_reporting_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_default_error_data_reporting_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_default_error_data_reporting_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct enhanced_flush_cp {
    pub handle: u16,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_enhanced_flush_cp() {
    assert_eq!(
        ::std::mem::size_of::<enhanced_flush_cp>(),
        3usize,
        concat!("Size of: ", stringify!(enhanced_flush_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<enhanced_flush_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(enhanced_flush_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enhanced_flush_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(enhanced_flush_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enhanced_flush_cp>())).type_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(enhanced_flush_cp),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct send_keypress_notify_cp {
    pub bdaddr: bdaddr_t,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_send_keypress_notify_cp() {
    assert_eq!(
        ::std::mem::size_of::<send_keypress_notify_cp>(),
        7usize,
        concat!("Size of: ", stringify!(send_keypress_notify_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<send_keypress_notify_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(send_keypress_notify_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<send_keypress_notify_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(send_keypress_notify_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<send_keypress_notify_cp>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(send_keypress_notify_cp),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct send_keypress_notify_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_send_keypress_notify_rp() {
    assert_eq!(
        ::std::mem::size_of::<send_keypress_notify_rp>(),
        1usize,
        concat!("Size of: ", stringify!(send_keypress_notify_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<send_keypress_notify_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(send_keypress_notify_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<send_keypress_notify_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(send_keypress_notify_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_log_link_accept_timeout_rp {
    pub status: u8,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_read_log_link_accept_timeout_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_log_link_accept_timeout_rp>(),
        3usize,
        concat!("Size of: ", stringify!(read_log_link_accept_timeout_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_log_link_accept_timeout_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_log_link_accept_timeout_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_log_link_accept_timeout_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_log_link_accept_timeout_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_log_link_accept_timeout_rp>())).timeout as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_log_link_accept_timeout_rp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_log_link_accept_timeout_cp {
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_write_log_link_accept_timeout_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_log_link_accept_timeout_cp>(),
        2usize,
        concat!("Size of: ", stringify!(write_log_link_accept_timeout_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_log_link_accept_timeout_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_log_link_accept_timeout_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_log_link_accept_timeout_cp>())).timeout as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_log_link_accept_timeout_cp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_enhanced_transmit_power_level_rp {
    pub status: u8,
    pub handle: u16,
    pub level_gfsk: i8,
    pub level_dqpsk: i8,
    pub level_8dpsk: i8,
}
#[test]
fn bindgen_test_layout_read_enhanced_transmit_power_level_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_enhanced_transmit_power_level_rp>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(read_enhanced_transmit_power_level_rp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<read_enhanced_transmit_power_level_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(read_enhanced_transmit_power_level_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_enhanced_transmit_power_level_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_enhanced_transmit_power_level_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_enhanced_transmit_power_level_rp>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_enhanced_transmit_power_level_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_enhanced_transmit_power_level_rp>())).level_gfsk as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_enhanced_transmit_power_level_rp),
            "::",
            stringify!(level_gfsk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_enhanced_transmit_power_level_rp>())).level_dqpsk
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(read_enhanced_transmit_power_level_rp),
            "::",
            stringify!(level_dqpsk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_enhanced_transmit_power_level_rp>())).level_8dpsk
                as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(read_enhanced_transmit_power_level_rp),
            "::",
            stringify!(level_8dpsk)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_best_effort_flush_timeout_rp {
    pub status: u8,
    pub timeout: u32,
}
#[test]
fn bindgen_test_layout_read_best_effort_flush_timeout_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_best_effort_flush_timeout_rp>(),
        5usize,
        concat!("Size of: ", stringify!(read_best_effort_flush_timeout_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_best_effort_flush_timeout_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(read_best_effort_flush_timeout_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_best_effort_flush_timeout_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_best_effort_flush_timeout_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_best_effort_flush_timeout_rp>())).timeout as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_best_effort_flush_timeout_rp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_best_effort_flush_timeout_cp {
    pub handle: u16,
    pub timeout: u32,
}
#[test]
fn bindgen_test_layout_write_best_effort_flush_timeout_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_best_effort_flush_timeout_cp>(),
        6usize,
        concat!("Size of: ", stringify!(write_best_effort_flush_timeout_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_best_effort_flush_timeout_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_best_effort_flush_timeout_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_best_effort_flush_timeout_cp>())).handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_best_effort_flush_timeout_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_best_effort_flush_timeout_cp>())).timeout as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(write_best_effort_flush_timeout_cp),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_best_effort_flush_timeout_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_best_effort_flush_timeout_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_best_effort_flush_timeout_rp>(),
        1usize,
        concat!("Size of: ", stringify!(write_best_effort_flush_timeout_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_best_effort_flush_timeout_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_best_effort_flush_timeout_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_best_effort_flush_timeout_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_best_effort_flush_timeout_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_le_host_supported_rp {
    pub status: u8,
    pub le: u8,
    pub simul: u8,
}
#[test]
fn bindgen_test_layout_read_le_host_supported_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_le_host_supported_rp>(),
        3usize,
        concat!("Size of: ", stringify!(read_le_host_supported_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_le_host_supported_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_le_host_supported_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_le_host_supported_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_le_host_supported_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_le_host_supported_rp>())).le as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_le_host_supported_rp),
            "::",
            stringify!(le)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_le_host_supported_rp>())).simul as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_le_host_supported_rp),
            "::",
            stringify!(simul)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_le_host_supported_cp {
    pub le: u8,
    pub simul: u8,
}
#[test]
fn bindgen_test_layout_write_le_host_supported_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_le_host_supported_cp>(),
        2usize,
        concat!("Size of: ", stringify!(write_le_host_supported_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_le_host_supported_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_le_host_supported_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<write_le_host_supported_cp>())).le as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_le_host_supported_cp),
            "::",
            stringify!(le)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_le_host_supported_cp>())).simul as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_le_host_supported_cp),
            "::",
            stringify!(simul)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_local_version_rp {
    pub status: u8,
    pub hci_ver: u8,
    pub hci_rev: u16,
    pub lmp_ver: u8,
    pub manufacturer: u16,
    pub lmp_subver: u16,
}
#[test]
fn bindgen_test_layout_read_local_version_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_version_rp>(),
        9usize,
        concat!("Size of: ", stringify!(read_local_version_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_version_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_version_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_version_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_version_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_version_rp>())).hci_ver as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_version_rp),
            "::",
            stringify!(hci_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_version_rp>())).hci_rev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_version_rp),
            "::",
            stringify!(hci_rev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_version_rp>())).lmp_ver as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_version_rp),
            "::",
            stringify!(lmp_ver)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_version_rp>())).manufacturer as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_version_rp),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_version_rp>())).lmp_subver as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_version_rp),
            "::",
            stringify!(lmp_subver)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct read_local_commands_rp {
    pub status: u8,
    pub commands: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_read_local_commands_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_commands_rp>(),
        65usize,
        concat!("Size of: ", stringify!(read_local_commands_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_commands_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_commands_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_commands_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_commands_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_commands_rp>())).commands as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_commands_rp),
            "::",
            stringify!(commands)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_local_features_rp {
    pub status: u8,
    pub features: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_read_local_features_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_features_rp>(),
        9usize,
        concat!("Size of: ", stringify!(read_local_features_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_features_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_features_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_features_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_features_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_features_rp>())).features as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_features_rp),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_local_ext_features_cp {
    pub page_num: u8,
}
#[test]
fn bindgen_test_layout_read_local_ext_features_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_ext_features_cp>(),
        1usize,
        concat!("Size of: ", stringify!(read_local_ext_features_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_ext_features_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_ext_features_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_ext_features_cp>())).page_num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_ext_features_cp),
            "::",
            stringify!(page_num)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_local_ext_features_rp {
    pub status: u8,
    pub page_num: u8,
    pub max_page_num: u8,
    pub features: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_read_local_ext_features_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_ext_features_rp>(),
        11usize,
        concat!("Size of: ", stringify!(read_local_ext_features_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_ext_features_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_ext_features_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_ext_features_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_ext_features_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_ext_features_rp>())).page_num as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_ext_features_rp),
            "::",
            stringify!(page_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_ext_features_rp>())).max_page_num as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_ext_features_rp),
            "::",
            stringify!(max_page_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_ext_features_rp>())).features as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_ext_features_rp),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_buffer_size_rp {
    pub status: u8,
    pub acl_mtu: u16,
    pub sco_mtu: u8,
    pub acl_max_pkt: u16,
    pub sco_max_pkt: u16,
}
#[test]
fn bindgen_test_layout_read_buffer_size_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_buffer_size_rp>(),
        8usize,
        concat!("Size of: ", stringify!(read_buffer_size_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_buffer_size_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_buffer_size_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_buffer_size_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_buffer_size_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_buffer_size_rp>())).acl_mtu as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_buffer_size_rp),
            "::",
            stringify!(acl_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_buffer_size_rp>())).sco_mtu as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_buffer_size_rp),
            "::",
            stringify!(sco_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_buffer_size_rp>())).acl_max_pkt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(read_buffer_size_rp),
            "::",
            stringify!(acl_max_pkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_buffer_size_rp>())).sco_max_pkt as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(read_buffer_size_rp),
            "::",
            stringify!(sco_max_pkt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_bd_addr_rp {
    pub status: u8,
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_read_bd_addr_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_bd_addr_rp>(),
        7usize,
        concat!("Size of: ", stringify!(read_bd_addr_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_bd_addr_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_bd_addr_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_bd_addr_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_bd_addr_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_bd_addr_rp>())).bdaddr as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_bd_addr_rp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_data_block_size_rp {
    pub status: u8,
    pub max_acl_len: u16,
    pub data_block_len: u16,
    pub num_blocks: u16,
}
#[test]
fn bindgen_test_layout_read_data_block_size_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_data_block_size_rp>(),
        7usize,
        concat!("Size of: ", stringify!(read_data_block_size_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_data_block_size_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_data_block_size_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_data_block_size_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_data_block_size_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_data_block_size_rp>())).max_acl_len as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_data_block_size_rp),
            "::",
            stringify!(max_acl_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_data_block_size_rp>())).data_block_len as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_data_block_size_rp),
            "::",
            stringify!(data_block_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_data_block_size_rp>())).num_blocks as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(read_data_block_size_rp),
            "::",
            stringify!(num_blocks)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_failed_contact_counter_rp {
    pub status: u8,
    pub handle: u16,
    pub counter: u8,
}
#[test]
fn bindgen_test_layout_read_failed_contact_counter_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_failed_contact_counter_rp>(),
        4usize,
        concat!("Size of: ", stringify!(read_failed_contact_counter_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_failed_contact_counter_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_failed_contact_counter_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_failed_contact_counter_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_failed_contact_counter_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_failed_contact_counter_rp>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_failed_contact_counter_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_failed_contact_counter_rp>())).counter as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_failed_contact_counter_rp),
            "::",
            stringify!(counter)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct reset_failed_contact_counter_rp {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_reset_failed_contact_counter_rp() {
    assert_eq!(
        ::std::mem::size_of::<reset_failed_contact_counter_rp>(),
        3usize,
        concat!("Size of: ", stringify!(reset_failed_contact_counter_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<reset_failed_contact_counter_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(reset_failed_contact_counter_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<reset_failed_contact_counter_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reset_failed_contact_counter_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<reset_failed_contact_counter_rp>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(reset_failed_contact_counter_rp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_link_quality_rp {
    pub status: u8,
    pub handle: u16,
    pub link_quality: u8,
}
#[test]
fn bindgen_test_layout_read_link_quality_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_link_quality_rp>(),
        4usize,
        concat!("Size of: ", stringify!(read_link_quality_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_link_quality_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_link_quality_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_link_quality_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_quality_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_link_quality_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_quality_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_link_quality_rp>())).link_quality as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_link_quality_rp),
            "::",
            stringify!(link_quality)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_rssi_rp {
    pub status: u8,
    pub handle: u16,
    pub rssi: i8,
}
#[test]
fn bindgen_test_layout_read_rssi_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_rssi_rp>(),
        4usize,
        concat!("Size of: ", stringify!(read_rssi_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_rssi_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_rssi_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_rssi_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_rssi_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_rssi_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_rssi_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_rssi_rp>())).rssi as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_rssi_rp),
            "::",
            stringify!(rssi)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_afh_map_rp {
    pub status: u8,
    pub handle: u16,
    pub mode: u8,
    pub map: [u8; 10usize],
}
#[test]
fn bindgen_test_layout_read_afh_map_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_afh_map_rp>(),
        14usize,
        concat!("Size of: ", stringify!(read_afh_map_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_afh_map_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_afh_map_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_afh_map_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_afh_map_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_afh_map_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_afh_map_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_afh_map_rp>())).mode as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_afh_map_rp),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_afh_map_rp>())).map as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(read_afh_map_rp),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_clock_cp {
    pub handle: u16,
    pub which_clock: u8,
}
#[test]
fn bindgen_test_layout_read_clock_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_clock_cp>(),
        3usize,
        concat!("Size of: ", stringify!(read_clock_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_clock_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_clock_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_clock_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_clock_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_clock_cp>())).which_clock as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_clock_cp),
            "::",
            stringify!(which_clock)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_clock_rp {
    pub status: u8,
    pub handle: u16,
    pub clock: u32,
    pub accuracy: u16,
}
#[test]
fn bindgen_test_layout_read_clock_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_clock_rp>(),
        9usize,
        concat!("Size of: ", stringify!(read_clock_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_clock_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_clock_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_clock_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_clock_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_clock_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_clock_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_clock_rp>())).clock as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_clock_rp),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_clock_rp>())).accuracy as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(read_clock_rp),
            "::",
            stringify!(accuracy)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_local_amp_info_rp {
    pub status: u8,
    pub amp_status: u8,
    pub total_bandwidth: u32,
    pub max_guaranteed_bandwidth: u32,
    pub min_latency: u32,
    pub max_pdu_size: u32,
    pub controller_type: u8,
    pub pal_caps: u16,
    pub max_amp_assoc_length: u16,
    pub max_flush_timeout: u32,
    pub best_effort_flush_timeout: u32,
}
#[test]
fn bindgen_test_layout_read_local_amp_info_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_amp_info_rp>(),
        31usize,
        concat!("Size of: ", stringify!(read_local_amp_info_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_amp_info_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_amp_info_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_amp_info_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).amp_status as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(amp_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).total_bandwidth as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(total_bandwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).max_guaranteed_bandwidth as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(max_guaranteed_bandwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).min_latency as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(min_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).max_pdu_size as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(max_pdu_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).controller_type as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(controller_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_amp_info_rp>())).pal_caps as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(pal_caps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).max_amp_assoc_length as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(max_amp_assoc_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).max_flush_timeout as *const _
                as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(max_flush_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_info_rp>())).best_effort_flush_timeout as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_info_rp),
            "::",
            stringify!(best_effort_flush_timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct read_local_amp_assoc_cp {
    pub handle: u8,
    pub length_so_far: u16,
    pub assoc_length: u16,
}
#[test]
fn bindgen_test_layout_read_local_amp_assoc_cp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_amp_assoc_cp>(),
        5usize,
        concat!("Size of: ", stringify!(read_local_amp_assoc_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_amp_assoc_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_amp_assoc_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_amp_assoc_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_assoc_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_assoc_cp>())).length_so_far as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_assoc_cp),
            "::",
            stringify!(length_so_far)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_assoc_cp>())).assoc_length as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_assoc_cp),
            "::",
            stringify!(assoc_length)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct read_local_amp_assoc_rp {
    pub status: u8,
    pub handle: u8,
    pub length: u16,
    pub fragment: [u8; 248usize],
}
#[test]
fn bindgen_test_layout_read_local_amp_assoc_rp() {
    assert_eq!(
        ::std::mem::size_of::<read_local_amp_assoc_rp>(),
        252usize,
        concat!("Size of: ", stringify!(read_local_amp_assoc_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<read_local_amp_assoc_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(read_local_amp_assoc_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_amp_assoc_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_assoc_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_amp_assoc_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_assoc_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_local_amp_assoc_rp>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_assoc_rp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<read_local_amp_assoc_rp>())).fragment as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(read_local_amp_assoc_rp),
            "::",
            stringify!(fragment)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct write_remote_amp_assoc_cp {
    pub handle: u8,
    pub length_so_far: u16,
    pub remaining_length: u16,
    pub fragment: [u8; 248usize],
}
#[test]
fn bindgen_test_layout_write_remote_amp_assoc_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_remote_amp_assoc_cp>(),
        253usize,
        concat!("Size of: ", stringify!(write_remote_amp_assoc_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_remote_amp_assoc_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_remote_amp_assoc_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_remote_amp_assoc_cp>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_remote_amp_assoc_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_remote_amp_assoc_cp>())).length_so_far as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_remote_amp_assoc_cp),
            "::",
            stringify!(length_so_far)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_remote_amp_assoc_cp>())).remaining_length as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(write_remote_amp_assoc_cp),
            "::",
            stringify!(remaining_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_remote_amp_assoc_cp>())).fragment as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(write_remote_amp_assoc_cp),
            "::",
            stringify!(fragment)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_remote_amp_assoc_rp {
    pub status: u8,
    pub handle: u8,
}
#[test]
fn bindgen_test_layout_write_remote_amp_assoc_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_remote_amp_assoc_rp>(),
        2usize,
        concat!("Size of: ", stringify!(write_remote_amp_assoc_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_remote_amp_assoc_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(write_remote_amp_assoc_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_remote_amp_assoc_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_remote_amp_assoc_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_remote_amp_assoc_rp>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(write_remote_amp_assoc_rp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_simple_pairing_debug_mode_cp {
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_write_simple_pairing_debug_mode_cp() {
    assert_eq!(
        ::std::mem::size_of::<write_simple_pairing_debug_mode_cp>(),
        1usize,
        concat!("Size of: ", stringify!(write_simple_pairing_debug_mode_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_simple_pairing_debug_mode_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_simple_pairing_debug_mode_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_simple_pairing_debug_mode_cp>())).mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_simple_pairing_debug_mode_cp),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct write_simple_pairing_debug_mode_rp {
    pub status: u8,
}
#[test]
fn bindgen_test_layout_write_simple_pairing_debug_mode_rp() {
    assert_eq!(
        ::std::mem::size_of::<write_simple_pairing_debug_mode_rp>(),
        1usize,
        concat!("Size of: ", stringify!(write_simple_pairing_debug_mode_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<write_simple_pairing_debug_mode_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(write_simple_pairing_debug_mode_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<write_simple_pairing_debug_mode_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(write_simple_pairing_debug_mode_rp),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_event_mask_cp {
    pub mask: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_le_set_event_mask_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_event_mask_cp>(),
        8usize,
        concat!("Size of: ", stringify!(le_set_event_mask_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_event_mask_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_set_event_mask_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_set_event_mask_cp>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_event_mask_cp),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_buffer_size_rp {
    pub status: u8,
    pub pkt_len: u16,
    pub max_pkt: u8,
}
#[test]
fn bindgen_test_layout_le_read_buffer_size_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_buffer_size_rp>(),
        4usize,
        concat!("Size of: ", stringify!(le_read_buffer_size_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_buffer_size_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_read_buffer_size_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_buffer_size_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_buffer_size_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_buffer_size_rp>())).pkt_len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_buffer_size_rp),
            "::",
            stringify!(pkt_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_buffer_size_rp>())).max_pkt as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_buffer_size_rp),
            "::",
            stringify!(max_pkt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_local_supported_features_rp {
    pub status: u8,
    pub features: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_le_read_local_supported_features_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_local_supported_features_rp>(),
        9usize,
        concat!("Size of: ", stringify!(le_read_local_supported_features_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_local_supported_features_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(le_read_local_supported_features_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_local_supported_features_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_local_supported_features_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_local_supported_features_rp>())).features as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_local_supported_features_rp),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_random_address_cp {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_le_set_random_address_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_random_address_cp>(),
        6usize,
        concat!("Size of: ", stringify!(le_set_random_address_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_random_address_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_set_random_address_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_set_random_address_cp>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_random_address_cp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_advertising_parameters_cp {
    pub min_interval: u16,
    pub max_interval: u16,
    pub advtype: u8,
    pub own_bdaddr_type: u8,
    pub direct_bdaddr_type: u8,
    pub direct_bdaddr: bdaddr_t,
    pub chan_map: u8,
    pub filter: u8,
}
#[test]
fn bindgen_test_layout_le_set_advertising_parameters_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_advertising_parameters_cp>(),
        15usize,
        concat!("Size of: ", stringify!(le_set_advertising_parameters_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_advertising_parameters_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(le_set_advertising_parameters_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).min_interval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(min_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).max_interval as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).advtype as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(advtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).own_bdaddr_type as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(own_bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).direct_bdaddr_type
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(direct_bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).direct_bdaddr as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(direct_bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).chan_map as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(chan_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_parameters_cp>())).filter as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_parameters_cp),
            "::",
            stringify!(filter)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_advertising_channel_tx_power_rp {
    pub status: u8,
    pub level: i8,
}
#[test]
fn bindgen_test_layout_le_read_advertising_channel_tx_power_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_advertising_channel_tx_power_rp>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(le_read_advertising_channel_tx_power_rp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_advertising_channel_tx_power_rp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(le_read_advertising_channel_tx_power_rp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_advertising_channel_tx_power_rp>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_advertising_channel_tx_power_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_advertising_channel_tx_power_rp>())).level as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_advertising_channel_tx_power_rp),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_advertising_data_cp {
    pub length: u8,
    pub data: [u8; 31usize],
}
#[test]
fn bindgen_test_layout_le_set_advertising_data_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_advertising_data_cp>(),
        32usize,
        concat!("Size of: ", stringify!(le_set_advertising_data_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_advertising_data_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_set_advertising_data_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertising_data_cp>())).length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_data_cp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_set_advertising_data_cp>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertising_data_cp),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_scan_response_data_cp {
    pub length: u8,
    pub data: [u8; 31usize],
}
#[test]
fn bindgen_test_layout_le_set_scan_response_data_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_scan_response_data_cp>(),
        32usize,
        concat!("Size of: ", stringify!(le_set_scan_response_data_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_scan_response_data_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_set_scan_response_data_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_scan_response_data_cp>())).length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_response_data_cp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_scan_response_data_cp>())).data as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_response_data_cp),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_advertise_enable_cp {
    pub enable: u8,
}
#[test]
fn bindgen_test_layout_le_set_advertise_enable_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_advertise_enable_cp>(),
        1usize,
        concat!("Size of: ", stringify!(le_set_advertise_enable_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_advertise_enable_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_set_advertise_enable_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_advertise_enable_cp>())).enable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_advertise_enable_cp),
            "::",
            stringify!(enable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_scan_parameters_cp {
    pub type_: u8,
    pub interval: u16,
    pub window: u16,
    pub own_bdaddr_type: u8,
    pub filter: u8,
}
#[test]
fn bindgen_test_layout_le_set_scan_parameters_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_scan_parameters_cp>(),
        7usize,
        concat!("Size of: ", stringify!(le_set_scan_parameters_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_scan_parameters_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_set_scan_parameters_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_set_scan_parameters_cp>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_parameters_cp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_scan_parameters_cp>())).interval as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_parameters_cp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_scan_parameters_cp>())).window as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_parameters_cp),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_scan_parameters_cp>())).own_bdaddr_type as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_parameters_cp),
            "::",
            stringify!(own_bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_scan_parameters_cp>())).filter as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_parameters_cp),
            "::",
            stringify!(filter)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_scan_enable_cp {
    pub enable: u8,
    pub filter_dup: u8,
}
#[test]
fn bindgen_test_layout_le_set_scan_enable_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_scan_enable_cp>(),
        2usize,
        concat!("Size of: ", stringify!(le_set_scan_enable_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_scan_enable_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_set_scan_enable_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_set_scan_enable_cp>())).enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_enable_cp),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_scan_enable_cp>())).filter_dup as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_scan_enable_cp),
            "::",
            stringify!(filter_dup)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_create_connection_cp {
    pub interval: u16,
    pub window: u16,
    pub initiator_filter: u8,
    pub peer_bdaddr_type: u8,
    pub peer_bdaddr: bdaddr_t,
    pub own_bdaddr_type: u8,
    pub min_interval: u16,
    pub max_interval: u16,
    pub latency: u16,
    pub supervision_timeout: u16,
    pub min_ce_length: u16,
    pub max_ce_length: u16,
}
#[test]
fn bindgen_test_layout_le_create_connection_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_create_connection_cp>(),
        25usize,
        concat!("Size of: ", stringify!(le_create_connection_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_create_connection_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_create_connection_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).interval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_create_connection_cp>())).window as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).initiator_filter as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(initiator_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).peer_bdaddr_type as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(peer_bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).peer_bdaddr as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(peer_bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).own_bdaddr_type as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(own_bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).min_interval as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(min_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).max_interval as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_create_connection_cp>())).latency as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).supervision_timeout as *const _
                as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(supervision_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).min_ce_length as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(min_ce_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_create_connection_cp>())).max_ce_length as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(le_create_connection_cp),
            "::",
            stringify!(max_ce_length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_white_list_size_rp {
    pub status: u8,
    pub size: u8,
}
#[test]
fn bindgen_test_layout_le_read_white_list_size_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_white_list_size_rp>(),
        2usize,
        concat!("Size of: ", stringify!(le_read_white_list_size_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_white_list_size_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_read_white_list_size_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_white_list_size_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_white_list_size_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_white_list_size_rp>())).size as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_white_list_size_rp),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_add_device_to_white_list_cp {
    pub bdaddr_type: u8,
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_le_add_device_to_white_list_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_add_device_to_white_list_cp>(),
        7usize,
        concat!("Size of: ", stringify!(le_add_device_to_white_list_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_add_device_to_white_list_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_add_device_to_white_list_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_add_device_to_white_list_cp>())).bdaddr_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_add_device_to_white_list_cp),
            "::",
            stringify!(bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_add_device_to_white_list_cp>())).bdaddr as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_add_device_to_white_list_cp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_remove_device_from_white_list_cp {
    pub bdaddr_type: u8,
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_le_remove_device_from_white_list_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_remove_device_from_white_list_cp>(),
        7usize,
        concat!("Size of: ", stringify!(le_remove_device_from_white_list_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_remove_device_from_white_list_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(le_remove_device_from_white_list_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_remove_device_from_white_list_cp>())).bdaddr_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_remove_device_from_white_list_cp),
            "::",
            stringify!(bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_remove_device_from_white_list_cp>())).bdaddr as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_remove_device_from_white_list_cp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_connection_update_cp {
    pub handle: u16,
    pub min_interval: u16,
    pub max_interval: u16,
    pub latency: u16,
    pub supervision_timeout: u16,
    pub min_ce_length: u16,
    pub max_ce_length: u16,
}
#[test]
fn bindgen_test_layout_le_connection_update_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_connection_update_cp>(),
        14usize,
        concat!("Size of: ", stringify!(le_connection_update_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_connection_update_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_connection_update_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_connection_update_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_connection_update_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_connection_update_cp>())).min_interval as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(le_connection_update_cp),
            "::",
            stringify!(min_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_connection_update_cp>())).max_interval as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(le_connection_update_cp),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_connection_update_cp>())).latency as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(le_connection_update_cp),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_connection_update_cp>())).supervision_timeout as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(le_connection_update_cp),
            "::",
            stringify!(supervision_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_connection_update_cp>())).min_ce_length as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(le_connection_update_cp),
            "::",
            stringify!(min_ce_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_connection_update_cp>())).max_ce_length as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(le_connection_update_cp),
            "::",
            stringify!(max_ce_length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_host_channel_classification_cp {
    pub map: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_le_set_host_channel_classification_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_host_channel_classification_cp>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(le_set_host_channel_classification_cp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_host_channel_classification_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(le_set_host_channel_classification_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_host_channel_classification_cp>())).map as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_host_channel_classification_cp),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_channel_map_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_le_read_channel_map_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_channel_map_cp>(),
        2usize,
        concat!("Size of: ", stringify!(le_read_channel_map_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_channel_map_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_read_channel_map_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_channel_map_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_channel_map_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_channel_map_rp {
    pub status: u8,
    pub handle: u16,
    pub map: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_le_read_channel_map_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_channel_map_rp>(),
        8usize,
        concat!("Size of: ", stringify!(le_read_channel_map_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_channel_map_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_read_channel_map_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_channel_map_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_channel_map_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_channel_map_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_channel_map_rp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_read_channel_map_rp>())).map as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_channel_map_rp),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_remote_used_features_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_le_read_remote_used_features_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_remote_used_features_cp>(),
        2usize,
        concat!("Size of: ", stringify!(le_read_remote_used_features_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_remote_used_features_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_read_remote_used_features_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_remote_used_features_cp>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_remote_used_features_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_encrypt_cp {
    pub key: [u8; 16usize],
    pub plaintext: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_le_encrypt_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_encrypt_cp>(),
        32usize,
        concat!("Size of: ", stringify!(le_encrypt_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_encrypt_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_encrypt_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_encrypt_cp>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_encrypt_cp),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_encrypt_cp>())).plaintext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(le_encrypt_cp),
            "::",
            stringify!(plaintext)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_encrypt_rp {
    pub status: u8,
    pub data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_le_encrypt_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_encrypt_rp>(),
        17usize,
        concat!("Size of: ", stringify!(le_encrypt_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_encrypt_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_encrypt_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_encrypt_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_encrypt_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_encrypt_rp>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_encrypt_rp),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_rand_rp {
    pub status: u8,
    pub random: u64,
}
#[test]
fn bindgen_test_layout_le_rand_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_rand_rp>(),
        9usize,
        concat!("Size of: ", stringify!(le_rand_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_rand_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_rand_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_rand_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_rand_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_rand_rp>())).random as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_rand_rp),
            "::",
            stringify!(random)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_start_encryption_cp {
    pub handle: u16,
    pub random: u64,
    pub diversifier: u16,
    pub key: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_le_start_encryption_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_start_encryption_cp>(),
        28usize,
        concat!("Size of: ", stringify!(le_start_encryption_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_start_encryption_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_start_encryption_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_start_encryption_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_start_encryption_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_start_encryption_cp>())).random as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(le_start_encryption_cp),
            "::",
            stringify!(random)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_start_encryption_cp>())).diversifier as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(le_start_encryption_cp),
            "::",
            stringify!(diversifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_start_encryption_cp>())).key as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(le_start_encryption_cp),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_ltk_reply_cp {
    pub handle: u16,
    pub key: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_le_ltk_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_ltk_reply_cp>(),
        18usize,
        concat!("Size of: ", stringify!(le_ltk_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_ltk_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_ltk_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_ltk_reply_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_ltk_reply_cp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_ltk_reply_cp>())).key as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(le_ltk_reply_cp),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_ltk_reply_rp {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_le_ltk_reply_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_ltk_reply_rp>(),
        3usize,
        concat!("Size of: ", stringify!(le_ltk_reply_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_ltk_reply_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_ltk_reply_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_ltk_reply_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_ltk_reply_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_ltk_reply_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_ltk_reply_rp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_ltk_neg_reply_cp {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_le_ltk_neg_reply_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_ltk_neg_reply_cp>(),
        2usize,
        concat!("Size of: ", stringify!(le_ltk_neg_reply_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_ltk_neg_reply_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_ltk_neg_reply_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_ltk_neg_reply_cp>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_ltk_neg_reply_cp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_ltk_neg_reply_rp {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_le_ltk_neg_reply_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_ltk_neg_reply_rp>(),
        3usize,
        concat!("Size of: ", stringify!(le_ltk_neg_reply_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_ltk_neg_reply_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_ltk_neg_reply_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_ltk_neg_reply_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_ltk_neg_reply_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_ltk_neg_reply_rp>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_ltk_neg_reply_rp),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_supported_states_rp {
    pub status: u8,
    pub states: u64,
}
#[test]
fn bindgen_test_layout_le_read_supported_states_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_supported_states_rp>(),
        9usize,
        concat!("Size of: ", stringify!(le_read_supported_states_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_supported_states_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_read_supported_states_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_supported_states_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_supported_states_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_supported_states_rp>())).states as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_supported_states_rp),
            "::",
            stringify!(states)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_receiver_test_cp {
    pub frequency: u8,
}
#[test]
fn bindgen_test_layout_le_receiver_test_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_receiver_test_cp>(),
        1usize,
        concat!("Size of: ", stringify!(le_receiver_test_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_receiver_test_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_receiver_test_cp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_receiver_test_cp>())).frequency as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_receiver_test_cp),
            "::",
            stringify!(frequency)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_transmitter_test_cp {
    pub frequency: u8,
    pub length: u8,
    pub payload: u8,
}
#[test]
fn bindgen_test_layout_le_transmitter_test_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_transmitter_test_cp>(),
        3usize,
        concat!("Size of: ", stringify!(le_transmitter_test_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_transmitter_test_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_transmitter_test_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_transmitter_test_cp>())).frequency as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_transmitter_test_cp),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_transmitter_test_cp>())).length as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_transmitter_test_cp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_transmitter_test_cp>())).payload as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(le_transmitter_test_cp),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_test_end_rp {
    pub status: u8,
    pub num_pkts: u16,
}
#[test]
fn bindgen_test_layout_le_test_end_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_test_end_rp>(),
        3usize,
        concat!("Size of: ", stringify!(le_test_end_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_test_end_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_test_end_rp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_test_end_rp>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_test_end_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_test_end_rp>())).num_pkts as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_test_end_rp),
            "::",
            stringify!(num_pkts)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_add_device_to_resolv_list_cp {
    pub bdaddr_type: u8,
    pub bdaddr: bdaddr_t,
    pub peer_irk: [u8; 16usize],
    pub local_irk: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_le_add_device_to_resolv_list_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_add_device_to_resolv_list_cp>(),
        39usize,
        concat!("Size of: ", stringify!(le_add_device_to_resolv_list_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_add_device_to_resolv_list_cp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_add_device_to_resolv_list_cp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_add_device_to_resolv_list_cp>())).bdaddr_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_add_device_to_resolv_list_cp),
            "::",
            stringify!(bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_add_device_to_resolv_list_cp>())).bdaddr as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_add_device_to_resolv_list_cp),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_add_device_to_resolv_list_cp>())).peer_irk as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(le_add_device_to_resolv_list_cp),
            "::",
            stringify!(peer_irk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_add_device_to_resolv_list_cp>())).local_irk as *const _
                as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(le_add_device_to_resolv_list_cp),
            "::",
            stringify!(local_irk)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_remove_device_from_resolv_list_cp {
    pub bdaddr_type: u8,
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_le_remove_device_from_resolv_list_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_remove_device_from_resolv_list_cp>(),
        7usize,
        concat!(
            "Size of: ",
            stringify!(le_remove_device_from_resolv_list_cp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<le_remove_device_from_resolv_list_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(le_remove_device_from_resolv_list_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_remove_device_from_resolv_list_cp>())).bdaddr_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_remove_device_from_resolv_list_cp),
            "::",
            stringify!(bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_remove_device_from_resolv_list_cp>())).bdaddr as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_remove_device_from_resolv_list_cp),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_read_resolv_list_size_rp {
    pub status: u8,
    pub size: u8,
}
#[test]
fn bindgen_test_layout_le_read_resolv_list_size_rp() {
    assert_eq!(
        ::std::mem::size_of::<le_read_resolv_list_size_rp>(),
        2usize,
        concat!("Size of: ", stringify!(le_read_resolv_list_size_rp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_read_resolv_list_size_rp>(),
        1usize,
        concat!("Alignment of ", stringify!(le_read_resolv_list_size_rp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_resolv_list_size_rp>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_resolv_list_size_rp),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_read_resolv_list_size_rp>())).size as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_read_resolv_list_size_rp),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct le_set_address_resolution_enable_cp {
    pub enable: u8,
}
#[test]
fn bindgen_test_layout_le_set_address_resolution_enable_cp() {
    assert_eq!(
        ::std::mem::size_of::<le_set_address_resolution_enable_cp>(),
        1usize,
        concat!("Size of: ", stringify!(le_set_address_resolution_enable_cp))
    );
    assert_eq!(
        ::std::mem::align_of::<le_set_address_resolution_enable_cp>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(le_set_address_resolution_enable_cp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<le_set_address_resolution_enable_cp>())).enable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_set_address_resolution_enable_cp),
            "::",
            stringify!(enable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct inquiry_info {
    pub bdaddr: bdaddr_t,
    pub pscan_rep_mode: u8,
    pub pscan_period_mode: u8,
    pub pscan_mode: u8,
    pub dev_class: [u8; 3usize],
    pub clock_offset: u16,
}
#[test]
fn bindgen_test_layout_inquiry_info() {
    assert_eq!(
        ::std::mem::size_of::<inquiry_info>(),
        14usize,
        concat!("Size of: ", stringify!(inquiry_info))
    );
    assert_eq!(
        ::std::mem::align_of::<inquiry_info>(),
        1usize,
        concat!("Alignment of ", stringify!(inquiry_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info>())).pscan_rep_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info),
            "::",
            stringify!(pscan_rep_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info>())).pscan_period_mode as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info),
            "::",
            stringify!(pscan_period_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info>())).pscan_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info),
            "::",
            stringify!(pscan_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info>())).dev_class as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info),
            "::",
            stringify!(dev_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info>())).clock_offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info),
            "::",
            stringify!(clock_offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_conn_complete {
    pub status: u8,
    pub handle: u16,
    pub bdaddr: bdaddr_t,
    pub link_type: u8,
    pub encr_mode: u8,
}
#[test]
fn bindgen_test_layout_evt_conn_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_conn_complete>(),
        11usize,
        concat!("Size of: ", stringify!(evt_conn_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_conn_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_conn_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_complete>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_complete>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_complete>())).bdaddr as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_complete),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_complete>())).link_type as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_complete),
            "::",
            stringify!(link_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_complete>())).encr_mode as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_complete),
            "::",
            stringify!(encr_mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_conn_request {
    pub bdaddr: bdaddr_t,
    pub dev_class: [u8; 3usize],
    pub link_type: u8,
}
#[test]
fn bindgen_test_layout_evt_conn_request() {
    assert_eq!(
        ::std::mem::size_of::<evt_conn_request>(),
        10usize,
        concat!("Size of: ", stringify!(evt_conn_request))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_conn_request>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_conn_request))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_request>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_request),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_request>())).dev_class as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_request),
            "::",
            stringify!(dev_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_request>())).link_type as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_request),
            "::",
            stringify!(link_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_disconn_complete {
    pub status: u8,
    pub handle: u16,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_evt_disconn_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_disconn_complete>(),
        4usize,
        concat!("Size of: ", stringify!(evt_disconn_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_disconn_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_disconn_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_disconn_complete>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_disconn_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_disconn_complete>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_disconn_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_disconn_complete>())).reason as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_disconn_complete),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_auth_complete {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_evt_auth_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_auth_complete>(),
        3usize,
        concat!("Size of: ", stringify!(evt_auth_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_auth_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_auth_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_auth_complete>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_auth_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_auth_complete>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_auth_complete),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct evt_remote_name_req_complete {
    pub status: u8,
    pub bdaddr: bdaddr_t,
    pub name: [u8; 248usize],
}
#[test]
fn bindgen_test_layout_evt_remote_name_req_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_remote_name_req_complete>(),
        255usize,
        concat!("Size of: ", stringify!(evt_remote_name_req_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_remote_name_req_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_remote_name_req_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_remote_name_req_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_remote_name_req_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_remote_name_req_complete>())).bdaddr as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_remote_name_req_complete),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_remote_name_req_complete>())).name as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_remote_name_req_complete),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_encrypt_change {
    pub status: u8,
    pub handle: u16,
    pub encrypt: u8,
}
#[test]
fn bindgen_test_layout_evt_encrypt_change() {
    assert_eq!(
        ::std::mem::size_of::<evt_encrypt_change>(),
        4usize,
        concat!("Size of: ", stringify!(evt_encrypt_change))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_encrypt_change>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_encrypt_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_encrypt_change>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_encrypt_change),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_encrypt_change>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_encrypt_change),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_encrypt_change>())).encrypt as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_encrypt_change),
            "::",
            stringify!(encrypt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_change_conn_link_key_complete {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_evt_change_conn_link_key_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_change_conn_link_key_complete>(),
        3usize,
        concat!("Size of: ", stringify!(evt_change_conn_link_key_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_change_conn_link_key_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_change_conn_link_key_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_change_conn_link_key_complete>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_change_conn_link_key_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_change_conn_link_key_complete>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_change_conn_link_key_complete),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_master_link_key_complete {
    pub status: u8,
    pub handle: u16,
    pub key_flag: u8,
}
#[test]
fn bindgen_test_layout_evt_master_link_key_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_master_link_key_complete>(),
        4usize,
        concat!("Size of: ", stringify!(evt_master_link_key_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_master_link_key_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_master_link_key_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_master_link_key_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_master_link_key_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_master_link_key_complete>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_master_link_key_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_master_link_key_complete>())).key_flag as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_master_link_key_complete),
            "::",
            stringify!(key_flag)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_read_remote_features_complete {
    pub status: u8,
    pub handle: u16,
    pub features: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_evt_read_remote_features_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_read_remote_features_complete>(),
        11usize,
        concat!("Size of: ", stringify!(evt_read_remote_features_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_read_remote_features_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_read_remote_features_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_features_complete>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_features_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_features_complete>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_features_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_features_complete>())).features as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_features_complete),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_read_remote_version_complete {
    pub status: u8,
    pub handle: u16,
    pub lmp_ver: u8,
    pub manufacturer: u16,
    pub lmp_subver: u16,
}
#[test]
fn bindgen_test_layout_evt_read_remote_version_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_read_remote_version_complete>(),
        8usize,
        concat!("Size of: ", stringify!(evt_read_remote_version_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_read_remote_version_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_read_remote_version_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_version_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_version_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_version_complete>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_version_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_version_complete>())).lmp_ver as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_version_complete),
            "::",
            stringify!(lmp_ver)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_version_complete>())).manufacturer as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_version_complete),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_version_complete>())).lmp_subver as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_version_complete),
            "::",
            stringify!(lmp_subver)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_qos_setup_complete {
    pub status: u8,
    pub handle: u16,
    pub flags: u8,
    pub qos: hci_qos,
}
#[test]
fn bindgen_test_layout_evt_qos_setup_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_qos_setup_complete>(),
        21usize,
        concat!("Size of: ", stringify!(evt_qos_setup_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_qos_setup_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_qos_setup_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_qos_setup_complete>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_qos_setup_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_qos_setup_complete>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_qos_setup_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_qos_setup_complete>())).flags as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_qos_setup_complete),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_qos_setup_complete>())).qos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_qos_setup_complete),
            "::",
            stringify!(qos)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_cmd_complete {
    pub ncmd: u8,
    pub opcode: u16,
}
#[test]
fn bindgen_test_layout_evt_cmd_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_cmd_complete>(),
        3usize,
        concat!("Size of: ", stringify!(evt_cmd_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_cmd_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_cmd_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_cmd_complete>())).ncmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_cmd_complete),
            "::",
            stringify!(ncmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_cmd_complete>())).opcode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_cmd_complete),
            "::",
            stringify!(opcode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_cmd_status {
    pub status: u8,
    pub ncmd: u8,
    pub opcode: u16,
}
#[test]
fn bindgen_test_layout_evt_cmd_status() {
    assert_eq!(
        ::std::mem::size_of::<evt_cmd_status>(),
        4usize,
        concat!("Size of: ", stringify!(evt_cmd_status))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_cmd_status>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_cmd_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_cmd_status>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_cmd_status),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_cmd_status>())).ncmd as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_cmd_status),
            "::",
            stringify!(ncmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_cmd_status>())).opcode as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_cmd_status),
            "::",
            stringify!(opcode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_hardware_error {
    pub code: u8,
}
#[test]
fn bindgen_test_layout_evt_hardware_error() {
    assert_eq!(
        ::std::mem::size_of::<evt_hardware_error>(),
        1usize,
        concat!("Size of: ", stringify!(evt_hardware_error))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_hardware_error>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_hardware_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_hardware_error>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_hardware_error),
            "::",
            stringify!(code)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_flush_occured {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_evt_flush_occured() {
    assert_eq!(
        ::std::mem::size_of::<evt_flush_occured>(),
        2usize,
        concat!("Size of: ", stringify!(evt_flush_occured))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_flush_occured>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_flush_occured))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_flush_occured>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flush_occured),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_role_change {
    pub status: u8,
    pub bdaddr: bdaddr_t,
    pub role: u8,
}
#[test]
fn bindgen_test_layout_evt_role_change() {
    assert_eq!(
        ::std::mem::size_of::<evt_role_change>(),
        8usize,
        concat!("Size of: ", stringify!(evt_role_change))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_role_change>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_role_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_role_change>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_role_change),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_role_change>())).bdaddr as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_role_change),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_role_change>())).role as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_role_change),
            "::",
            stringify!(role)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_num_comp_pkts {
    pub num_hndl: u8,
}
#[test]
fn bindgen_test_layout_evt_num_comp_pkts() {
    assert_eq!(
        ::std::mem::size_of::<evt_num_comp_pkts>(),
        1usize,
        concat!("Size of: ", stringify!(evt_num_comp_pkts))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_num_comp_pkts>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_num_comp_pkts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_num_comp_pkts>())).num_hndl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_num_comp_pkts),
            "::",
            stringify!(num_hndl)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_mode_change {
    pub status: u8,
    pub handle: u16,
    pub mode: u8,
    pub interval: u16,
}
#[test]
fn bindgen_test_layout_evt_mode_change() {
    assert_eq!(
        ::std::mem::size_of::<evt_mode_change>(),
        6usize,
        concat!("Size of: ", stringify!(evt_mode_change))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_mode_change>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_mode_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_mode_change>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_mode_change),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_mode_change>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_mode_change),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_mode_change>())).mode as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_mode_change),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_mode_change>())).interval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_mode_change),
            "::",
            stringify!(interval)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_return_link_keys {
    pub num_keys: u8,
}
#[test]
fn bindgen_test_layout_evt_return_link_keys() {
    assert_eq!(
        ::std::mem::size_of::<evt_return_link_keys>(),
        1usize,
        concat!("Size of: ", stringify!(evt_return_link_keys))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_return_link_keys>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_return_link_keys))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_return_link_keys>())).num_keys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_return_link_keys),
            "::",
            stringify!(num_keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_pin_code_req {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_evt_pin_code_req() {
    assert_eq!(
        ::std::mem::size_of::<evt_pin_code_req>(),
        6usize,
        concat!("Size of: ", stringify!(evt_pin_code_req))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_pin_code_req>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_pin_code_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_pin_code_req>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_pin_code_req),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_link_key_req {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_evt_link_key_req() {
    assert_eq!(
        ::std::mem::size_of::<evt_link_key_req>(),
        6usize,
        concat!("Size of: ", stringify!(evt_link_key_req))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_link_key_req>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_link_key_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_link_key_req>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_link_key_req),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_link_key_notify {
    pub bdaddr: bdaddr_t,
    pub link_key: [u8; 16usize],
    pub key_type: u8,
}
#[test]
fn bindgen_test_layout_evt_link_key_notify() {
    assert_eq!(
        ::std::mem::size_of::<evt_link_key_notify>(),
        23usize,
        concat!("Size of: ", stringify!(evt_link_key_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_link_key_notify>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_link_key_notify))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_link_key_notify>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_link_key_notify),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_link_key_notify>())).link_key as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_link_key_notify),
            "::",
            stringify!(link_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_link_key_notify>())).key_type as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_link_key_notify),
            "::",
            stringify!(key_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_data_buffer_overflow {
    pub link_type: u8,
}
#[test]
fn bindgen_test_layout_evt_data_buffer_overflow() {
    assert_eq!(
        ::std::mem::size_of::<evt_data_buffer_overflow>(),
        1usize,
        concat!("Size of: ", stringify!(evt_data_buffer_overflow))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_data_buffer_overflow>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_data_buffer_overflow))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_data_buffer_overflow>())).link_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_data_buffer_overflow),
            "::",
            stringify!(link_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_max_slots_change {
    pub handle: u16,
    pub max_slots: u8,
}
#[test]
fn bindgen_test_layout_evt_max_slots_change() {
    assert_eq!(
        ::std::mem::size_of::<evt_max_slots_change>(),
        3usize,
        concat!("Size of: ", stringify!(evt_max_slots_change))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_max_slots_change>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_max_slots_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_max_slots_change>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_max_slots_change),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_max_slots_change>())).max_slots as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_max_slots_change),
            "::",
            stringify!(max_slots)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_read_clock_offset_complete {
    pub status: u8,
    pub handle: u16,
    pub clock_offset: u16,
}
#[test]
fn bindgen_test_layout_evt_read_clock_offset_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_read_clock_offset_complete>(),
        5usize,
        concat!("Size of: ", stringify!(evt_read_clock_offset_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_read_clock_offset_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_read_clock_offset_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_clock_offset_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_clock_offset_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_clock_offset_complete>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_clock_offset_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_clock_offset_complete>())).clock_offset as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_clock_offset_complete),
            "::",
            stringify!(clock_offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_conn_ptype_changed {
    pub status: u8,
    pub handle: u16,
    pub ptype: u16,
}
#[test]
fn bindgen_test_layout_evt_conn_ptype_changed() {
    assert_eq!(
        ::std::mem::size_of::<evt_conn_ptype_changed>(),
        5usize,
        concat!("Size of: ", stringify!(evt_conn_ptype_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_conn_ptype_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_conn_ptype_changed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_ptype_changed>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_ptype_changed),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_ptype_changed>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_ptype_changed),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_conn_ptype_changed>())).ptype as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_conn_ptype_changed),
            "::",
            stringify!(ptype)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_qos_violation {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_evt_qos_violation() {
    assert_eq!(
        ::std::mem::size_of::<evt_qos_violation>(),
        2usize,
        concat!("Size of: ", stringify!(evt_qos_violation))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_qos_violation>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_qos_violation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_qos_violation>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_qos_violation),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_pscan_rep_mode_change {
    pub bdaddr: bdaddr_t,
    pub pscan_rep_mode: u8,
}
#[test]
fn bindgen_test_layout_evt_pscan_rep_mode_change() {
    assert_eq!(
        ::std::mem::size_of::<evt_pscan_rep_mode_change>(),
        7usize,
        concat!("Size of: ", stringify!(evt_pscan_rep_mode_change))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_pscan_rep_mode_change>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_pscan_rep_mode_change))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_pscan_rep_mode_change>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_pscan_rep_mode_change),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_pscan_rep_mode_change>())).pscan_rep_mode as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_pscan_rep_mode_change),
            "::",
            stringify!(pscan_rep_mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_flow_spec_complete {
    pub status: u8,
    pub handle: u16,
    pub flags: u8,
    pub direction: u8,
    pub qos: hci_qos,
}
#[test]
fn bindgen_test_layout_evt_flow_spec_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_flow_spec_complete>(),
        22usize,
        concat!("Size of: ", stringify!(evt_flow_spec_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_flow_spec_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_flow_spec_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_flow_spec_complete>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flow_spec_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_flow_spec_complete>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flow_spec_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_flow_spec_complete>())).flags as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flow_spec_complete),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_flow_spec_complete>())).direction as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flow_spec_complete),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_flow_spec_complete>())).qos as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flow_spec_complete),
            "::",
            stringify!(qos)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct inquiry_info_with_rssi {
    pub bdaddr: bdaddr_t,
    pub pscan_rep_mode: u8,
    pub pscan_period_mode: u8,
    pub dev_class: [u8; 3usize],
    pub clock_offset: u16,
    pub rssi: i8,
}
#[test]
fn bindgen_test_layout_inquiry_info_with_rssi() {
    assert_eq!(
        ::std::mem::size_of::<inquiry_info_with_rssi>(),
        14usize,
        concat!("Size of: ", stringify!(inquiry_info_with_rssi))
    );
    assert_eq!(
        ::std::mem::align_of::<inquiry_info_with_rssi>(),
        1usize,
        concat!("Alignment of ", stringify!(inquiry_info_with_rssi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info_with_rssi>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi>())).pscan_rep_mode as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi),
            "::",
            stringify!(pscan_rep_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi>())).pscan_period_mode as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi),
            "::",
            stringify!(pscan_period_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi>())).dev_class as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi),
            "::",
            stringify!(dev_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi>())).clock_offset as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi),
            "::",
            stringify!(clock_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inquiry_info_with_rssi>())).rssi as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi),
            "::",
            stringify!(rssi)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct inquiry_info_with_rssi_and_pscan_mode {
    pub bdaddr: bdaddr_t,
    pub pscan_rep_mode: u8,
    pub pscan_period_mode: u8,
    pub pscan_mode: u8,
    pub dev_class: [u8; 3usize],
    pub clock_offset: u16,
    pub rssi: i8,
}
#[test]
fn bindgen_test_layout_inquiry_info_with_rssi_and_pscan_mode() {
    assert_eq!(
        ::std::mem::size_of::<inquiry_info_with_rssi_and_pscan_mode>(),
        15usize,
        concat!(
            "Size of: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<inquiry_info_with_rssi_and_pscan_mode>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi_and_pscan_mode>())).bdaddr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi_and_pscan_mode>())).pscan_rep_mode
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode),
            "::",
            stringify!(pscan_rep_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi_and_pscan_mode>())).pscan_period_mode
                as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode),
            "::",
            stringify!(pscan_period_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi_and_pscan_mode>())).pscan_mode as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode),
            "::",
            stringify!(pscan_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi_and_pscan_mode>())).dev_class as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode),
            "::",
            stringify!(dev_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi_and_pscan_mode>())).clock_offset
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode),
            "::",
            stringify!(clock_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inquiry_info_with_rssi_and_pscan_mode>())).rssi as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(inquiry_info_with_rssi_and_pscan_mode),
            "::",
            stringify!(rssi)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_read_remote_ext_features_complete {
    pub status: u8,
    pub handle: u16,
    pub page_num: u8,
    pub max_page_num: u8,
    pub features: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_evt_read_remote_ext_features_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_read_remote_ext_features_complete>(),
        13usize,
        concat!(
            "Size of: ",
            stringify!(evt_read_remote_ext_features_complete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<evt_read_remote_ext_features_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_read_remote_ext_features_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_ext_features_complete>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_ext_features_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_ext_features_complete>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_ext_features_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_ext_features_complete>())).page_num as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_ext_features_complete),
            "::",
            stringify!(page_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_ext_features_complete>())).max_page_num
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_ext_features_complete),
            "::",
            stringify!(max_page_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_read_remote_ext_features_complete>())).features as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_read_remote_ext_features_complete),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_sync_conn_complete {
    pub status: u8,
    pub handle: u16,
    pub bdaddr: bdaddr_t,
    pub link_type: u8,
    pub trans_interval: u8,
    pub retrans_window: u8,
    pub rx_pkt_len: u16,
    pub tx_pkt_len: u16,
    pub air_mode: u8,
}
#[test]
fn bindgen_test_layout_evt_sync_conn_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_sync_conn_complete>(),
        17usize,
        concat!("Size of: ", stringify!(evt_sync_conn_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_sync_conn_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_sync_conn_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sync_conn_complete>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sync_conn_complete>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sync_conn_complete>())).bdaddr as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_complete>())).link_type as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(link_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_complete>())).trans_interval as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(trans_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_complete>())).retrans_window as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(retrans_window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_complete>())).rx_pkt_len as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(rx_pkt_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_complete>())).tx_pkt_len as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(tx_pkt_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sync_conn_complete>())).air_mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_complete),
            "::",
            stringify!(air_mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_sync_conn_changed {
    pub status: u8,
    pub handle: u16,
    pub trans_interval: u8,
    pub retrans_window: u8,
    pub rx_pkt_len: u16,
    pub tx_pkt_len: u16,
}
#[test]
fn bindgen_test_layout_evt_sync_conn_changed() {
    assert_eq!(
        ::std::mem::size_of::<evt_sync_conn_changed>(),
        9usize,
        concat!("Size of: ", stringify!(evt_sync_conn_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_sync_conn_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_sync_conn_changed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sync_conn_changed>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_changed),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sync_conn_changed>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_changed),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_changed>())).trans_interval as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_changed),
            "::",
            stringify!(trans_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_changed>())).retrans_window as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_changed),
            "::",
            stringify!(retrans_window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_changed>())).rx_pkt_len as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_changed),
            "::",
            stringify!(rx_pkt_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sync_conn_changed>())).tx_pkt_len as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sync_conn_changed),
            "::",
            stringify!(tx_pkt_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_sniff_subrating {
    pub status: u8,
    pub handle: u16,
    pub max_tx_latency: u16,
    pub max_rx_latency: u16,
    pub min_remote_timeout: u16,
    pub min_local_timeout: u16,
}
#[test]
fn bindgen_test_layout_evt_sniff_subrating() {
    assert_eq!(
        ::std::mem::size_of::<evt_sniff_subrating>(),
        11usize,
        concat!("Size of: ", stringify!(evt_sniff_subrating))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_sniff_subrating>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_sniff_subrating))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sniff_subrating>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sniff_subrating),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_sniff_subrating>())).handle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sniff_subrating),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sniff_subrating>())).max_tx_latency as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sniff_subrating),
            "::",
            stringify!(max_tx_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sniff_subrating>())).max_rx_latency as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sniff_subrating),
            "::",
            stringify!(max_rx_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sniff_subrating>())).min_remote_timeout as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sniff_subrating),
            "::",
            stringify!(min_remote_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_sniff_subrating>())).min_local_timeout as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_sniff_subrating),
            "::",
            stringify!(min_local_timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct extended_inquiry_info {
    pub bdaddr: bdaddr_t,
    pub pscan_rep_mode: u8,
    pub pscan_period_mode: u8,
    pub dev_class: [u8; 3usize],
    pub clock_offset: u16,
    pub rssi: i8,
    pub data: [u8; 240usize],
}
#[test]
fn bindgen_test_layout_extended_inquiry_info() {
    assert_eq!(
        ::std::mem::size_of::<extended_inquiry_info>(),
        254usize,
        concat!("Size of: ", stringify!(extended_inquiry_info))
    );
    assert_eq!(
        ::std::mem::align_of::<extended_inquiry_info>(),
        1usize,
        concat!("Alignment of ", stringify!(extended_inquiry_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<extended_inquiry_info>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(extended_inquiry_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<extended_inquiry_info>())).pscan_rep_mode as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(extended_inquiry_info),
            "::",
            stringify!(pscan_rep_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<extended_inquiry_info>())).pscan_period_mode as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(extended_inquiry_info),
            "::",
            stringify!(pscan_period_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<extended_inquiry_info>())).dev_class as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(extended_inquiry_info),
            "::",
            stringify!(dev_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<extended_inquiry_info>())).clock_offset as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(extended_inquiry_info),
            "::",
            stringify!(clock_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<extended_inquiry_info>())).rssi as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(extended_inquiry_info),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<extended_inquiry_info>())).data as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(extended_inquiry_info),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_encryption_key_refresh_complete {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_evt_encryption_key_refresh_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_encryption_key_refresh_complete>(),
        3usize,
        concat!("Size of: ", stringify!(evt_encryption_key_refresh_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_encryption_key_refresh_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_encryption_key_refresh_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_encryption_key_refresh_complete>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_encryption_key_refresh_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_encryption_key_refresh_complete>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_encryption_key_refresh_complete),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_io_capability_request {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_evt_io_capability_request() {
    assert_eq!(
        ::std::mem::size_of::<evt_io_capability_request>(),
        6usize,
        concat!("Size of: ", stringify!(evt_io_capability_request))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_io_capability_request>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_io_capability_request))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_io_capability_request>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_io_capability_request),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_io_capability_response {
    pub bdaddr: bdaddr_t,
    pub capability: u8,
    pub oob_data: u8,
    pub authentication: u8,
}
#[test]
fn bindgen_test_layout_evt_io_capability_response() {
    assert_eq!(
        ::std::mem::size_of::<evt_io_capability_response>(),
        9usize,
        concat!("Size of: ", stringify!(evt_io_capability_response))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_io_capability_response>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_io_capability_response))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_io_capability_response>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_io_capability_response),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_io_capability_response>())).capability as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_io_capability_response),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_io_capability_response>())).oob_data as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_io_capability_response),
            "::",
            stringify!(oob_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_io_capability_response>())).authentication as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_io_capability_response),
            "::",
            stringify!(authentication)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_user_confirm_request {
    pub bdaddr: bdaddr_t,
    pub passkey: u32,
}
#[test]
fn bindgen_test_layout_evt_user_confirm_request() {
    assert_eq!(
        ::std::mem::size_of::<evt_user_confirm_request>(),
        10usize,
        concat!("Size of: ", stringify!(evt_user_confirm_request))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_user_confirm_request>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_user_confirm_request))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_user_confirm_request>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_user_confirm_request),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_user_confirm_request>())).passkey as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_user_confirm_request),
            "::",
            stringify!(passkey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_user_passkey_request {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_evt_user_passkey_request() {
    assert_eq!(
        ::std::mem::size_of::<evt_user_passkey_request>(),
        6usize,
        concat!("Size of: ", stringify!(evt_user_passkey_request))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_user_passkey_request>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_user_passkey_request))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_user_passkey_request>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_user_passkey_request),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_remote_oob_data_request {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_evt_remote_oob_data_request() {
    assert_eq!(
        ::std::mem::size_of::<evt_remote_oob_data_request>(),
        6usize,
        concat!("Size of: ", stringify!(evt_remote_oob_data_request))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_remote_oob_data_request>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_remote_oob_data_request))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_remote_oob_data_request>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_remote_oob_data_request),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_simple_pairing_complete {
    pub status: u8,
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_evt_simple_pairing_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_simple_pairing_complete>(),
        7usize,
        concat!("Size of: ", stringify!(evt_simple_pairing_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_simple_pairing_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_simple_pairing_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_simple_pairing_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_simple_pairing_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_simple_pairing_complete>())).bdaddr as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_simple_pairing_complete),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_link_supervision_timeout_changed {
    pub handle: u16,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_evt_link_supervision_timeout_changed() {
    assert_eq!(
        ::std::mem::size_of::<evt_link_supervision_timeout_changed>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(evt_link_supervision_timeout_changed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<evt_link_supervision_timeout_changed>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_link_supervision_timeout_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_link_supervision_timeout_changed>())).handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_link_supervision_timeout_changed),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_link_supervision_timeout_changed>())).timeout as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_link_supervision_timeout_changed),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_enhanced_flush_complete {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_evt_enhanced_flush_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_enhanced_flush_complete>(),
        2usize,
        concat!("Size of: ", stringify!(evt_enhanced_flush_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_enhanced_flush_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_enhanced_flush_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_enhanced_flush_complete>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_enhanced_flush_complete),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_user_passkey_notify {
    pub bdaddr: bdaddr_t,
    pub passkey: u32,
}
#[test]
fn bindgen_test_layout_evt_user_passkey_notify() {
    assert_eq!(
        ::std::mem::size_of::<evt_user_passkey_notify>(),
        10usize,
        concat!("Size of: ", stringify!(evt_user_passkey_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_user_passkey_notify>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_user_passkey_notify))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_user_passkey_notify>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_user_passkey_notify),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_user_passkey_notify>())).passkey as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_user_passkey_notify),
            "::",
            stringify!(passkey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_keypress_notify {
    pub bdaddr: bdaddr_t,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_evt_keypress_notify() {
    assert_eq!(
        ::std::mem::size_of::<evt_keypress_notify>(),
        7usize,
        concat!("Size of: ", stringify!(evt_keypress_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_keypress_notify>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_keypress_notify))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_keypress_notify>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_keypress_notify),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_keypress_notify>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_keypress_notify),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_remote_host_features_notify {
    pub bdaddr: bdaddr_t,
    pub features: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_evt_remote_host_features_notify() {
    assert_eq!(
        ::std::mem::size_of::<evt_remote_host_features_notify>(),
        14usize,
        concat!("Size of: ", stringify!(evt_remote_host_features_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_remote_host_features_notify>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_remote_host_features_notify))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_remote_host_features_notify>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_remote_host_features_notify),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_remote_host_features_notify>())).features as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_remote_host_features_notify),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct evt_le_meta_event {
    pub subevent: u8,
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_evt_le_meta_event() {
    assert_eq!(
        ::std::mem::size_of::<evt_le_meta_event>(),
        1usize,
        concat!("Size of: ", stringify!(evt_le_meta_event))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_le_meta_event>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_le_meta_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_le_meta_event>())).subevent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_meta_event),
            "::",
            stringify!(subevent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_le_meta_event>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_meta_event),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_le_connection_complete {
    pub status: u8,
    pub handle: u16,
    pub role: u8,
    pub peer_bdaddr_type: u8,
    pub peer_bdaddr: bdaddr_t,
    pub interval: u16,
    pub latency: u16,
    pub supervision_timeout: u16,
    pub master_clock_accuracy: u8,
}
#[test]
fn bindgen_test_layout_evt_le_connection_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_le_connection_complete>(),
        18usize,
        concat!("Size of: ", stringify!(evt_le_connection_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_le_connection_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_le_connection_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_le_connection_complete>())).role as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).peer_bdaddr_type as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(peer_bdaddr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).peer_bdaddr as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(peer_bdaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).interval as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).latency as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).supervision_timeout as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(supervision_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_complete>())).master_clock_accuracy as *const _
                as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_complete),
            "::",
            stringify!(master_clock_accuracy)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct le_advertising_info {
    pub evt_type: u8,
    pub bdaddr_type: u8,
    pub bdaddr: bdaddr_t,
    pub length: u8,
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_le_advertising_info() {
    assert_eq!(
        ::std::mem::size_of::<le_advertising_info>(),
        9usize,
        concat!("Size of: ", stringify!(le_advertising_info))
    );
    assert_eq!(
        ::std::mem::align_of::<le_advertising_info>(),
        1usize,
        concat!("Alignment of ", stringify!(le_advertising_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_advertising_info>())).evt_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(le_advertising_info),
            "::",
            stringify!(evt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_advertising_info>())).bdaddr_type as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(le_advertising_info),
            "::",
            stringify!(bdaddr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_advertising_info>())).bdaddr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(le_advertising_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_advertising_info>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(le_advertising_info),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<le_advertising_info>())).data as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(le_advertising_info),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_le_connection_update_complete {
    pub status: u8,
    pub handle: u16,
    pub interval: u16,
    pub latency: u16,
    pub supervision_timeout: u16,
}
#[test]
fn bindgen_test_layout_evt_le_connection_update_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_le_connection_update_complete>(),
        9usize,
        concat!("Size of: ", stringify!(evt_le_connection_update_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_le_connection_update_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_le_connection_update_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_update_complete>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_update_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_update_complete>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_update_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_update_complete>())).interval as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_update_complete),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_update_complete>())).latency as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_update_complete),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_connection_update_complete>())).supervision_timeout
                as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_connection_update_complete),
            "::",
            stringify!(supervision_timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_le_read_remote_used_features_complete {
    pub status: u8,
    pub handle: u16,
    pub features: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_evt_le_read_remote_used_features_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_le_read_remote_used_features_complete>(),
        11usize,
        concat!(
            "Size of: ",
            stringify!(evt_le_read_remote_used_features_complete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<evt_le_read_remote_used_features_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_le_read_remote_used_features_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_read_remote_used_features_complete>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_read_remote_used_features_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_read_remote_used_features_complete>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_read_remote_used_features_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_read_remote_used_features_complete>())).features
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_read_remote_used_features_complete),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_le_long_term_key_request {
    pub handle: u16,
    pub random: u64,
    pub diversifier: u16,
}
#[test]
fn bindgen_test_layout_evt_le_long_term_key_request() {
    assert_eq!(
        ::std::mem::size_of::<evt_le_long_term_key_request>(),
        12usize,
        concat!("Size of: ", stringify!(evt_le_long_term_key_request))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_le_long_term_key_request>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_le_long_term_key_request))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_long_term_key_request>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_long_term_key_request),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_long_term_key_request>())).random as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_long_term_key_request),
            "::",
            stringify!(random)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_le_long_term_key_request>())).diversifier as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_le_long_term_key_request),
            "::",
            stringify!(diversifier)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_physical_link_complete {
    pub status: u8,
    pub handle: u8,
}
#[test]
fn bindgen_test_layout_evt_physical_link_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_physical_link_complete>(),
        2usize,
        concat!("Size of: ", stringify!(evt_physical_link_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_physical_link_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_physical_link_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_physical_link_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_physical_link_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_physical_link_complete>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_physical_link_complete),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_disconn_physical_link_complete {
    pub status: u8,
    pub handle: u8,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_evt_disconn_physical_link_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_disconn_physical_link_complete>(),
        3usize,
        concat!("Size of: ", stringify!(evt_disconn_physical_link_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_disconn_physical_link_complete>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(evt_disconn_physical_link_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_disconn_physical_link_complete>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_disconn_physical_link_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_disconn_physical_link_complete>())).handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_disconn_physical_link_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_disconn_physical_link_complete>())).reason as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_disconn_physical_link_complete),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_physical_link_loss_warning {
    pub handle: u8,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_evt_physical_link_loss_warning() {
    assert_eq!(
        ::std::mem::size_of::<evt_physical_link_loss_warning>(),
        2usize,
        concat!("Size of: ", stringify!(evt_physical_link_loss_warning))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_physical_link_loss_warning>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_physical_link_loss_warning))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_physical_link_loss_warning>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_physical_link_loss_warning),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_physical_link_loss_warning>())).reason as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_physical_link_loss_warning),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_physical_link_recovery {
    pub handle: u8,
}
#[test]
fn bindgen_test_layout_evt_physical_link_recovery() {
    assert_eq!(
        ::std::mem::size_of::<evt_physical_link_recovery>(),
        1usize,
        concat!("Size of: ", stringify!(evt_physical_link_recovery))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_physical_link_recovery>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_physical_link_recovery))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_physical_link_recovery>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_physical_link_recovery),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_logical_link_complete {
    pub status: u8,
    pub log_handle: u16,
    pub handle: u8,
    pub tx_flow_id: u8,
}
#[test]
fn bindgen_test_layout_evt_logical_link_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_logical_link_complete>(),
        5usize,
        concat!("Size of: ", stringify!(evt_logical_link_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_logical_link_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_logical_link_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_logical_link_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_logical_link_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_logical_link_complete>())).log_handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_logical_link_complete),
            "::",
            stringify!(log_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_logical_link_complete>())).handle as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_logical_link_complete),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_logical_link_complete>())).tx_flow_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_logical_link_complete),
            "::",
            stringify!(tx_flow_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_flow_spec_modify_complete {
    pub status: u8,
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_evt_flow_spec_modify_complete() {
    assert_eq!(
        ::std::mem::size_of::<evt_flow_spec_modify_complete>(),
        3usize,
        concat!("Size of: ", stringify!(evt_flow_spec_modify_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_flow_spec_modify_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_flow_spec_modify_complete))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_flow_spec_modify_complete>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flow_spec_modify_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_flow_spec_modify_complete>())).handle as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_flow_spec_modify_complete),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cmplt_handle {
    pub handle: u16,
    pub num_cmplt_pkts: u16,
    pub num_cmplt_blks: u16,
}
#[test]
fn bindgen_test_layout_cmplt_handle() {
    assert_eq!(
        ::std::mem::size_of::<cmplt_handle>(),
        6usize,
        concat!("Size of: ", stringify!(cmplt_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<cmplt_handle>(),
        1usize,
        concat!("Alignment of ", stringify!(cmplt_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmplt_handle>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmplt_handle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmplt_handle>())).num_cmplt_pkts as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cmplt_handle),
            "::",
            stringify!(num_cmplt_pkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmplt_handle>())).num_cmplt_blks as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmplt_handle),
            "::",
            stringify!(num_cmplt_blks)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct evt_num_completed_blocks {
    pub total_num_blocks: u16,
    pub num_handles: u8,
    pub handles: __IncompleteArrayField<cmplt_handle>,
}
#[test]
fn bindgen_test_layout_evt_num_completed_blocks() {
    assert_eq!(
        ::std::mem::size_of::<evt_num_completed_blocks>(),
        3usize,
        concat!("Size of: ", stringify!(evt_num_completed_blocks))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_num_completed_blocks>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_num_completed_blocks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_num_completed_blocks>())).total_num_blocks as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_num_completed_blocks),
            "::",
            stringify!(total_num_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_num_completed_blocks>())).num_handles as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_num_completed_blocks),
            "::",
            stringify!(num_handles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_num_completed_blocks>())).handles as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_num_completed_blocks),
            "::",
            stringify!(handles)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_amp_status_change {
    pub status: u8,
    pub amp_status: u8,
}
#[test]
fn bindgen_test_layout_evt_amp_status_change() {
    assert_eq!(
        ::std::mem::size_of::<evt_amp_status_change>(),
        2usize,
        concat!("Size of: ", stringify!(evt_amp_status_change))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_amp_status_change>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_amp_status_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_amp_status_change>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_amp_status_change),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evt_amp_status_change>())).amp_status as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_amp_status_change),
            "::",
            stringify!(amp_status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct evt_stack_internal {
    pub type_: u16,
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_evt_stack_internal() {
    assert_eq!(
        ::std::mem::size_of::<evt_stack_internal>(),
        2usize,
        concat!("Size of: ", stringify!(evt_stack_internal))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_stack_internal>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_stack_internal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_stack_internal>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_stack_internal),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_stack_internal>())).data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_stack_internal),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct evt_si_device {
    pub event: u16,
    pub dev_id: u16,
}
#[test]
fn bindgen_test_layout_evt_si_device() {
    assert_eq!(
        ::std::mem::size_of::<evt_si_device>(),
        4usize,
        concat!("Size of: ", stringify!(evt_si_device))
    );
    assert_eq!(
        ::std::mem::align_of::<evt_si_device>(),
        1usize,
        concat!("Alignment of ", stringify!(evt_si_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_si_device>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_si_device),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evt_si_device>())).dev_id as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evt_si_device),
            "::",
            stringify!(dev_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hci_command_hdr {
    pub opcode: u16,
    pub plen: u8,
}
#[test]
fn bindgen_test_layout_hci_command_hdr() {
    assert_eq!(
        ::std::mem::size_of::<hci_command_hdr>(),
        3usize,
        concat!("Size of: ", stringify!(hci_command_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_command_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_command_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_command_hdr>())).opcode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_command_hdr),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_command_hdr>())).plen as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_command_hdr),
            "::",
            stringify!(plen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hci_event_hdr {
    pub evt: u8,
    pub plen: u8,
}
#[test]
fn bindgen_test_layout_hci_event_hdr() {
    assert_eq!(
        ::std::mem::size_of::<hci_event_hdr>(),
        2usize,
        concat!("Size of: ", stringify!(hci_event_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_event_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_event_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_event_hdr>())).evt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_event_hdr),
            "::",
            stringify!(evt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_event_hdr>())).plen as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_event_hdr),
            "::",
            stringify!(plen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hci_acl_hdr {
    pub handle: u16,
    pub dlen: u16,
}
#[test]
fn bindgen_test_layout_hci_acl_hdr() {
    assert_eq!(
        ::std::mem::size_of::<hci_acl_hdr>(),
        4usize,
        concat!("Size of: ", stringify!(hci_acl_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_acl_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_acl_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_acl_hdr>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_acl_hdr),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_acl_hdr>())).dlen as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_acl_hdr),
            "::",
            stringify!(dlen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hci_sco_hdr {
    pub handle: u16,
    pub dlen: u8,
}
#[test]
fn bindgen_test_layout_hci_sco_hdr() {
    assert_eq!(
        ::std::mem::size_of::<hci_sco_hdr>(),
        3usize,
        concat!("Size of: ", stringify!(hci_sco_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_sco_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_sco_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_sco_hdr>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_sco_hdr),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_sco_hdr>())).dlen as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_sco_hdr),
            "::",
            stringify!(dlen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct hci_msg_hdr {
    pub device: u16,
    pub type_: u16,
    pub plen: u16,
}
#[test]
fn bindgen_test_layout_hci_msg_hdr() {
    assert_eq!(
        ::std::mem::size_of::<hci_msg_hdr>(),
        6usize,
        concat!("Size of: ", stringify!(hci_msg_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_msg_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_msg_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_msg_hdr>())).device as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_msg_hdr),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_msg_hdr>())).type_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_msg_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_msg_hdr>())).plen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_msg_hdr),
            "::",
            stringify!(plen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_hci {
    pub hci_family: sa_family_t,
    pub hci_dev: ::std::os::raw::c_ushort,
    pub hci_channel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_sockaddr_hci() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_hci>(),
        6usize,
        concat!("Size of: ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_hci>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_dev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_channel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_filter {
    pub type_mask: u32,
    pub event_mask: [u32; 2usize],
    pub opcode: u16,
}
#[test]
fn bindgen_test_layout_hci_filter() {
    assert_eq!(
        ::std::mem::size_of::<hci_filter>(),
        16usize,
        concat!("Size of: ", stringify!(hci_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_filter>())).type_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_filter),
            "::",
            stringify!(type_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_filter>())).event_mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_filter),
            "::",
            stringify!(event_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_filter>())).opcode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_filter),
            "::",
            stringify!(opcode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_stats {
    pub err_rx: u32,
    pub err_tx: u32,
    pub cmd_tx: u32,
    pub evt_rx: u32,
    pub acl_tx: u32,
    pub acl_rx: u32,
    pub sco_tx: u32,
    pub sco_rx: u32,
    pub byte_rx: u32,
    pub byte_tx: u32,
}
#[test]
fn bindgen_test_layout_hci_dev_stats() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_stats>(),
        40usize,
        concat!("Size of: ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).err_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).err_tx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).cmd_tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(cmd_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).evt_rx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(evt_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).acl_tx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).acl_rx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).sco_tx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).sco_rx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).byte_rx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).byte_tx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_tx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_info {
    pub dev_id: u16,
    pub name: [::std::os::raw::c_char; 8usize],
    pub bdaddr: bdaddr_t,
    pub flags: u32,
    pub type_: u8,
    pub features: [u8; 8usize],
    pub pkt_type: u32,
    pub link_policy: u32,
    pub link_mode: u32,
    pub acl_mtu: u16,
    pub acl_pkts: u16,
    pub sco_mtu: u16,
    pub sco_pkts: u16,
    pub stat: hci_dev_stats,
}
#[test]
fn bindgen_test_layout_hci_dev_info() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_info>(),
        92usize,
        concat!("Size of: ", stringify!(hci_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).name as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).bdaddr as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).features as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).pkt_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(pkt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).link_policy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).link_mode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).acl_mtu as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).acl_pkts as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_pkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).sco_mtu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).sco_pkts as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_pkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).stat as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(stat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_conn_info {
    pub handle: u16,
    pub bdaddr: bdaddr_t,
    pub type_: u8,
    pub out: u8,
    pub state: u16,
    pub link_mode: u32,
}
#[test]
fn bindgen_test_layout_hci_conn_info() {
    assert_eq!(
        ::std::mem::size_of::<hci_conn_info>(),
        16usize,
        concat!("Size of: ", stringify!(hci_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_conn_info>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_conn_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).bdaddr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).out as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).state as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).link_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(link_mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_req {
    pub dev_id: u16,
    pub dev_opt: u32,
}
#[test]
fn bindgen_test_layout_hci_dev_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_req>(),
        8usize,
        concat!("Size of: ", stringify!(hci_dev_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_req>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_req>())).dev_opt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_opt)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct hci_dev_list_req {
    pub dev_num: u16,
    pub dev_req: __IncompleteArrayField<hci_dev_req>,
}
#[test]
fn bindgen_test_layout_hci_dev_list_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_list_req>(),
        4usize,
        concat!("Size of: ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_list_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_list_req>())).dev_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_list_req>())).dev_req as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_req)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct hci_conn_list_req {
    pub dev_id: u16,
    pub conn_num: u16,
    pub conn_info: __IncompleteArrayField<hci_conn_info>,
}
#[test]
fn bindgen_test_layout_hci_conn_list_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_conn_list_req>(),
        4usize,
        concat!("Size of: ", stringify!(hci_conn_list_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_conn_list_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_conn_list_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_list_req>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_list_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_list_req>())).conn_num as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_list_req),
            "::",
            stringify!(conn_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_list_req>())).conn_info as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_list_req),
            "::",
            stringify!(conn_info)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct hci_conn_info_req {
    pub bdaddr: bdaddr_t,
    pub type_: u8,
    pub conn_info: __IncompleteArrayField<hci_conn_info>,
}
#[test]
fn bindgen_test_layout_hci_conn_info_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_conn_info_req>(),
        8usize,
        concat!("Size of: ", stringify!(hci_conn_info_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_conn_info_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_conn_info_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info_req>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info_req),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info_req>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info_req),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info_req>())).conn_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info_req),
            "::",
            stringify!(conn_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_auth_info_req {
    pub bdaddr: bdaddr_t,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_hci_auth_info_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_auth_info_req>(),
        7usize,
        concat!("Size of: ", stringify!(hci_auth_info_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_auth_info_req>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_auth_info_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_auth_info_req>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_auth_info_req),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_auth_info_req>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_auth_info_req),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_inquiry_req {
    pub dev_id: u16,
    pub flags: u16,
    pub lap: [u8; 3usize],
    pub length: u8,
    pub num_rsp: u8,
}
#[test]
fn bindgen_test_layout_hci_inquiry_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_inquiry_req>(),
        10usize,
        concat!("Size of: ", stringify!(hci_inquiry_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_inquiry_req>(),
        2usize,
        concat!("Alignment of ", stringify!(hci_inquiry_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).lap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(lap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).length as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).num_rsp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(num_rsp)
        )
    );
}
pub type sdp_list_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void),
>;
pub type sdp_free_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type sdp_comp_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn sdp_list_append(
        list: *mut sdp_list_t,
        d: *mut ::std::os::raw::c_void,
    ) -> *mut sdp_list_t;
}
extern "C" {
    pub fn sdp_list_remove(
        list: *mut sdp_list_t,
        d: *mut ::std::os::raw::c_void,
    ) -> *mut sdp_list_t;
}
extern "C" {
    pub fn sdp_list_insert_sorted(
        list: *mut sdp_list_t,
        data: *mut ::std::os::raw::c_void,
        f: sdp_comp_func_t,
    ) -> *mut sdp_list_t;
}
extern "C" {
    pub fn sdp_list_free(list: *mut sdp_list_t, f: sdp_free_func_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdp_session_t {
    pub sock: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
    pub local: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub tid: u16,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sdp_session_t() {
    assert_eq!(
        ::std::mem::size_of::<sdp_session_t>(),
        32usize,
        concat!("Size of: ", stringify!(sdp_session_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdp_session_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdp_session_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_session_t>())).sock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_session_t),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_session_t>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_session_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_session_t>())).local as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_session_t),
            "::",
            stringify!(local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_session_t>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_session_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_session_t>())).tid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_session_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdp_session_t>())).priv_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sdp_session_t),
            "::",
            stringify!(priv_)
        )
    );
}
pub const sdp_attrreq_type_t_SDP_ATTR_REQ_INDIVIDUAL: sdp_attrreq_type_t = 1;
pub const sdp_attrreq_type_t_SDP_ATTR_REQ_RANGE: sdp_attrreq_type_t = 2;
pub type sdp_attrreq_type_t = u32;
pub type sdp_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        type_: u8,
        status: u16,
        rsp: *mut u8,
        size: size_t,
        udata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn sdp_connect(
        src: *const bdaddr_t,
        dst: *const bdaddr_t,
        flags: u32,
    ) -> *mut sdp_session_t;
}
extern "C" {
    pub fn sdp_close(session: *mut sdp_session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_socket(session: *const sdp_session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_create(sk: ::std::os::raw::c_int, flags: u32) -> *mut sdp_session_t;
}
extern "C" {
    pub fn sdp_get_error(session: *mut sdp_session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_process(session: *mut sdp_session_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_set_notify(
        session: *mut sdp_session_t,
        func: sdp_callback_t,
        udata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_service_search_async(
        session: *mut sdp_session_t,
        search: *const sdp_list_t,
        max_rec_num: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_service_attr_async(
        session: *mut sdp_session_t,
        handle: u32,
        reqtype: sdp_attrreq_type_t,
        attrid_list: *const sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_service_search_attr_async(
        session: *mut sdp_session_t,
        search: *const sdp_list_t,
        reqtype: sdp_attrreq_type_t,
        attrid_list: *const sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_gen_tid(session: *mut sdp_session_t) -> u16;
}
extern "C" {
    pub fn sdp_general_inquiry(
        ii: *mut inquiry_info,
        dev_num: ::std::os::raw::c_int,
        duration: ::std::os::raw::c_int,
        found: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_int_attr(
        rec: *const sdp_record_t,
        attr: u16,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_string_attr(
        rec: *const sdp_record_t,
        attr: u16,
        value: *mut ::std::os::raw::c_char,
        valuelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_data_alloc(dtd: u8, value: *const ::std::os::raw::c_void) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_data_alloc_with_length(
        dtd: u8,
        value: *const ::std::os::raw::c_void,
        length: u32,
    ) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_data_free(data: *mut sdp_data_t);
}
extern "C" {
    pub fn sdp_data_get(rec: *const sdp_record_t, attr_id: u16) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_seq_alloc(
        dtds: *mut *mut ::std::os::raw::c_void,
        values: *mut *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_seq_alloc_with_length(
        dtds: *mut *mut ::std::os::raw::c_void,
        values: *mut *mut ::std::os::raw::c_void,
        length: *mut ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_seq_append(seq: *mut sdp_data_t, data: *mut sdp_data_t) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_attr_add(
        rec: *mut sdp_record_t,
        attr: u16,
        data: *mut sdp_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_attr_remove(rec: *mut sdp_record_t, attr: u16);
}
extern "C" {
    pub fn sdp_attr_replace(rec: *mut sdp_record_t, attr: u16, data: *mut sdp_data_t);
}
extern "C" {
    pub fn sdp_set_uuidseq_attr(
        rec: *mut sdp_record_t,
        attr: u16,
        seq: *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_uuidseq_attr(
        rec: *const sdp_record_t,
        attr: u16,
        seqp: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_attr_add_new(
        rec: *mut sdp_record_t,
        attr: u16,
        dtd: u8,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_set_info_attr(
        rec: *mut sdp_record_t,
        name: *const ::std::os::raw::c_char,
        prov: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sdp_set_access_protos(
        rec: *mut sdp_record_t,
        proto: *const sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_set_add_access_protos(
        rec: *mut sdp_record_t,
        proto: *const sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_proto_port(
        list: *const sdp_list_t,
        proto: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_proto_desc(
        list: *mut sdp_list_t,
        proto: ::std::os::raw::c_int,
    ) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_set_lang_attr(
        rec: *mut sdp_record_t,
        list: *const sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_set_service_id(rec: *mut sdp_record_t, uuid: uuid_t);
}
extern "C" {
    pub fn sdp_set_group_id(rec: *mut sdp_record_t, grouuuid: uuid_t);
}
extern "C" {
    pub fn sdp_set_profile_descs(
        rec: *mut sdp_record_t,
        desc: *const sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_set_url_attr(
        rec: *mut sdp_record_t,
        clientExecURL: *const ::std::os::raw::c_char,
        docURL: *const ::std::os::raw::c_char,
        iconURL: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sdp_service_search_req(
        session: *mut sdp_session_t,
        search: *const sdp_list_t,
        max_rec_num: u16,
        rsp_list: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_service_attr_req(
        session: *mut sdp_session_t,
        handle: u32,
        reqtype: sdp_attrreq_type_t,
        attrid_list: *const sdp_list_t,
    ) -> *mut sdp_record_t;
}
extern "C" {
    pub fn sdp_service_search_attr_req(
        session: *mut sdp_session_t,
        search: *const sdp_list_t,
        reqtype: sdp_attrreq_type_t,
        attrid_list: *const sdp_list_t,
        rsp_list: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_record_alloc() -> *mut sdp_record_t;
}
extern "C" {
    pub fn sdp_record_free(rec: *mut sdp_record_t);
}
extern "C" {
    pub fn sdp_device_record_register_binary(
        session: *mut sdp_session_t,
        device: *mut bdaddr_t,
        data: *mut u8,
        size: u32,
        flags: u8,
        handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_device_record_register(
        session: *mut sdp_session_t,
        device: *mut bdaddr_t,
        rec: *mut sdp_record_t,
        flags: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_record_register(
        session: *mut sdp_session_t,
        rec: *mut sdp_record_t,
        flags: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_device_record_unregister_binary(
        session: *mut sdp_session_t,
        device: *mut bdaddr_t,
        handle: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_device_record_unregister(
        session: *mut sdp_session_t,
        device: *mut bdaddr_t,
        rec: *mut sdp_record_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_record_unregister(
        session: *mut sdp_session_t,
        rec: *mut sdp_record_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_device_record_update_binary(
        session: *mut sdp_session_t,
        device: *mut bdaddr_t,
        handle: u32,
        data: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_device_record_update(
        session: *mut sdp_session_t,
        device: *mut bdaddr_t,
        rec: *const sdp_record_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_record_update(
        sess: *mut sdp_session_t,
        rec: *const sdp_record_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_record_print(rec: *const sdp_record_t);
}
extern "C" {
    pub fn sdp_uuid16_create(uuid: *mut uuid_t, data: u16) -> *mut uuid_t;
}
extern "C" {
    pub fn sdp_uuid32_create(uuid: *mut uuid_t, data: u32) -> *mut uuid_t;
}
extern "C" {
    pub fn sdp_uuid128_create(
        uuid: *mut uuid_t,
        data: *const ::std::os::raw::c_void,
    ) -> *mut uuid_t;
}
extern "C" {
    pub fn sdp_uuid16_cmp(
        p1: *const ::std::os::raw::c_void,
        p2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_uuid128_cmp(
        p1: *const ::std::os::raw::c_void,
        p2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_uuid_cmp(
        p1: *const ::std::os::raw::c_void,
        p2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_uuid_to_uuid128(uuid: *const uuid_t) -> *mut uuid_t;
}
extern "C" {
    pub fn sdp_uuid16_to_uuid128(uuid128: *mut uuid_t, uuid16: *const uuid_t);
}
extern "C" {
    pub fn sdp_uuid32_to_uuid128(uuid128: *mut uuid_t, uuid32: *const uuid_t);
}
extern "C" {
    pub fn sdp_uuid128_to_uuid(uuid: *mut uuid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_uuid_to_proto(uuid: *mut uuid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_uuid_extract(
        buffer: *const u8,
        bufsize: ::std::os::raw::c_int,
        uuid: *mut uuid_t,
        scanned: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_uuid_print(uuid: *const uuid_t);
}
extern "C" {
    pub fn sdp_uuid2strn(
        uuid: *const uuid_t,
        str: *mut ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_proto_uuid2strn(
        uuid: *const uuid_t,
        str: *mut ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_svclass_uuid2strn(
        uuid: *const uuid_t,
        str: *mut ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_profile_uuid2strn(
        uuid: *const uuid_t,
        str: *mut ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_access_protos(
        rec: *const sdp_record_t,
        protos: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_add_access_protos(
        rec: *const sdp_record_t,
        protos: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_lang_attr(
        rec: *const sdp_record_t,
        langSeq: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_profile_descs(
        rec: *const sdp_record_t,
        profDesc: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_server_ver(
        rec: *const sdp_record_t,
        pVnumList: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_service_id(rec: *const sdp_record_t, uuid: *mut uuid_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_group_id(rec: *const sdp_record_t, uuid: *mut uuid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_record_state(
        rec: *const sdp_record_t,
        svcRecState: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_service_avail(
        rec: *const sdp_record_t,
        svcAvail: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_service_ttl(
        rec: *const sdp_record_t,
        svcTTLInfo: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_database_state(
        rec: *const sdp_record_t,
        svcDBState: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_set_supp_feat(
        rec: *mut sdp_record_t,
        sf: *const sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_get_supp_feat(
        rec: *const sdp_record_t,
        seqp: *mut *mut sdp_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_extract_pdu(
        pdata: *const u8,
        bufsize: ::std::os::raw::c_int,
        scanned: *mut ::std::os::raw::c_int,
    ) -> *mut sdp_record_t;
}
extern "C" {
    pub fn sdp_copy_record(rec: *mut sdp_record_t) -> *mut sdp_record_t;
}
extern "C" {
    pub fn sdp_data_print(data: *mut sdp_data_t);
}
extern "C" {
    pub fn sdp_print_service_attr(alist: *mut sdp_list_t);
}
extern "C" {
    pub fn sdp_attrid_comp_func(
        key1: *const ::std::os::raw::c_void,
        key2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_set_seq_len(ptr: *mut u8, length: u32);
}
extern "C" {
    pub fn sdp_set_attrid(pdu: *mut sdp_buf_t, id: u16);
}
extern "C" {
    pub fn sdp_append_to_pdu(dst: *mut sdp_buf_t, d: *mut sdp_data_t);
}
extern "C" {
    pub fn sdp_append_to_buf(dst: *mut sdp_buf_t, data: *mut u8, len: u32);
}
extern "C" {
    pub fn sdp_gen_pdu(pdu: *mut sdp_buf_t, data: *mut sdp_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_gen_record_pdu(
        rec: *const sdp_record_t,
        pdu: *mut sdp_buf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_extract_seqtype(
        buf: *const u8,
        bufsize: ::std::os::raw::c_int,
        dtdp: *mut u8,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_extract_attr(
        pdata: *const u8,
        bufsize: ::std::os::raw::c_int,
        extractedLength: *mut ::std::os::raw::c_int,
        rec: *mut sdp_record_t,
    ) -> *mut sdp_data_t;
}
extern "C" {
    pub fn sdp_pattern_add_uuid(rec: *mut sdp_record_t, uuid: *mut uuid_t);
}
extern "C" {
    pub fn sdp_pattern_add_uuidseq(rec: *mut sdp_record_t, seq: *mut sdp_list_t);
}
extern "C" {
    pub fn sdp_send_req_w4_rsp(
        session: *mut sdp_session_t,
        req: *mut u8,
        rsp: *mut u8,
        reqsize: u32,
        rspsize: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdp_add_lang_attr(rec: *mut sdp_record_t);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
